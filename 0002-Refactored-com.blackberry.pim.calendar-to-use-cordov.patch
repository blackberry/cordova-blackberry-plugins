From d6bcaec851be2627a182301c76d686ed15d5a6c3 Mon Sep 17 00:00:00 2001
From: Rosa Tse <rtse@blackberry.com>
Date: Tue, 14 May 2013 23:43:42 -0400
Subject: [PATCH 02/61] Refactored com.blackberry.pim.calendar to use cordova
 events and exec

Reviewed by Bryan Higgins <bhiggins@blackberry.com>
Tested by Igor Shneur <ishneur@blackberry.com>
---
 .../src/blackberry10/calendarUtils.js              |    9 +-
 .../src/blackberry10/index.js                      |  237 +++++++++++++-------
 .../www/CalendarEvent.js                           |   60 ++---
 plugin/com.blackberry.pim.calendar/www/client.js   |   73 +++---
 .../com.blackberry.pim.calendar/CalendarEvent.js   |   81 ++-----
 test/unit/com.blackberry.pim.calendar/client.js    |   96 ++++----
 test/unit/com.blackberry.pim.calendar/index.js     |  103 +++------
 7 files changed, 299 insertions(+), 360 deletions(-)

diff --git a/plugin/com.blackberry.pim.calendar/src/blackberry10/calendarUtils.js b/plugin/com.blackberry.pim.calendar/src/blackberry10/calendarUtils.js
index d98f988..1dd662e 100644
--- a/plugin/com.blackberry.pim.calendar/src/blackberry10/calendarUtils.js
+++ b/plugin/com.blackberry.pim.calendar/src/blackberry10/calendarUtils.js
@@ -115,10 +115,6 @@ function validateFindArguments(findOptions) {
     return !error;
 }
 
-function S4() {
-    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
-}
-
 module.exports = {
     isDate: isDate,
     isObject: function (obj) {
@@ -140,8 +136,5 @@ module.exports = {
             errorCallback(new CalendarError(code));
         }
     },
-    validateFindArguments: validateFindArguments,
-    guid: function () {
-        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
-    }
+    validateFindArguments: validateFindArguments
 };
\ No newline at end of file
diff --git a/plugin/com.blackberry.pim.calendar/src/blackberry10/index.js b/plugin/com.blackberry.pim.calendar/src/blackberry10/index.js
index d703288..3d64650 100644
--- a/plugin/com.blackberry.pim.calendar/src/blackberry10/index.js
+++ b/plugin/com.blackberry.pim.calendar/src/blackberry10/index.js
@@ -15,48 +15,80 @@
  */
 
 var pimCalendar,
-    _event = require("../../lib/event"),
     _utils = require("../../lib/utils"),
     config = require("../../lib/config"),
     calendarUtils = require("./calendarUtils"),
     CalendarError = require("./CalendarError");
 
-function checkPermission(success, eventId) {
-    if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-        _event.trigger(eventId, {
-            "result": escape(JSON.stringify({
-                "_success": false,
-                "code": CalendarError.PERMISSION_DENIED_ERROR
-            }))
-        });
-        success();
-        return false;
-    }
-
-    return true;
+function checkPermission() {
+    return _utils.hasPermission(config, "access_pimdomain_calendars");
 }
 
-function getCurrentTimezone(success, eventId) {
+function getCurrentTimezone() {
     var timezone = null;
 
     try {
         timezone = window.qnx.webplatform.device.timezone;
     } catch (e) {
-        _event.trigger(eventId, {
-            "result": escape(JSON.stringify({
-                "_success": false,
-                "code": CalendarError.UNKNOWN_ERROR
-            }))
-        });
-        success();
+        // do nothing
     }
 
     return timezone;
 }
 
+function processJnextSaveOrRemoveData(result, JnextData) {
+    var data = JnextData;
+
+    if (data._success === true) {
+        result.callbackOk(data, false);
+    } else {
+        result.callbackError(data.code, false);
+    }
+}
+
+function processJnextFindData(eventId, eventHandler, JnextData) {
+    var data = JnextData,
+        i,
+        l,
+        more = false,
+        resultsObject = {},
+        birthdayInfo;
+
+    if (!data.events) {
+        data.events = []; // if JnextData.events return null, return an empty array
+    }
+
+    if (data._success === true) {
+        eventHandler.error = false;
+    }
+
+    // Concatenate results; do not add the same contacts
+    for (i = 0, l = eventHandler.searchResult.length; i < l; i++) {
+        resultsObject[eventHandler.searchResult[i].id] = true;
+    }
+
+    for (i = 0, l = data.events.length; i < l; i++) {
+        if (resultsObject[data.events[i].id]) {
+            // Already existing
+        } else {
+            eventHandler.searchResult.push(data.events[i]);
+        }
+    }
+
+    if (eventHandler.error) {
+        eventHandler.result.callbackError(data.code, false);
+    } else {
+        eventHandler.result.callbackOk({
+            "folders": data.folders,
+            "events": eventHandler.searchResult
+        }, false);
+    }
+}
+
 module.exports = {
-    find: function (success, fail, args) {
-        var parsedArgs = {},
+    find: function (success, fail, args, env) {
+        var result = new PluginResult(args, env),
+            parsedArgs = {},
             key;
 
         for (key in args) {
@@ -65,35 +97,31 @@ module.exports = {
             }
         }
 
-        if (!checkPermission(success, parsedArgs._eventId)) {
+        if (!checkPermission()) {
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
         if (!calendarUtils.validateFindArguments(parsedArgs.options)) {
-            _event.trigger(parsedArgs._eventId, {
-                "result": escape(JSON.stringify({
-                    "_success": false,
-                    "code": CalendarError.INVALID_ARGUMENT_ERROR
-                }))
-            });
-            success();
+            result.error(CalendarError.INVALID_ARGUMENT_ERROR, false);
             return;
         }
 
         parsedArgs.options = parsedArgs.options || {};
 
-        parsedArgs.options.sourceTimezone = getCurrentTimezone(parsedArgs._eventId, success);
+        parsedArgs.options.sourceTimezone = getCurrentTimezone();
         if (!parsedArgs.options.sourceTimezone) {
+            result.error(CalendarError.UNKNOWN_ERROR, false);
             return;
         }
 
-        pimCalendar.getInstance().find(parsedArgs);
-
-        success();
+        pimCalendar.getInstance().find(parsedArgs, result, processJnextFindData);
+        result.noResult(true);
     },
 
-    save: function (success, fail, args) {
-        var attributes = {},
+    save: function (success, fail, args, env) {
+        var result = new PluginResult(args, env),
+            attributes = {},
             key;
 
         for (key in args) {
@@ -102,12 +130,14 @@ module.exports = {
             }
         }
 
-        if (!checkPermission(success, attributes._eventId)) {
+        if (!checkPermission()) {
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        attributes.sourceTimezone = getCurrentTimezone(attributes._eventId, success);
+        attributes.sourceTimezone = getCurrentTimezone();
         if (!attributes.sourceTimezone) {
+            result.error(CalendarError.UNKNOWN_ERROR, false);
             return;
         }
 
@@ -117,19 +147,22 @@ module.exports = {
             attributes.targetTimezone = "";
         }
 
-        pimCalendar.getInstance().save(attributes);
-        success();
+        attributes._eventId = result.callbackId;
+
+        pimCalendar.getInstance().save(attributes, result, processJnextSaveOrRemoveData);
+        result.noResult(true);
     },
 
-    remove: function (success, fail, args) {
-        var attributes = {
-            "accountId" : JSON.parse(decodeURIComponent(args.accountId)),
-            "calEventId" : JSON.parse(decodeURIComponent(args.calEventId)),
-            "_eventId" : JSON.parse(decodeURIComponent(args._eventId)),
-            "removeAll" : JSON.parse(decodeURIComponent(args.removeAll))
-        };
+    remove: function (success, fail, args, env) {
+        var result = new PluginResult(args, env),
+            attributes = {
+                "accountId" : JSON.parse(decodeURIComponent(args.accountId)),
+                "calEventId" : JSON.parse(decodeURIComponent(args.calEventId)),
+                "removeAll" : JSON.parse(decodeURIComponent(args.removeAll))
+            };
 
-        if (!checkPermission(success, attributes._eventId)) {
+        if (!checkPermission()) {
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
@@ -137,43 +170,51 @@ module.exports = {
             attributes.dateToRemove = JSON.parse(decodeURIComponent(args.dateToRemove));
         }
 
-        attributes.sourceTimezone = getCurrentTimezone(attributes._eventId, success);
+        attributes.sourceTimezone = getCurrentTimezone();
         if (!attributes.sourceTimezone) {
+            result.error(CalendarError.UNKNOWN_ERROR, false);
             return;
         }
 
-        pimCalendar.getInstance().remove(attributes);
-        success();
+        attributes._eventId = result.callbackId;
+
+        pimCalendar.getInstance().remove(attributes, result, processJnextSaveOrRemoveData);
+        result.noResult(true);
     },
 
-    getDefaultCalendarAccount: function (success, fail, args) {
+    getDefaultCalendarAccount: function (success, fail, args, env) {
+        var result = new PluginResult(args, env);
+
         if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-            success(null);
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        success(pimCalendar.getInstance().getDefaultCalendarAccount());
+        result.ok(pimCalendar.getInstance().getDefaultCalendarAccount(), false);
     },
 
-    getCalendarAccounts: function (success, fail, args) {
+    getCalendarAccounts: function (success, fail, args, env) {
+        var result = new PluginResult(args, env);
+
         if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-            success(null);
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        success(pimCalendar.getInstance().getCalendarAccounts());
+        result.ok(pimCalendar.getInstance().getCalendarAccounts(), false);
     },
 
-    getEvent: function (success, fail, args) {
+    getEvent: function (success, fail, args, env) {
+        var pluginResult = new PluginResult(args, env),
+            findOptions = {},
+            results,
+            event = null;
+
         if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-            success(null);
+            pluginResult.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        var findOptions = {},
-            results,
-            event = null;
-
         findOptions.eventId = JSON.parse(decodeURIComponent(args.eventId));
         findOptions.accountId = JSON.parse(decodeURIComponent(args.accountId));
 
@@ -185,25 +226,33 @@ module.exports = {
             }
         }
 
-        success(event);
+        if (event) {
+            pluginResult.ok(event, false);
+        } else {
+            pluginResult.error(CalendarError.UNKNOWN_ERROR, false);
+        }
     },
 
-    getCalendarFolders: function (success, fail, args) {
-        if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-            success(null);
+    getCalendarFolders: function (success, fail, args, env) {
+        var result = new PluginResult(args, env);
+
+        if (!checkPermission()) {
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        success(pimCalendar.getInstance().getCalendarFolders());
+        result.ok(pimCalendar.getInstance().getCalendarFolders(), false);
     },
 
-    getDefaultCalendarFolder: function (success, fail, args) {
-        if (!_utils.hasPermission(config, "access_pimdomain_calendars")) {
-            success(null);
+    getDefaultCalendarFolder: function (success, fail, args, env) {
+        var result = new PluginResult(args, env);
+
+        if (!checkPermission()) {
+            result.error(CalendarError.PERMISSION_DENIED_ERROR, false);
             return;
         }
 
-        success(pimCalendar.getInstance().getDefaultCalendarFolder());
+        result.ok(pimCalendar.getInstance().getDefaultCalendarFolder(), false);
     }
 };
 
@@ -216,7 +265,17 @@ JNEXT.PimCalendar = function ()
     var self = this,
         hasInstance = false;
 
-    self.find = function (args) {
+    self.find = function (args, pluginResult, handler) {
+        self.eventHandlers[args.callbackId] = {
+            "result" : pluginResult,
+            "action" : "find",
+            "searchResult" : [],
+            "handler" : handler,
+            "error" : true
+        };
+
+        args._eventId = args.callbackId;
+
         JNEXT.invoke(self.m_id, "find " + JSON.stringify(args));
         return "";
     };
@@ -226,12 +285,24 @@ JNEXT.PimCalendar = function ()
         return JSON.parse(value);
     };
 
-    self.save = function (args) {
+    self.save = function (args, pluginResult, handler) {
+        //register save eventHandler for when JNEXT onEvent fires
+        self.eventHandlers[args._eventId] = {
+            "result" : pluginResult,
+            "action" : "save",
+            "handler" : handler
+        };
         JNEXT.invoke(self.m_id, "save " + JSON.stringify(args));
         return "";
     };
 
-    self.remove = function (args) {
+    self.remove = function (args, pluginResult, handler) {
+        //register remove eventHandler for when JNEXT onEvent fires
+        self.eventHandlers[args._eventId] = {
+            "result" : pluginResult,
+            "action" : "remove",
+            "handler" : handler
+        };
         JNEXT.invoke(self.m_id, "remove " + JSON.stringify(args));
         return "";
     };
@@ -277,15 +348,23 @@ JNEXT.PimCalendar = function ()
     self.onEvent = function (strData) {
         var arData = strData.split(" "),
             strEventDesc = arData[0],
-            args = {};
+            args = {},
+            eventHandler;
 
         if (strEventDesc === "result") {
             args.result = escape(strData.split(" ").slice(2).join(" "));
-            _event.trigger(arData[1], args);
+            eventHandler = self.eventHandlers[arData[1]];
+
+            if (eventHandler.action === "save" || eventHandler.action === "remove") {
+                eventHandler.handler(eventHandler.result, JSON.parse(decodeURIComponent(args.result)));
+            } else if (eventHandler.action === "find") {
+                eventHandler.handler(arData[1], eventHandler, JSON.parse(decodeURIComponent(args.result)));
+            }
         }
     };
 
     self.m_id = "";
+    self.eventHandlers = {};
 
     self.getInstance = function () {
         if (!hasInstance) {
diff --git a/plugin/com.blackberry.pim.calendar/www/CalendarEvent.js b/plugin/com.blackberry.pim.calendar/www/CalendarEvent.js
index 151c790..86aefc3 100644
--- a/plugin/com.blackberry.pim.calendar/www/CalendarEvent.js
+++ b/plugin/com.blackberry.pim.calendar/www/CalendarEvent.js
@@ -16,7 +16,8 @@
  specific language governing permissions and limitations
  under the License.
  */
-var CalendarEvent,
+var exec = cordova.require("cordova/exec"),
+    CalendarEvent,
     _ID = "com.blackberry.pim.calendar",
     calendarUtils = require("./calendarUtils"),
     CalendarError = require("./CalendarError"),
@@ -168,28 +169,19 @@ CalendarEvent.prototype.save = function (onSaveSuccess, onSaveError) {
         args.parentId = window.parseInt(this.parentId);
     }
 
-    args._eventId = calendarUtils.guid();
-
-    saveCallback = function (args) {
-        var result = JSON.parse(unescape(args.result)),
-            errorObj,
-            newEvent;
-
-        if (result._success) {
+    exec(
+        function (result) {
             if (successCallback) {
-                newEvent = new CalendarEvent(calendarUtils.populateEvent(result.event));
-                successCallback(newEvent);
+                successCallback(new CalendarEvent(calendarUtils.populateEvent(result.event)));
             }
-        } else {
+        }, 
+        function (code) {
             if (errorCallback) {
-                errorObj = new CalendarError(result.code);
-                errorCallback(errorObj);
+                errorCallback(new CalendarError(code));
             }
-        }
-    };
-
-    window.webworks.event.once(_ID, args._eventId, saveCallback);
-    window.webworks.exec(function () {}, function () {}, _ID, "save", args);
+        },
+        _ID, "save", args
+    );
 };
 
 CalendarEvent.prototype.remove = function (onRemoveSuccess, onRemoveError, removeAll) {
@@ -208,7 +200,6 @@ CalendarEvent.prototype.remove = function (onRemoveSuccess, onRemoveError, remov
 
     args.accountId = window.parseInt(this.folder.accountId);
     args.calEventId = window.parseInt(this.id);
-    args._eventId = calendarUtils.guid();
 
     // if event is not recurring, always remove all
     removeAll = !(this.recurrence && typeof removeAll === "boolean" && !removeAll);
@@ -220,26 +211,19 @@ CalendarEvent.prototype.remove = function (onRemoveSuccess, onRemoveError, remov
         args.dateToRemove = calendarUtils.preprocessDate(this.start);
     }
 
-    removeCallback = function (args) {
-        var result = JSON.parse(unescape(args.result)),
-            errorObj;
-
-        if (result._success) {
-            if (successCallback) {
-                successCallback();
-            }
-        } else {
-            if (errorCallback) {
-                errorObj = new CalendarError(result.code);
-                errorCallback(errorObj);
-            }
-        }
-    };
-
     // accountId is set only if the event is persisted in the device, if accountId is not set, there is nothing to do because the event has not been persisted;
     if (args.accountId) {
-        window.webworks.event.once(_ID, args._eventId, removeCallback);
-        window.webworks.exec(function () {}, function () {}, _ID, "remove", args);
+        exec(
+            function () {
+                if (successCallback) {
+                    successCallback();
+                }
+            }, function (code) {
+                if (errorCallback) {
+                    errorCallback(new CalendarError(code));
+                }
+            }, _ID, "remove", args
+        );
     } else {
         if (successCallback) {
             successCallback();
diff --git a/plugin/com.blackberry.pim.calendar/www/client.js b/plugin/com.blackberry.pim.calendar/www/client.js
index 9b74b62..0b82120 100644
--- a/plugin/com.blackberry.pim.calendar/www/client.js
+++ b/plugin/com.blackberry.pim.calendar/www/client.js
@@ -24,8 +24,9 @@
  *   Methods:
  */
 
-var _self = {},
-    _ID = "blackberry.pim.calendar",
+var exec = cordova.require("cordova/exec"),
+    _self = {},
+    _ID = "com.blackberry.pim.calendar",
     CalendarEvent = require("./CalendarEvent"),
     CalendarError = require("./CalendarError"),
     CalendarFindOptions = require("./CalendarFindOptions"),
@@ -42,8 +43,8 @@ function getFolderKeyList(folders) {
     if (folders && Array.isArray(folders)) {
         folders.forEach(function (folder) {
             folderKeys.push({
-                "id": parseInt(folder.id, 10),
-                "accountId": parseInt(folder.accountId, 10)
+                "id": window.parseInt(folder.id, 10),
+                "accountId": window.parseInt(folder.accountId, 10)
             });
         });
     }
@@ -78,7 +79,7 @@ _self.getCalendarAccounts = function () {
         },
         accounts = [];
 
-    window.webworks.exec(success, fail, _ID, "getCalendarAccounts");
+    exec(success, fail, _ID, "getCalendarAccounts");
 
     obj.forEach(function (account) {
         accounts.push(new CalendarAccount(account));
@@ -96,7 +97,7 @@ _self.getDefaultCalendarAccount = function () {
             throw data;
         };
 
-    window.webworks.exec(success, fail, _ID, "getDefaultCalendarAccount");
+    exec(success, fail, _ID, "getDefaultCalendarAccount");
 
     // not a valid account - default account not accessible by app
     if (!obj || parseInt(obj.id, 10) <= 0) {
@@ -116,7 +117,7 @@ _self.getCalendarFolders = function () {
         },
         folders = [];
 
-    window.webworks.exec(success, fail, _ID, "getCalendarFolders");
+    exec(success, fail, _ID, "getCalendarFolders");
 
     obj.forEach(function (props) {
         folders.push(new CalendarFolder(props));
@@ -134,7 +135,7 @@ _self.getDefaultCalendarFolder = function () {
             throw data;
         };
 
-    window.webworks.exec(success, fail, _ID, "getDefaultCalendarFolder");
+    exec(success, fail, _ID, "getDefaultCalendarFolder");
 
     // not a valid folder - default folder not accessible by app
     if (!obj || obj.type <= 0) {
@@ -158,7 +159,7 @@ _self.getEvent = function (eventId, folder) {
         };
 
 
-    window.webworks.exec(success, fail, _ID, "getEvent", {
+    exec(success, fail, _ID, "getEvent", {
         "eventId": eventId,
         "accountId": folder.accountId
     });
@@ -171,9 +172,6 @@ _self.getEvent = function (eventId, folder) {
 };
 
 _self.findEvents = function (findOptions, onFindSuccess, onFindError) {
-    var callback,
-        eventId;
-
     if (!onFindSuccess || typeof onFindSuccess !== "function") {
         calendarUtils.invokeErrorCallback(onFindError, CalendarError.INVALID_ARGUMENT_ERROR);
         return;
@@ -188,45 +186,26 @@ _self.findEvents = function (findOptions, onFindSuccess, onFindError) {
         findOptions.filter.folders = getFolderKeyList(findOptions.filter.folders);
     }
 
-    callback = function (args) {
-        var result,
-            events,
-            tmp,
-            realEvents = [];
-
-        try {
-            tmp = unescape(args.result);
-            result = JSON.parse(tmp);
-            events = result.events;
-        } catch (e) {
-            result = {
-                "_success": false,
-                "code": CalendarError.UNKNOWN_ERROR
-            };
-        }
+    exec(
+        function (searchResult) {
+            var realEvents = [];
 
-        if (result._success) {
-            if (events) {
-                events.forEach(function (event) {
-                    event["folder"] = result.folders[event.accountId + "-" + event.folderId];
-                    realEvents.push(new CalendarEvent(calendarUtils.populateEvent(event)));
-                });
-            }
+            searchResult.events.forEach(function (event) {
+                event["folder"] = searchResult.folders[event.accountId + "-" + event.folderId];
+                realEvents.push(new CalendarEvent(calendarUtils.populateEvent(event)));
+            });
 
             onFindSuccess(realEvents);
-        } else {
-            calendarUtils.invokeErrorCallback(onFindError, result.code);
+        },
+        function (code) {
+            calendarUtils.invokeErrorCallback(onFindError, code);
+        },
+        _ID,
+        "find",
+        {
+            "options": findOptions
         }
-    };
-
-    eventId = calendarUtils.guid();
-
-    window.webworks.event.once(_ID, eventId, callback);
-
-    window.webworks.exec(function () {}, function () {}, _ID, "find", {
-        "_eventId": eventId,
-        "options": findOptions
-    });
+    );
 };
 
 _self.CalendarEvent = CalendarEvent;
diff --git a/test/unit/com.blackberry.pim.calendar/CalendarEvent.js b/test/unit/com.blackberry.pim.calendar/CalendarEvent.js
index c55bfd0..ad1c966 100644
--- a/test/unit/com.blackberry.pim.calendar/CalendarEvent.js
+++ b/test/unit/com.blackberry.pim.calendar/CalendarEvent.js
@@ -21,21 +21,28 @@ var _extDir = __dirname + "/../../../plugin",
     _ID = "com.blackberry.pim.calendar",
     CalendarEvent,
     CalendarError,
-    mockedWebworks = {
-        event: {}
-    };
+    mockedExec = jasmine.createSpy("exec");
 
 describe("pim.calendar CalendarEvent", function () {
     beforeEach(function () {
-        GLOBAL.window = GLOBAL;
-        GLOBAL.window.webworks = mockedWebworks;
+        GLOBAL.window = {
+            parseInt: jasmine.createSpy().andCallFake(function (obj) {
+                return Number(obj);
+            }),
+            isNaN: jasmine.createSpy().andCallFake(function (obj) {
+                return obj === "abc";
+            })
+        };
+        GLOBAL.cordova = {
+            require: jasmine.createSpy().andReturn(mockedExec)
+        };
         CalendarEvent = require(_apiDir + "/www/CalendarEvent");
         CalendarError = require(_apiDir + "/CalendarError");
-        mockedWebworks.exec = jasmine.createSpy("webworks.exec");
     });
 
     afterEach(function () {
         delete GLOBAL.window;
+        delete GLOBAL.cordova;
     });
 
     describe("constructor", function () {
@@ -139,25 +146,11 @@ describe("pim.calendar CalendarEvent", function () {
                     "end": end
                 }),
                 onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError"),
-                once = jasmine.createSpy("webworks.event.once").andCallFake(function (service, eventId, callback) {
-                    callback({
-                        result: escape(JSON.stringify({
-                            _success: true,
-                            event: {
-                                "id": "1"
-                            }
-                        }))
-                    });
-                });
-
-            GLOBAL.window.webworks.event.once = once;
+                onSaveError = jasmine.createSpy("onSaveError");
 
             evt.save(onSaveSuccess, onSaveError);
 
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
-            expect(onSaveSuccess).toHaveBeenCalledWith(new CalendarEvent({"id": "1"}));
-            expect(onSaveError).not.toHaveBeenCalled();
+            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
         });
 
         it("calls the error callback if start/end date is missing", function () {
@@ -189,34 +182,6 @@ describe("pim.calendar CalendarEvent", function () {
             expect(onSaveSuccess).not.toHaveBeenCalled();
             expect(onSaveError).toHaveBeenCalledWith({"code": CalendarError.INVALID_ARGUMENT_ERROR});
         });
-
-        it("calls the error callback if success flag is false", function () {
-            var start = new Date("Jan 1, 2014, 12:00"),
-                end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "start": start,
-                    "end": end
-                }),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError"),
-                once = jasmine.createSpy("webworks.event.once").andCallFake(function (service, eventId, callback) {
-                    callback({
-                        result: escape(JSON.stringify({
-                            _success: false,
-                            code: CalendarError.UNKNOWN_ERROR
-                        }))
-                    });
-                });
-
-            GLOBAL.window.webworks.event.once = once;
-
-            evt.save(onSaveSuccess, onSaveError);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
-            expect(onSaveSuccess).not.toHaveBeenCalled();
-            expect(onSaveError).toHaveBeenCalledWith(new CalendarError(CalendarError.UNKNOWN_ERROR));
-        });
-
     });
 
     describe("remove", function () {
@@ -232,23 +197,11 @@ describe("pim.calendar CalendarEvent", function () {
                     }
                 }),
                 onRemoveSuccess = jasmine.createSpy("onRemoveSuccess"),
-                onRemoveError = jasmine.createSpy("onRemoveError"),
-                once = jasmine.createSpy("webworks.event.once").andCallFake(function (service, eventId, callback) {
-                    callback({
-                        result: escape(JSON.stringify({
-                            _success: true,
-                            id : 0
-                        }))
-                    });
-                });
-
-            GLOBAL.window.webworks.event.once = once;
+                onRemoveError = jasmine.createSpy("onRemoveError");
 
             evt.remove(onRemoveSuccess, onRemoveError);
 
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-            expect(onRemoveSuccess).toHaveBeenCalledWith();
-            expect(onRemoveError).not.toHaveBeenCalled();
+            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
         });
 
         it("calls the error callback if event has no id", function () {
diff --git a/test/unit/com.blackberry.pim.calendar/client.js b/test/unit/com.blackberry.pim.calendar/client.js
index b35c36f..083ee4d 100644
--- a/test/unit/com.blackberry.pim.calendar/client.js
+++ b/test/unit/com.blackberry.pim.calendar/client.js
@@ -19,32 +19,47 @@
 var _extDir = __dirname + "/../../../plugin",
     _apiDir = _extDir + "/com.blackberry.pim.calendar",
     _ID = "com.blackberry.pim.calendar",
-    calendar = require(_apiDir + "/www/client"),
-    CalendarFindOptions = calendar.CalendarFindOptions,
-    CalendarEvent = calendar.CalendarEvent,
-    CalendarRepeatRule = calendar.CalendarRepeatRule,
-    CalendarErr = calendar.CalendarError,
-    CalendarFolder = calendar.CalendarFolder,
-    CalendarEventFilter = calendar.CalendarEventFilter,
-    Attendee = calendar.Attendee,
-    mockedWebworks = {
-        exec: jasmine.createSpy("webworks.exec"),
-        event: {
-            once: jasmine.createSpy("webworks.event.once").andCallFake(function (service, eventId, callback) {
-                callback({
-                    result: escape(JSON.stringify({
-                        _success: true,
-                        contacts: []
-                    }))
-                });
-            })
+    calendar,
+    CalendarFindOptions,
+    CalendarEvent,
+    CalendarRepeatRule,
+    CalendarErr,
+    CalendarFolder,
+    CalendarEventFilter,
+    Attendee,
+    mockedExec = jasmine.createSpy("exec").andCallFake(function (success, fail, service, action, args) {
+        if (action === "getCalendarAccounts") {
+            success([
+                {id: 1, name: "account1", enterprise: false},
+                {id: 2, name: "account2", enterprise: true}
+            ]);
+        } else if (action === "getDefaultCalendarAccount") {
+            success({id: 1, name: "account1", enterprise: false});
+        } else if (action === "getCalendarFolders") {
+            success([
+                {id: 1, name: "folder1"},
+                {id: 2, name: "folder2"}
+            ]);
+        } else if (action === "getDefaultCalendarFolder") {
+            success({id: 1, name: "default folder"});
+        } else if (action === "getEvent") {
+            success({id: 1});
         }
-    };
+    });
 
 describe("pim.calendar/client", function () {
     beforeEach(function () {
-        GLOBAL.window = GLOBAL;
-        GLOBAL.window.webworks = mockedWebworks;
+        GLOBAL.cordova = {
+            require: jasmine.createSpy().andReturn(mockedExec)
+        };
+        GLOBAL.window = {
+            parseInt: jasmine.createSpy().andCallFake(function (obj) {
+                return Number(obj);
+            }),
+            isNaN: jasmine.createSpy().andCallFake(function (obj) {
+                return obj === "abc";
+            })
+        };
         calendar = require(_apiDir + "/www/client");
         CalendarFindOptions = calendar.CalendarFindOptions;
         CalendarEvent = calendar.CalendarEvent;
@@ -56,6 +71,7 @@ describe("pim.calendar/client", function () {
     });
 
     afterEach(function () {
+        delete GLOBAL.cordova;
         delete GLOBAL.window;
     });
 
@@ -82,17 +98,6 @@ describe("pim.calendar/client", function () {
     });
 
     describe("Testing getCalendarAccounts", function () {
-        beforeEach(function () {
-            GLOBAL.window.webworks.exec = jasmine.createSpy("webworks.exec").andCallFake(
-                function (success, fail, service, action, args) {
-                    success([
-                        {id: 1, name: "account1", enterprise: false},
-                        {id: 2, name: "account2", enterprise: true}
-                    ]);
-                }
-            );
-        });
-
         it("has method getCalendarAccounts", function () {
             expect(calendar.getCalendarAccounts).toBeDefined();
         });
@@ -116,17 +121,6 @@ describe("pim.calendar/client", function () {
     });
 
     describe("Testing getCalendarFolders", function () {
-        beforeEach(function () {
-            GLOBAL.window.webworks.exec = jasmine.createSpy("webworks.exec").andCallFake(
-                function (success, fail, service, action, args) {
-                    success([
-                        {id: 1, name: "folder1"},
-                        {id: 2, name: "folder2"}
-                    ]);
-                }
-            );
-        });
-
         it("has method getCalendarFolders", function () {
             expect(calendar.getCalendarFolders).toBeDefined();
         });
@@ -138,16 +132,6 @@ describe("pim.calendar/client", function () {
     });
 
     describe("Testing getDefaultCalendarFolder", function () {
-        beforeEach(function () {
-            GLOBAL.window.webworks.exec = jasmine.createSpy("webworks.execSync").andCallFake(
-                function (success, fail, service, action, args) {
-                    success([
-                        {id: 1, name: "default folder"}
-                    ]);
-                }
-            );
-        });
-
         it("has method getDefaultCalendarFolder", function () {
             expect(calendar.getDefaultCalendarFolder).toBeDefined();
         });
@@ -189,7 +173,9 @@ describe("pim.calendar/client", function () {
                     expect(error).toBeDefined();
                 });
             calendar.findEvents(findOptions, onSuccess, onError);
-            expect(window.webworks.exec).toHaveBeenCalled();
+            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "find", {
+                "options": findOptions
+            });
         });
     });
 });
diff --git a/test/unit/com.blackberry.pim.calendar/index.js b/test/unit/com.blackberry.pim.calendar/index.js
index 93da410..4a9b097 100644
--- a/test/unit/com.blackberry.pim.calendar/index.js
+++ b/test/unit/com.blackberry.pim.calendar/index.js
@@ -19,15 +19,26 @@
 var _apiDir = __dirname + "/../../../plugin/com.blackberry.pim.calendar/",
     _libDir = __dirname + "/../../../lib/",
     utils = require(_libDir + "utils"),
-    events = require(_libDir + "event"),
     CalendarFindOptions = require(_apiDir + "CalendarFindOptions"),
-    CalendarEvent = require(_apiDir + "www/CalendarEvent"),
+    CalendarEvent,
     CalendarError = require(_apiDir + "CalendarError"),
     index,
-    mockJnextObjId = 123;
+    mockJnextObjId = 123,
+    mockedPluginResult = {
+        callbackOk: jasmine.createSpy(),
+        callbackError: jasmine.createSpy(),
+        noResult: jasmine.createSpy(),
+        ok: jasmine.createSpy(),
+        error: jasmine.createSpy()
+    },
+    mockedExec = jasmine.createSpy("exec");
 
 describe("pim.calendar/index", function () {
     beforeEach(function () {
+        GLOBAL.cordova = {
+            require: jasmine.createSpy().andReturn(mockedExec)
+        };
+        CalendarEvent = require(_apiDir + "www/CalendarEvent");
         GLOBAL.JNEXT = {
             require: jasmine.createSpy("JNEXT.require").andCallFake(function () {
                 return true;
@@ -76,12 +87,13 @@ describe("pim.calendar/index", function () {
                 }
             }
         };
-        spyOn(events, "trigger");
+        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
         index = require(_apiDir + "index");
     });
 
     afterEach(function () {
         GLOBAL.JNEXT = null;
+        GLOBAL.cordova = null;
         index = null;
     });
 
@@ -99,7 +111,6 @@ describe("pim.calendar/index", function () {
                 detail: CalendarFindOptions.DETAIL_AGENDA
             },
             args = {
-                _eventId: encodeURIComponent(JSON.stringify("abc")),
                 options: encodeURIComponent(JSON.stringify(findOptions))
             };
 
@@ -113,11 +124,10 @@ describe("pim.calendar/index", function () {
 
         args["options"]["sourceTimezone"] = window.qnx.webplatform.device.timezone;
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "find " + JSON.stringify(args));
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
     });
+
     it("find - without correct permission specified", function () {
         var successCb = jasmine.createSpy(),
             failCb = jasmine.createSpy(),
@@ -132,20 +142,12 @@ describe("pim.calendar/index", function () {
         spyOn(utils, "hasPermission").andReturn(false);
 
         index.find(successCb, failCb, {
-            _eventId: encodeURIComponent(JSON.stringify("abc")),
             fields: encodeURIComponent(JSON.stringify(["name"])),
             options: encodeURIComponent(JSON.stringify(findOptions))
         });
 
-        expect(events.trigger).toHaveBeenCalledWith(jasmine.any(String), {
-            "result": escape(JSON.stringify({
-                "_success": false,
-                "code": CalendarError.PERMISSION_DENIED_ERROR
-            }))
-        });
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
 
     it("save - with correct permission specified", function () {
@@ -163,8 +165,6 @@ describe("pim.calendar/index", function () {
             }
         }
 
-        args["_eventId"] = encodeURIComponent(JSON.stringify("abc"));
-
         index.save(successCb, failCb, args);
 
         Object.getOwnPropertyNames(args).forEach(function (key) {
@@ -174,10 +174,8 @@ describe("pim.calendar/index", function () {
         args["sourceTimezone"] = window.qnx.webplatform.device.timezone;
         args["targetTimezone"] = "";
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "save " + JSON.stringify(args));
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
     });
 
     it("save - without correct permission specified", function () {
@@ -200,27 +198,18 @@ describe("pim.calendar/index", function () {
             }
         }
 
-        args["_eventId"] = encodeURIComponent(JSON.stringify("abc"));
-
         index.save(successCb, failCb, args);
 
-        expect(events.trigger).toHaveBeenCalledWith(jasmine.any(String), {
-            "result": escape(JSON.stringify({
-                "_success": false,
-                "code": CalendarError.PERMISSION_DENIED_ERROR
-            }))
-        });
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
+
     it("remove - with correct permission specified", function () {
         var successCb = jasmine.createSpy(),
             failCb = jasmine.createSpy(),
             args = {
                 accountId : encodeURIComponent(JSON.stringify(1)),
                 calEventId : encodeURIComponent(JSON.stringify(2)),
-                _eventId : encodeURIComponent(JSON.stringify("abc")),
                 removeAll : encodeURIComponent(JSON.stringify(true))
             };
 
@@ -234,10 +223,8 @@ describe("pim.calendar/index", function () {
 
         args["sourceTimezone"] = window.qnx.webplatform.device.timezone;
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "remove " + JSON.stringify(args));
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
     });
 
     it("remove - without correct permission specified", function () {
@@ -249,19 +236,11 @@ describe("pim.calendar/index", function () {
         index.remove(successCb, failCb, {
             accountId : encodeURIComponent(JSON.stringify(1)),
             calEventId : encodeURIComponent(JSON.stringify(2)),
-            _eventId : encodeURIComponent(JSON.stringify("abc")),
             removeAll : encodeURIComponent(JSON.stringify(true))
         });
 
-        expect(events.trigger).toHaveBeenCalledWith(jasmine.any(String), {
-            "result": escape(JSON.stringify({
-                "_success": false,
-                "code": CalendarError.PERMISSION_DENIED_ERROR
-            }))
-        });
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
 
     it("getDefaultCalendarAccount - without correct permission specified", function () {
@@ -273,10 +252,8 @@ describe("pim.calendar/index", function () {
 
         index.getDefaultCalendarAccount(successCb, failCb, args);
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalledWith(null);
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
 
     it("getDefaultCalendarAccount - with correct permission specified", function () {
@@ -288,12 +265,10 @@ describe("pim.calendar/index", function () {
 
         index.getDefaultCalendarAccount(successCb, failCb, args);
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getDefaultCalendarAccount");
-        expect(successCb).toHaveBeenCalledWith({
+        expect(mockedPluginResult.ok).toHaveBeenCalledWith({
             id: "1"
-        });
-        expect(failCb).not.toHaveBeenCalled();
+        }, false);
     });
 
     it("getCalendarAccounts - without correct permission specified", function () {
@@ -305,10 +280,8 @@ describe("pim.calendar/index", function () {
 
         index.getCalendarAccounts(successCb, failCb, args);
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalledWith(null);
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
 
     it("getCalendarAccounts - with correct permission specified", function () {
@@ -320,12 +293,10 @@ describe("pim.calendar/index", function () {
 
         index.getCalendarAccounts(successCb, failCb, args);
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getCalendarAccounts");
-        expect(successCb).toHaveBeenCalledWith([{
+        expect(mockedPluginResult.ok).toHaveBeenCalledWith([{
             id: "1"
-        }]);
-        expect(failCb).not.toHaveBeenCalled();
+        }], false);
     });
 
     it("getEvent - without correct permission specified", function () {
@@ -340,10 +311,8 @@ describe("pim.calendar/index", function () {
 
         index.getEvent(successCb, failCb, args);
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(successCb).toHaveBeenCalledWith(null);
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
     });
 
     it("getEvent - with correct permission specified", function () {
@@ -362,12 +331,10 @@ describe("pim.calendar/index", function () {
             args[key] = JSON.parse(decodeURIComponent(args[key]));
         });
 
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getEvent " + JSON.stringify(args));
-        expect(successCb).toHaveBeenCalledWith({
+        expect(mockedPluginResult.ok).toHaveBeenCalledWith({
             id: "123"
-        });
-        expect(failCb).not.toHaveBeenCalled();
+        }, false);
     });
 
     it("getDefaultCalendarFolder  - with correct permission specified", function () {
@@ -377,9 +344,7 @@ describe("pim.calendar/index", function () {
         spyOn(utils, "hasPermission").andReturn(true);
  
         index.getDefaultCalendarFolder(successCb, failCb, {});
-        expect(events.trigger).not.toHaveBeenCalled();
         expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getDefaultCalendarFolder");
-        expect(successCb).toHaveBeenCalled();
-        expect(failCb).not.toHaveBeenCalled();
+        expect(mockedPluginResult.ok).toHaveBeenCalled();
     });
 });
-- 
1.7.10.msysgit.1

