From 651b2352738b6d1e4c8e8e663acdb994d4cf39db Mon Sep 17 00:00:00 2001
From: Marc Lapierre <marc@eternallabs.com>
Date: Wed, 24 Jul 2013 13:02:08 -0400
Subject: [PATCH 12/61] JI:450841 CI:dkerr@qnx.com Adding car.sensors API;
 Updating documentation on all other APIs

---
 .../src/blackberry10/audiomixer.js                 |    4 +-
 .../src/blackberry10/index.js                      |   32 ++--
 plugin/com.qnx.car.audiomixer/www/client.js        |  110 ++++++-------
 plugin/com.qnx.car.hvac/src/blackberry10/hvac.js   |   12 +-
 plugin/com.qnx.car.hvac/src/blackberry10/index.js  |   36 ++---
 plugin/com.qnx.car.hvac/www/client.js              |   18 +--
 plugin/com.qnx.car.sensors/plugin.xml              |   34 ++++
 .../com.qnx.car.sensors/src/blackberry10/index.js  |  109 +++++++++++++
 .../src/blackberry10/sensors.js                    |   73 +++++++++
 plugin/com.qnx.car.sensors/www/Sensor.js           |  119 ++++++++++++++
 plugin/com.qnx.car.sensors/www/client.js           |  165 ++++++++++++++++++++
 11 files changed, 607 insertions(+), 105 deletions(-)
 create mode 100644 plugin/com.qnx.car.sensors/plugin.xml
 create mode 100644 plugin/com.qnx.car.sensors/src/blackberry10/index.js
 create mode 100644 plugin/com.qnx.car.sensors/src/blackberry10/sensors.js
 create mode 100644 plugin/com.qnx.car.sensors/www/Sensor.js
 create mode 100644 plugin/com.qnx.car.sensors/www/client.js

diff --git a/plugin/com.qnx.car.audiomixer/src/blackberry10/audiomixer.js b/plugin/com.qnx.car.audiomixer/src/blackberry10/audiomixer.js
index bfd3b13..23ec6bd 100644
--- a/plugin/com.qnx.car.audiomixer/src/blackberry10/audiomixer.js
+++ b/plugin/com.qnx.car.audiomixer/src/blackberry10/audiomixer.js
@@ -88,7 +88,7 @@ module.exports = {
 	
 	/**
 	 * Sets the trigger function to call when a mixer event is fired
-	 * @param trigger {Function} The trigger function to call when the event is fired
+	 * @param {Function} trigger The trigger function to call when the event is fired
 	 */
 	setTriggerUpdate: function(trigger) {
 		_triggerUpdate = trigger;
@@ -96,7 +96,7 @@ module.exports = {
 	
 	/**
 	 * Return the audio mixer settings for a specific zone
-	 * @param {String} zone (Optional) The Zone to filter the results by
+	 * @param {String} [zone] The Zone to filter the results by
 	 * @returns {Object} The requested settings
 	 */
 	get: function(zone) {
diff --git a/plugin/com.qnx.car.audiomixer/src/blackberry10/index.js b/plugin/com.qnx.car.audiomixer/src/blackberry10/index.js
index d7de04c..39281e8 100644
--- a/plugin/com.qnx.car.audiomixer/src/blackberry10/index.js
+++ b/plugin/com.qnx.car.audiomixer/src/blackberry10/index.js
@@ -47,10 +47,10 @@ init();
 module.exports = {
 	/**
 	 * Returns the current audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	startEvents: function(success, fail, args, env) {
 		_eventResult = new PluginResult(args, env)
@@ -66,10 +66,10 @@ module.exports = {
 
 	/**
 	 * Returns the current audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	stopEvents: function(success, fail, args, env) {
 		var result = new PluginResult(args, env);
@@ -88,10 +88,10 @@ module.exports = {
 
 	/**
 	 * Returns the current audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	get: function(success, fail, args, env) {
 		var result = new PluginResult(args, env)
@@ -106,10 +106,10 @@ module.exports = {
 	
 	/**
 	 * Sets one or more audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	set: function(success, fail, args, env) {
 		var result = new PluginResult(args, env)
diff --git a/plugin/com.qnx.car.audiomixer/www/client.js b/plugin/com.qnx.car.audiomixer/www/client.js
index 23ab921..259436a 100644
--- a/plugin/com.qnx.car.audiomixer/www/client.js
+++ b/plugin/com.qnx.car.audiomixer/www/client.js
@@ -36,12 +36,7 @@ var _self = {},
 	_watches = {};
 
 
-/** 
- * @property AudioMixerSetting An enumeration of audio mixer settings 
- * @example
- * //to refer to the volume setting
- * car.audiomixer.AudioMixerSetting.VOLUME  //returns 'volume'
- */
+// to refer to the audio mixer setting
 _self.AudioMixerSetting = require('./AudioMixerSetting');
 
 
@@ -59,18 +54,20 @@ function onUpdate(data) {
 
 /**
  * Watch for audio mixer changes
- * @param {Function} callback The function to be called when a change is detected
- * @return {Number} An id for the added watch
+ * @param {Function} callback The function to call when a change is detected.
+ * @return {String} An ID for the added watch.
+ * @memberOf module:car.audiomixer 
+ * @method watchAudioMixer
  * @example
  * 
  * //define a callback function
  * function myCallback(audioMixerItems) {
- *	  //iterate through the changed items
- *	  for (var i=0; i<audioMixerItems.length; i++) {
- *		  console.log("audio mixer item setting = " + audioMixerItems[i].setting + '\n' + //a car.audiomixer.AudioMixerSetting value
- *					  "audio mixer item zone = " + audioMixerItems[i].zone + '\n' +	   //a car.Zone value
- *					  "audio mixer item value = " + audioMixerItems[i].value + '\n\n');   //a numeric value
- *	  }
+ *		//iterate through the changed items
+ *		for (var i=0; i&lt;audioMixerItems.length; i++) {
+ *			console.log("audio mixer item setting = " + audioMixerItems[i].setting + '\n' +	//a car.audiomixer.AudioMixerSetting value
+ *						"audio mixer item zone = " + audioMixerItems[i].zone + '\n' +		//a car.Zone value
+ *						"audio mixer item value = " + audioMixerItems[i].value + '\n\n');	//a numeric value
+ *		}
  * }
  * 
  * var watchId = car.audiomixer.watchAudioMixer(myCallback);
@@ -89,7 +86,9 @@ _self.watchAudioMixer = function (callback) {
 
 /**	
  * Stop watching audio mixer changes
- * @param {Number} watchId The watch id returned by car.audiomixer.watchAudioMixer
+ * @param {Number} watchId The watch ID returned by <i>car.audiomixer.watchAudioMixer()</i>.
+ * @memberOf module:car.audiomixer
+ * @method cancelWatch
  * @example
  * 
  * car.audiomixer.cancelWatch(watchId);
@@ -105,37 +104,37 @@ _self.cancelWatch = function (watchId) {
 
 
 /**
- * Return the audio mixer settings for a specific zone
- * If successful, it calls the successCallback with a Zone object for the specific zone.
- * @param {Function} successCallback The callback that is called with the result on success
- * @param {Function} errorCallback (Optional) The callback that is called if there is an error
- * @param {String} zone (Optional) The Zone to filter the results by
- * @see car.Zone
+ * @desc <p>Return the audio mixer settings for a specific zone
+ * <p>If successful, <i>car.audiomixer.get()</i> calls the <i>successCallback</i> function with the <b>car.Zone</b> object for the specific zone.
+ * @param {Function} successCallback The function to call with the result on success.
+ * @param {Function} [errorCallback] The function to call if there is an error.
+ * @param {String} [zone] The zone to filter the results by.
+ * @memberOf module:car.audiomixer
+ * @method get
+ * @see car.Zone 
  * @example 
  *
  * //define your callback function(s)
  * function successCallback(audioMixerItems) {
- *	  //iterate through all the audio mixer items
- *	  for (var i=0; i<audioMixerItems.length; i++) {
- *		  console.log("audio mixer item setting = " + audioMixerItems[i].setting + '\n' + //a car.audiomixer.AudioMixerSetting value
- *					  "audio mixer item zone = " + audioMixerItems[i].zone + '\n' +	   //a car.Zone value
- *					  "audio mixer item value = " + audioMixerItems[i].value);			//a numeric value
- *	  }
+ *		//iterate through all the audio mixer items
+ *		for (var i=0; &lt;i<audioMixerItems.length; i++) {
+ *			console.log("audio mixer item setting = " + audioMixerItems[i].setting + '\n' +	//a car.audiomixer.AudioMixerSetting value
+ *						"audio mixer item zone = " + audioMixerItems[i].zone + '\n' +		//a car.Zone value
+ *						"audio mixer item value = " + audioMixerItems[i].value);			//a numeric value
+ *		}
  * }
  *
  * function errorCallback(error) {
- *	  console.log(error.code, error.msg);
+ *		console.log(error.code, error.msg);
  * }
  *
- * //optional: provide a car.Zone filter to retrieve only values for that zone.
- * //if omitted, settings for all zones will be returned
+ * //Optional: provide a car.Zone filter to retrieve values for only that zone.
+ * //If omitted, settings for all zones will be returned.
  * var zone = car.Zone.FRONT;
  *
  * //call the method
  * car.audiomixer.get(successCallback, errorCallback, zone);
  *
- * NOTE: considerations and being made for allowing an array of zones to be accepted
- *
  *
  * @example REST - single zone
  *
@@ -144,10 +143,10 @@ _self.cancelWatch = function (watchId) {
  *
  * Response:
  * {
- *	  code: 1,
- *	  data: [
- *		  { setting: 'volume', zone: 'all', value: 50 }
- *	  ]
+ *		code: 1,
+ *		data: [
+ * 			{ setting: 'volume', zone: 'all', value: 50 }
+ *		]
  * }
  *
  *
@@ -158,17 +157,17 @@ _self.cancelWatch = function (watchId) {
  *
  * Success Response:
  * {
- *	  code: 1,
- *	  data: [
- *		  { setting: 'volume', zone: 'all', value: 50 },
- *		  { setting: 'bass', zone: 'all', value: 6 },
- *	  ]
+ *		code: 1,
+ *		data: [
+ *			{ setting: 'volume', zone: 'all', value: 50 },
+ *			{ setting: 'bass', zone: 'all', value: 6 },
+ *		]
  * }
  *
  * Error Response:
  * {
- *	  code: -1,
- *	  msg: "An error has occurred"
+ *		code: -1,
+ *		msg: "An error has occurred"
  * }
  */
 _self.get = function(successCallback, errorCallback, zone) {
@@ -181,19 +180,22 @@ _self.get = function(successCallback, errorCallback, zone) {
 
 
 /**
- * Saves an audio mixer setting
- * @param {String} setting A car.audiomixer.AudioMixerSetting value   
- * @param {String} zone A car.Zone value   
- * @param {Number} value The value to save
- * @param {Function} successCallback (Optional) The callback that is called on success
- * @param {Function} errorCallback (Optional) The callback that is called if there is an error
+ * Save an audio mixer setting
+ * @param {String} setting A <b>car.audiomixer.AudioMixerSetting</b> value.  
+ * @param {String} zone A <b>car.Zone</b> value.   
+ * @param {Number} value The value to save.
+ * @param {Function} [successCallback] The function to call on success.
+ * @param {Function} [errorCallback] The function to call if there is an error.
+ * @memberOf module:car.audiomixer
+ * @method set
  * @see car.audiomixer.AudioMixerSetting
  * @see car.Zone  
  *
- * //option 1: set the volume in the entire car to 50 using constants
+ * @example
+ * //option 1: Set the volume in the entire car to 50 using constants.
  * car.audiomixer.set(car.audiomixer.AudioMixerSetting.VOLUME, car.Zone.ALL, 50);
  *
- * //option 2: set the volume in the entire car to 50 without using constants
+ * //option 2: Set the volume in the entire car to 50 without using constants.
  * car.audiomixer.set('volume', 'all', 50);
  *
  *
@@ -204,13 +206,13 @@ _self.get = function(successCallback, errorCallback, zone) {
  *
  * Success Response:
  * {
- *	  code: 1
+ *		code: 1
  * }
  *
  * Error Response:
  * {
- *	  code: -1,
- *	  msg: "An error has occurred"
+ *		code: -1,
+ *		msg: "An error has occurred"
  * }
  */
 _self.set = function(setting, zone, value, successCallback, errorCallback) {
diff --git a/plugin/com.qnx.car.hvac/src/blackberry10/hvac.js b/plugin/com.qnx.car.hvac/src/blackberry10/hvac.js
index 42a7884..1e850e0 100644
--- a/plugin/com.qnx.car.hvac/src/blackberry10/hvac.js
+++ b/plugin/com.qnx.car.hvac/src/blackberry10/hvac.js
@@ -54,7 +54,7 @@ module.exports = {
 	
 	/**
 	 * Sets the trigger function to call when an event is fired
-	 * @param trigger {Function} The trigger function to call when an event is fired
+	 * @param {Function} trigger The trigger function to call when an event is fired
 	 */
 	setTriggerUpdate: function(trigger) {
 		_triggerUpdate = trigger;
@@ -62,8 +62,8 @@ module.exports = {
 	
 	/**
 	 * Returns HVAC settings
-	 * @param settings {Array} A list of car.hvac.HvacSetting values to filter by [optional]
-	 * @param zones {Array} A list of car.zones.Zone values to filter by [optional]
+	 * @param settings {Array} [settings] A list of car.hvac.HvacSetting values to filter by
+	 * @param zones {Array} [zones] A list of car.zones.Zone values to filter by
 	 * @returns {Object} The requested setting values
 	 */
 	get: function(settings, zones) {
@@ -107,9 +107,9 @@ module.exports = {
 	
 	/**
 	 * Sets an HVAC setting
-	 * @param setting {String} The car.hvac.HvacSetting value
-	 * @param zone {String} The car.zones.Zone value
-	 * @param value {Mixed} The value for the specified setting in the specified zone
+	 * @param {String} setting The car.hvac.HvacSetting value
+	 * @param {String} zone The car.Zone value
+	 * @param {Mixed} value The value for the specified setting in the specified zone
 	 */
 	set: function(setting, zone, value) {
 		if (typeof setting 	== 'string' &&
diff --git a/plugin/com.qnx.car.hvac/src/blackberry10/index.js b/plugin/com.qnx.car.hvac/src/blackberry10/index.js
index bccce05..9bea678 100644
--- a/plugin/com.qnx.car.hvac/src/blackberry10/index.js
+++ b/plugin/com.qnx.car.hvac/src/blackberry10/index.js
@@ -47,10 +47,10 @@ init();
 module.exports = {
 	/**
 	 * Returns the current audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	startEvents: function(success, fail, args, env) {
 		_eventResult = new PluginResult(args, env)
@@ -66,10 +66,10 @@ module.exports = {
 
 	/**
 	 * Returns the current audio parameters
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	stopEvents: function(success, fail, args, env) {
 		var result = new PluginResult(args, env);
@@ -88,10 +88,10 @@ module.exports = {
 
 	/**
 	 * Returns HVAC settings
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	get: function(success, fail, args, env) {
 		var result = new PluginResult(args, env)
@@ -104,16 +104,16 @@ module.exports = {
 
 			result.ok(data, false);
 		} catch (e) {
-			result.error(JSON.stringify(e), false)
+			result.error(JSON.stringify(e), false);
 		}
 	},
 	
 	/**
 	 * Sets one or more HVAC settings
-	 * @param success {Function} Function to call if the operation is a success
-	 * @param fail {Function} Function to call if the operation fails
-	 * @param args {Object} The arguments supplied
-	 * @param env {Object} Environment variables
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
 	 */
 	set: function(success, fail, args, env) {
 		var result = new PluginResult(args, env)
@@ -122,7 +122,7 @@ module.exports = {
 			_hvac.set(fixedArgs.setting, fixedArgs.zone, fixedArgs.value);
 			result.ok(undefined, false);
 		} catch (e) {
-			result.error(JSON.stringify(e), false)
+			result.error(JSON.stringify(e), false);
 		}
 	}
 };
diff --git a/plugin/com.qnx.car.hvac/www/client.js b/plugin/com.qnx.car.hvac/www/client.js
index 270ca4b..87394ca 100644
--- a/plugin/com.qnx.car.hvac/www/client.js
+++ b/plugin/com.qnx.car.hvac/www/client.js
@@ -19,7 +19,7 @@
  
 
  /**
- * @module car_xyz_hvac
+ * @module car.hvac
  * @static
  *
  * @description Controls the HVAC system 
@@ -58,8 +58,8 @@ function onUpdate(data) {
 /**
  * Watch for HVAC changes
  * @param {Function} callback The function to call when a change is detected.
- * @return {Number} An ID for the added watch.
- * @memberOf module:car_xyz_hvac
+ * @return {String} An ID for the added watch.
+ * @memberOf module:car.hvac
  * @method watchHvac
  * @example
  * 
@@ -88,8 +88,8 @@ _self.watchHvac = function (callback) {
 
 /**
  * Stop watching HVAC items
- * @param {Number} watchId The watch ID returned by <i>car.hvac.watchHvac()</i>.
- * @memberOf module:car_xyz_hvac
+ * @param {String} watchId The watch ID returned by <i>car.hvac.watchHvac()</i>.
+ * @memberOf module:car.hvac
  * @method cancelWatch
  * @example
  * 
@@ -107,13 +107,13 @@ _self.cancelWatch = function (watchId) {
 
 /**
  * @desc <p>Return HVAC settings for the specified filter
- * <p>If successful, <i>car.hvac.get()</i> calls the <i>successCallback</i> function with an array of setting objects.
- * containing the setting (<b>car.hvac.HvacSetting</b>), the zone (<b>car.Zone</b>) and the value (number/string/boolean).
+ * <p>If successful, <i>car.hvac.get()</i> calls the <i>successCallback</i> function with an array of setting objects
+ * containing the setting (<b>car.hvac.HvacSetting</b>), the zone (<b>car.Zone</b>), and the value (number/string/boolean).
  * @param {Function} successCallback The function to call with the result.
  * @param {Function} [errorCallback] The function to call if there is an error.
  * @param {Array} [settings] An array of <b>car.hvac.HvacSetting</b> values to whitelist.
  * @param {Array} [zones] An array of <b>car.Zone</b> values to whitelist. 
- * @memberOf module:car_xyz_hvac
+ * @memberOf module:car.hvac
  * @method get
  * @see car.hvac.HvacSetting  
  * @see car.Zone
@@ -205,7 +205,7 @@ _self.get = function(successCallback, errorCallback, settings, zones) {
  * @param {Mixed} value The value to save.
  * @param {Function} [successCallback] The function to call with the result.
  * @param {Function} [errorCallback] The function to call if there is an error.
- * @memberOf module:car_xyz_hvac 
+ * @memberOf module:car.hvac 
  * @method set
  * @see car.hvac.HvacSetting
  * @see car.Zone  
diff --git a/plugin/com.qnx.car.sensors/plugin.xml b/plugin/com.qnx.car.sensors/plugin.xml
new file mode 100644
index 0000000..f431102
--- /dev/null
+++ b/plugin/com.qnx.car.sensors/plugin.xml
@@ -0,0 +1,34 @@
+<!--
+Copyright 2013  QNX Software Systems Limited
+
+Licensed under the Apache License, Version 2.0 (the "License"). You
+may not reproduce, modify or distribute this software except in
+compliance with the License. You may obtain a copy of the License
+at: http://www.apache.org/licenses/LICENSE-2.0.
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" basis,
+WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+This file may contain contributions from others, either as
+contributors under the License or as licensors under other terms.
+Please review this entire file for other proprietary rights or license
+notices, as well as the applicable QNX License Guide at
+http://www.qnx.com/legal/licensing/document_archive/current_matrix.pdf
+for other information.
+-->
+<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+	id="com.qnx.car.sensors"
+	version="1.0.0">
+	<js-module src="www/client.js">
+		<clobbers target="car.sensors" />
+	</js-module>
+    <js-module src="www/Sensor.js" />
+
+	<platform name="blackberry10">
+		<source-file src="src/blackberry10/index.js" />
+		<source-file src="src/blackberry10/sensors.js" />
+		<config-file target="www/config.xml" parent="/widget">
+			<feature name="com.qnx.car.sensors" value="com.qnx.car.sensors" />
+		</config-file>
+	</platform>
+</plugin>
diff --git a/plugin/com.qnx.car.sensors/src/blackberry10/index.js b/plugin/com.qnx.car.sensors/src/blackberry10/index.js
new file mode 100644
index 0000000..8906807
--- /dev/null
+++ b/plugin/com.qnx.car.sensors/src/blackberry10/index.js
@@ -0,0 +1,109 @@
+/*
+ * Copyright 2013  QNX Software Systems Limited
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"). You
+ * may not reproduce, modify or distribute this software except in
+ * compliance with the License. You may obtain a copy of the License
+ * at: http://www.apache.org/licenses/LICENSE-2.0.
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+ * This file may contain contributions from others, either as
+ * contributors under the License or as licensors under other terms.
+ * Please review this entire file for other proprietary rights or license
+ * notices, as well as the applicable QNX License Guide at
+ * http://www.qnx.com/legal/licensing/document_archive/current_matrix.pdf
+ * for other information.
+ */
+
+/**
+ * Implementation for car.sensors API
+ *
+ * @author mlapierre
+ * $Id: index.js 4273 2012-09-25 17:51:22Z mlapierre@qnx.com $
+ */
+
+var _wwfix = require("../../lib/wwfix"),
+	_sensors = require("./sensors"),
+	_eventResult;
+
+
+/**
+ * Initializes the extension 
+ */
+function init() {
+	try {
+		_sensors.init();
+	} catch (ex) {
+		console.error('Error in webworks ext: sensors/index.js:init():', ex);
+	}
+}
+init();
+
+/**
+ * Exports are the publicly accessible functions
+ */
+module.exports = {
+	/**
+	 * Returns the current audio parameters
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
+	 */
+	startEvents: function(success, fail, args, env) {
+		_eventResult = new PluginResult(args, env)
+		try {
+			_sensors.setTriggerUpdate(function (data) {
+				_eventResult.callbackOk(data, true);
+			});
+			_eventResult.noResult(true);
+		} catch (e) {
+			_eventResult.error("error in startEvents: " + JSON.stringify(e), false);
+		}
+	},
+
+	/**
+	 * Returns the current audio parameters
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
+	 */
+	stopEvents: function(success, fail, args, env) {
+		var result = new PluginResult(args, env);
+		try {
+			//disable the event trigger
+			_sensors.setTriggerUpdate(null);
+			result.ok(undefined, false);
+
+			//cleanup
+			_eventResult.noResult(false);
+			delete _eventResult;
+		} catch (e) {
+			result.error("error in stopEvents: " + JSON.stringify(e), false);
+		}
+	},
+
+	/**
+	 * Returns the current vehicle sensors
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
+	 */
+	get: function(success, fail, args, env) {
+		var result = new PluginResult(args, env)
+		try {
+			var fixedArgs = _wwfix.parseArgs(args);
+			var data = _sensors.get((fixedArgs.sensors) ? fixedArgs.sensors.split(',') : null);
+
+			result.ok(data, false);
+		} catch (e) {
+			result.error(JSON.stringify(e), false);
+		}
+	},
+};
+
+ 
\ No newline at end of file
diff --git a/plugin/com.qnx.car.sensors/src/blackberry10/sensors.js b/plugin/com.qnx.car.sensors/src/blackberry10/sensors.js
new file mode 100644
index 0000000..f74fe75
--- /dev/null
+++ b/plugin/com.qnx.car.sensors/src/blackberry10/sensors.js
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2013  QNX Software Systems Limited
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"). You
+ * may not reproduce, modify or distribute this software except in
+ * compliance with the License. You may obtain a copy of the License
+ * at: http://www.apache.org/licenses/LICENSE-2.0.
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+ * This file may contain contributions from others, either as
+ * contributors under the License or as licensors under other terms.
+ * Please review this entire file for other proprietary rights or license
+ * notices, as well as the applicable QNX License Guide at
+ * http://www.qnx.com/legal/licensing/document_archive/current_matrix.pdf
+ * for other information.
+ */
+
+ /**
+ * Implementation for car.sensors API
+ *
+ * @author mlapierre
+ * $Id: sensors.js 4273 2012-09-25 17:51:22Z mlapierre@qnx.com $
+ */
+
+var	_pps = qnx.webplatform.pps,
+	_readerPPS,
+	_triggerUpdate;
+
+/**
+ * Exports are the publicly accessible functions
+ */
+module.exports = {
+	
+	/**
+	 * Initializes the extension 
+	 */
+	init: function() {
+		_readerPPS = _pps.createObject("/pps/qnxcar/sensors", _pps.PPSMode.DELTA);
+		_readerPPS.onNewData = function(event) {
+			if (_triggerUpdate && event && event.data) {
+				_triggerUpdate(event.data);
+			}
+		};
+		_readerPPS.open(_pps.FileMode.RDONLY);
+	},
+	
+	/**
+	 * Sets the trigger function to call when an event is fired
+	 * @param {Function} trigger The trigger function to call when an event is fired
+	 */
+	setTriggerUpdate: function(trigger) {
+		_triggerUpdate = trigger;
+	},
+	
+	/**
+	 * Returns the current vehicle sensors
+	 * @param {Array} [sensors] A list of sensors to get
+	 * @returns {Object} The requested vehicle sensors
+	 */
+	get: function(sensors) {
+		if (sensors && sensors.length > 0) {
+			var out = {};
+			for (var i=0; i<sensors.length; i++) {
+				out[sensors[i]] = _readerPPS.data.sensors[sensors[i]];
+			}
+			return out;
+		} else {
+			return _readerPPS.data.sensors;
+		}
+	},
+};
diff --git a/plugin/com.qnx.car.sensors/www/Sensor.js b/plugin/com.qnx.car.sensors/www/Sensor.js
new file mode 100644
index 0000000..27be0f1
--- /dev/null
+++ b/plugin/com.qnx.car.sensors/www/Sensor.js
@@ -0,0 +1,119 @@
+/*
+ * Copyright 2013  QNX Software Systems Limited
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"). You
+ * may not reproduce, modify or distribute this software except in
+ * compliance with the License. You may obtain a copy of the License
+ * at: http://www.apache.org/licenses/LICENSE-2.0.
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+ * This file may contain contributions from others, either as
+ * contributors under the License or as licensors under other terms.
+ * Please review this entire file for other proprietary rights or license
+ * notices, as well as the applicable QNX License Guide at
+ * http://www.qnx.com/legal/licensing/document_archive/current_matrix.pdf
+ * for other information.
+ */
+
+ /**
+ * @static
+ * @author mlapierre
+ * $Id: Event.js 5936 2013-03-25 16:15:21Z lgreenway@qnx.com $
+ */
+
+module.exports = {};
+/**
+ * @memberOf module:car_xyz_sensors
+ * @name Sensor
+ *
+ * @description <p>Sensor type enumeration.
+ * <p>NOTE: This is provided as an example only. This API is intended to be a custom
+ * implementation for each system to access its specific sensor data.
+ *
+ *
+ *  @property {Number}  FUEL_LEVEL Fuel level (0 to 100%).
+ *  @property {Number}  COOLANT_LEVEL Coolant level (0 to 100%).
+ *  @property {Number}  COOLANT_TEMPERATURE Coolant temperature.
+ *  @property {Number}  ENGINE_OIL_PRESSURE Engine oil pressure (&gt;=0 PSI).
+ *  @property {Number}  ENGINE_OIL_LEVEL Engine oil level (0 to 100%).
+ *  @property {Number}  ENGINE_OIL_TEMPERATURE Engine oil temperature.
+ *  @property {Number}  RPM Engine RPM (&gt;=0).
+ *  @property {Number}  SPEED Vehicle speed (&gt;=0).
+
+ *  @property {Number}  BRAKE_FLUID_LEVEL Brake fluid level (0 to 100%). 
+ *  @property {Boolean} BRAKE_ABS_ENABLED ABS brakes (true for on; default is true). 
+ *  @property {Number}  BRAKE_PAD_WEAR_FRONTLEFT Front left brake pad wear (0 to 100%).
+ *  @property {Number}  BRAKE_PAD_WEAR_FRONTRIGHT Front right brake pad wear (0 to 100%). 
+ *  @property {Number}  BRAKE_PAD_WEAR_REARLEFT Rear left brake pad wear (0 to 100%).
+ *  @property {Number}  BRAKE_PAD_WEAR_REARRIGHT Rear right brake pad wear (0 to 100%). 
+ *  @property {Boolean} BRAKE_ABS_FRONTLEFT Front left ABS (true for on; default is true). 
+ *  @property {Boolean} BRAKE_ABS_FRONTRIGHT Front right ABS (true for on; default is true).
+ *  @property {Boolean} BRAKE_ABS_REARLEFT Rear left ABS (true for on; default is true).
+ *  @property {Boolean} BRAKE_ABS_REARRIGHT Rear right ABS (true for on; default is true).
+
+ *  @property {Number}  TIRE_PRESSURE_FRONTLEFT Front left tire pressure (&gt;=0 PSI). 
+ *  @property {Number}  TIRE_PRESSURE_FRONTRIGHT Front right tire pressure (&gt;=0 PSI). 
+ *  @property {Number}  TIRE_PRESSURE_REARLEFT Rear left tire pressure (&gt;=0 PSI). 
+ *  @property {Number}  TIRE_PRESSURE_REARRIGHT Rear right tire pressure (&gt;=0 PSI). 
+ *  @property {Number}  TIRE_WEAR_FRONTLEFT Front left tire wear (0 to 100%). 
+ *  @property {Number}  TIRE_WEAR_FRONTRIGHT Front right tire wear (0 to 100%). 
+ *  @property {Number}  TIRE_WEAR_REARLEFT Rear left tire wear (0 to 100%). 
+ *  @property {Number}  TIRE_WEAR_REARRIGHT Rear right tire wear (0 to 100%). 
+
+ *  @property {Boolean} LIGHT_HEADLIGHT_LEFT Left head light (true for on). 
+ *  @property {Boolean} LIGHT_HEADLIGHT_RIGHT Right head light (true for on). 
+ *  @property {Boolean} LIGHT_TAILLIGHT_LEFT Left tail light (true for on). 
+ *  @property {Boolean} LIGHT_TAILLIGHT_RIGHT Right tail light (true for on). 
+
+ *  @property {Number}  TRANSMISSION_FLUID_LEVEL Transmission fluid level (0 to 100%). 
+ *  @property {Number}  TRANSMISSION_FLUID_TEMPERATURE Transmission fluid temperature (-273.15 to 1000 degrees Fahrenheit). 
+ *  @property {Number}  TRANSMISSION_CLUTCH_WEAR Clutch wear level (0 to 100%). 
+ *  @property {String}  TRANSMISSION_GEAR Transmission gear (One of: p,r,n,d,1,2,3,4,5,6,7,8). 
+ *  @property {Number}  WASHERFLUID_LEVEL Washer fluid level (0 to 100%).
+ */ 
+Object.defineProperties(module.exports,
+{
+	'FUEL_LEVEL':						{ value: 'fuelLevel',						enumerable: true, writable: false },
+	'COOLANT_LEVEL':					{ value: 'coolantLevel',					enumerable: true, writable: false },
+	'COOLANT_TEMPERATURE':				{ value: 'coolantTemperature',				enumerable: true, writable: false },
+	'ENGINE_OIL_PRESSURE':				{ value: 'engineOilPressure',				enumerable: true, writable: false },
+	'ENGINE_OIL_LEVEL':					{ value: 'engineOilLevel',					enumerable: true, writable: false },
+	'ENGINE_OIL_TEMPERATURE':			{ value: 'engineOilTemperature',			enumerable: true, writable: false },
+	'RPM':								{ value: 'rpm',								enumerable: true, writable: false },
+	'SPEED':							{ value: 'speed',							enumerable: true, writable: false },
+
+	'BRAKE_FLUID_LEVEL':				{ value: 'brakeFluidLevel',					enumerable: true, writable: false },
+	'BRAKE_ABS_ENABLED':				{ value: 'brakeAbsEnabled',					enumerable: true, writable: false },
+	'BRAKE_PAD_WEAR_FRONTLEFT':			{ value: 'brakePadWearFrontLeft',			enumerable: true, writable: false },
+	'BRAKE_PAD_WEAR_FRONTRIGHT':		{ value: 'brakePadWearFrontRight',			enumerable: true, writable: false },
+	'BRAKE_PAD_WEAR_REARLEFT':			{ value: 'brakePadWearRearLeft',			enumerable: true, writable: false },
+	'BRAKE_PAD_WEAR_REARRIGHT':			{ value: 'brakePadWearRearRight',			enumerable: true, writable: false },
+	'BRAKE_ABS_FRONTLEFT':				{ value: 'brakeAbsFrontLeft',				enumerable: true, writable: false },
+	'BRAKE_ABS_FRONTRIGHT':				{ value: 'brakeAbsFrontRight',				enumerable: true, writable: false },
+	'BRAKE_ABS_REARLEFT':				{ value: 'brakeAbsRearLeft',				enumerable: true, writable: false },
+	'BRAKE_ABS_REARRIGHT':				{ value: 'brakeAbsRearRight',				enumerable: true, writable: false },
+
+	'TIRE_PRESSURE_FRONTLEFT':			{ value: 'tirePressureFrontLeft',			enumerable: true, writable: false },
+	'TIRE_PRESSURE_FRONTRIGHT':			{ value: 'tirePressureFrontRight',			enumerable: true, writable: false },
+	'TIRE_PRESSURE_REARLEFT':			{ value: 'tirePressureRearLeft',			enumerable: true, writable: false },
+	'TIRE_PRESSURE_REARRIGHT':			{ value: 'tirePressureRearRight',			enumerable: true, writable: false },
+	'TIRE_WEAR_FRONTLEFT':				{ value: 'tireWearFrontLeft',				enumerable: true, writable: false },
+	'TIRE_WEAR_FRONTRIGHT':				{ value: 'tireWearFrontRight',				enumerable: true, writable: false },
+	'TIRE_WEAR_REARLEFT':				{ value: 'tireWearRearLeft',				enumerable: true, writable: false },
+	'TIRE_WEAR_REARRIGHT':				{ value: 'tireWearRearRight',				enumerable: true, writable: false },
+
+	'LIGHT_HEADLIGHT_LEFT':				{ value: 'lightHeadLeft',					enumerable: true, writable: false },
+	'LIGHT_HEADLIGHT_RIGHT':			{ value: 'lightHeadRight',					enumerable: true, writable: false },
+	'LIGHT_TAILLIGHT_LEFT':				{ value: 'lightTailLeft',					enumerable: true, writable: false },
+	'LIGHT_TAILLIGHT_RIGHT':			{ value: 'lightTailRight',					enumerable: true, writable: false },
+
+	'TRANSMISSION_FLUID_LEVEL':			{ value: 'transmissionFluidLevel',			enumerable: true, writable: false },
+	'TRANSMISSION_FLUID_TEMPERATURE':	{ value: 'transmissionFluidTemperature',	enumerable: true, writable: false },
+	'TRANSMISSION_CLUTCH_WEAR':			{ value: 'transmissionClutchWear',			enumerable: true, writable: false },
+	'TRANSMISSION_GEAR':				{ value: 'transmissionGear',				enumerable: true, writable: false },
+
+	'WASHERFLUID_LEVEL':				{ value: 'washerFluidLevel',				enumerable: true, writable: false }
+});
+
diff --git a/plugin/com.qnx.car.sensors/www/client.js b/plugin/com.qnx.car.sensors/www/client.js
new file mode 100644
index 0000000..8244d44
--- /dev/null
+++ b/plugin/com.qnx.car.sensors/www/client.js
@@ -0,0 +1,165 @@
+/*
+ * Copyright 2013  QNX Software Systems Limited
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"). You
+ * may not reproduce, modify or distribute this software except in
+ * compliance with the License. You may obtain a copy of the License
+ * at: http://www.apache.org/licenses/LICENSE-2.0.
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
+ * This file may contain contributions from others, either as
+ * contributors under the License or as licensors under other terms.
+ * Please review this entire file for other proprietary rights or license
+ * notices, as well as the applicable QNX License Guide at
+ * http://www.qnx.com/legal/licensing/document_archive/current_matrix.pdf
+ * for other information.
+ */
+
+/**
+ * @module car.sensors
+ * @static
+ *
+ * @description Provides access to custom automotive sensors.
+ */
+ 
+/* @author mlapierre
+ * $Id: client.js 4326 2012-09-27 17:43:24Z mlapierre@qnx.com $
+ */
+
+var _self = {},
+	_ID = "com.qnx.car.sensors",
+	_utils = cordova.require('cordova/utils'),
+	_watches = {};
+
+
+// Sensor enumeration
+_self.Sensor = require('./Sensor');
+
+
+/**
+ * Handles update events for this extension
+ * @param data {Array} The updated data provided by the event 
+ * @private
+ */
+function onUpdate(data) {
+	var keys = Object.keys(_watches);
+	for (var i=0; i<keys.length; i++) {
+		setTimeout(_watches[keys[i]](data), 0);
+	}
+}
+
+
+/**
+ * Watch for sensor changes
+ * @param {Function} callback The function to call when a change is detected.
+ * @return {String} An ID for the added watch.
+ * @memberOf module:car.sensors
+ * @method watchSensors
+ * @example
+ * 
+ * //define a callback function
+ * function myCallback(sensorData) {
+ *		//iterate through all the sensors
+ 		var sensors = Object.keys(sensorData);
+ *		for (var i=0; i&lt;sensors.length; i++) {
+ *			console.log("sensor name = " + sensors[i] + "; sensor value = " + sensorData[sensors[i]]);
+ *		}
+ * }
+ * 
+ * var watchId = car.sensors.watchSensors(myCallback);
+ */
+_self.watchSensors = function (callback) {
+	var watchId = _utils.createUUID();
+	
+	_watches[watchId] = callback;
+	if (Object.keys(_watches).length === 1) {
+		window.cordova.exec(onUpdate, null, _ID, 'startEvents', null, false);
+	}
+
+	return watchId;
+}
+
+
+/**
+ * Stop watching sensor changes
+ * @param {Number} watchId The watch ID as returned by <i>car.sensors.watchSensors()</i>.
+ * @memberOf module:car.sensors
+ * @method cancelWatch 
+ * @example
+ * 
+ * car.sensors.cancelWatch(watchId);
+ */
+_self.cancelWatch = function (watchId) {
+	if (_watches[watchId]) {
+		delete _watches[watchId];
+		if (Object.keys(_watches).length === 0) {
+			window.cordova.exec(null, null, _ID, 'stopEvents', null, false);
+		}
+	}
+}
+
+/**
+ * @description <p>Return the current vehicle sensors
+ * <p>If successful, the <i>successCallback</i> method is called with an object describing
+ * the available sensors, their location (if applicable), and their values.
+ * @param {Function} successCallback The function to call with the result on success.
+ * @param {Function} [errorCallback] The function to call if there is an error.
+ * @param {Array} [sensors] A list of <b>car.sensor.Sensor</b> values to whitelist.
+ * @memberOf module:car.sensors
+ * @method get 
+ * @example 
+ *
+ * //define your callback function(s)
+ * function successCallback(sensorData) {
+ *		//iterate through all the sensors
+ 		var sensors = Object.keys(sensorData);
+ *		for (var i=0; i&lt;sensors.length; i++) {
+ *			console.log("sensor name = " + sensors[i] + "; sensor value = " + sensorData[sensors[i]]);
+ *		}
+ *
+ *		//get the speed
+ *		if (typeof sensorData[car.sensors.Sensor.SPEED] !== 'undefined') {
+ *			console.log("speed = " + sensorData[car.sensors.Sensor.SPEED]);
+ *		}
+ * }
+ *
+ * function errorCallback(error) {
+ *		console.log(error.code, error.msg);
+ * }
+ *
+ * //optional: define a list of sensors by which to filter
+ * var sensors = [ car.sensors.Sensor.SPEED, car.sensors.Sensor.RPM ];
+ * //NOTE: this is equivalent to doing: var sensors = [ 'speed', 'rpm' ];
+ *
+ * //call the method
+ * car.sensors.get(successCallback, errorCallback, sensors);
+ *
+ *
+ * @example REST - with a filter
+ *
+ * Request:
+ * http://&lt;car-ip&gt;/car/sensors/get?sensors=speed,rpm
+ *
+ * Success Response:
+ * {
+ *		code: 1,
+ *		data: { speed: 50, rpm: 2000 }
+ * }
+ *
+ * Error Response:
+ * {
+ *		code: -1,
+ *		msg: "An error has occurred"
+ * }
+ */
+_self.get = function (successCallback, errorCallback, sensors) {
+	var args = (sensors) ? { sensors: sensors.join(',') } : null;
+	window.cordova.exec(successCallback, errorCallback, _ID, 'get', args, false);
+};
+
+
+// Export
+module.exports = _self;
+
-- 
1.7.10.msysgit.1

