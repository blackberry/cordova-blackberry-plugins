From f9cb42b90bb0cea21aa18eddfed0bbe52d7f238d Mon Sep 17 00:00:00 2001
From: Nik Schultz <nschultz@qnx.com>
Date: Wed, 28 May 2014 16:56:57 -0400
Subject: [PATCH 56/61] JI:662680 CI:mlapierre added the ability to listen to
 an ssl handshake and add an exception

---
 plugin/com.qnx.browser/src/blackberry10/browser.js |   27 +++++++++-
 plugin/com.qnx.browser/src/blackberry10/index.js   |   24 ++++++++-
 plugin/com.qnx.browser/www/client.js               |   56 ++++++++++++++++++++
 3 files changed, 104 insertions(+), 3 deletions(-)

diff --git a/plugin/com.qnx.browser/src/blackberry10/browser.js b/plugin/com.qnx.browser/src/blackberry10/browser.js
index 4c0346b..afdd2a1 100644
--- a/plugin/com.qnx.browser/src/blackberry10/browser.js
+++ b/plugin/com.qnx.browser/src/blackberry10/browser.js
@@ -25,6 +25,7 @@ var _tabList = {},
 	_lastActiveZOrder = 2,
 	_activeZOrder = 3,
 	_chromeZOrder = 4,
+	_UIWebviewZOrder = 5,
 	_lastActiveTabId = null,
 	_activeTabId = null,
 	_x = 0,
@@ -154,6 +155,17 @@ function onWebviewCreated(webview, args) {
 			});
 		}
 	});
+
+	//We bind directly because adding an event listener through addEventListener doens't work for 'SSLHandshakingFailed'
+	webview.onSSLHandshakingFailed = function (e) {
+		if (_tabTrigger.length > 0 && e) {
+			triggerUpdate({
+				certificateInfo: e,
+				type: "SSLHandshakingFailed",
+				webview: webview.id
+			});
+		}
+	};
 	applyDefaultParams(webview, args);
 	_activeTabId = webview.id;
 	webview.visible = true;
@@ -185,7 +197,9 @@ module.exports = {
 				_chromeWebview.zOrder = _chromeZOrder;
 				_chromeWebview.setBackgroundColor(0x00ffffff);
 				_chromeWebview.setGeometry(0, 0, _width, _chromeHeight);
-				break;
+			} else if (webviews[wv].dialog) {
+				//since this is the UI dialog boost the default zOrder otherwise it will be clipped by the UI webview
+				webviews[wv].zOrder = _UIWebviewZOrder;
 			}
 		}
 	},
@@ -346,5 +360,16 @@ module.exports = {
 		} else {
 			console.error("qnx.browser.stop() cannot be called when there are no tabs.");
 		}
+	},
+
+	/**
+	 *	Adds an exception for an SSL certificate that isn't trusted
+	 *	@param tabId {Number} the id of the webview that triggered the sslHandshakeFailure
+	 *	@param streamId {Number} the streamId of the sslHandshakeFailure
+	 *	@param sslAction {String} can be one of the following "SSLActionTrust", "SSLActionReject", "SSLActionNone"
+	 *	
+	 */
+	continueSSLHandshake: function (tabId, streamId, sslAction) {
+		qnx.callExtensionMethod("webview.continueSSLHandshaking", tabId, streamId, sslAction);
 	}
 };
\ No newline at end of file
diff --git a/plugin/com.qnx.browser/src/blackberry10/index.js b/plugin/com.qnx.browser/src/blackberry10/index.js
index 9fe2075..4a2fea1 100644
--- a/plugin/com.qnx.browser/src/blackberry10/index.js
+++ b/plugin/com.qnx.browser/src/blackberry10/index.js
@@ -204,11 +204,9 @@ module.exports = {
 	 */
 	getActiveTab: function (success, fail, args, env) {
 		var result = new PluginResult(args, env),
-			// fixedArgs = null,
 			data = null;
 
 		try {
-			// fixedArgs = _wwfix.parseArgs(args);
 			data = _browser.getActiveTab();
 			result.ok(data, false);
 		} catch (e) {
@@ -292,5 +290,27 @@ module.exports = {
 		} catch (e) {
 			result.error(JSON.stringify(e), false);
 		}
+	},
+
+	/**
+	 * Continues the browser SSL handshake when a certificate isn't trusted
+	 * @param {Function} success Function to call if the operation is a success
+	 * @param {Function} fail Function to call if the operation fails
+	 * @param {Object} args The arguments supplied
+	 * @param {Object} env Environment variables
+	 */
+	continueSSLHandshake: function (success, fail, args, env) {
+		var result = new PluginResult(args, env),
+		fixedArgs = null,
+		data = null;
+
+		try {
+			fixedArgs = _wwfix.parseArgs(args);
+			data = _browser.continueSSLHandshake(fixedArgs.tabId, fixedArgs.streamId, fixedArgs.sslAction);
+				
+			result.ok(data, false);
+		} catch (e) {
+			result.error(JSON.stringify(e), false);
+		}
 	}
 };
\ No newline at end of file
diff --git a/plugin/com.qnx.browser/www/client.js b/plugin/com.qnx.browser/www/client.js
index 38760db..dc9d5f8 100644
--- a/plugin/com.qnx.browser/www/client.js
+++ b/plugin/com.qnx.browser/www/client.js
@@ -460,5 +460,61 @@ module.exports = {
 		} catch (e) {
 			console.error(e);
 		}
+	},
+
+	/**
+	 *	Adds an exception for a certificate that didn't validate
+	 *	@param tabId {Number} the id of the webview that triggered the sslHandshakeFailure
+	 *	@param streamId {Number} the streamId of the sslHandshakeFailure
+	 *	@param sslAction {String} can be one of the following "SSLActionTrust", "SSLActionReject", "SSLActionNone"
+	 *	@memberOf module:car.browser 
+	 *	@method stop
+	 *	@example
+	 *
+	 *	//The values for tabId and streamId will be returned to the callback passed into 'watchTab'
+	 *	// as an event of type 'SSLHandshakeFailure' 
+	 *	var tabId = 4,
+	 *		streamId = 50,
+	 *		sslAction = "SSLActionTrust";
+	 *
+	 *	//define callback functions
+	 *	function success() {
+	 *		console.log("SSLHandshake Success");
+	 *	}
+	 * 
+	 *	function failure(e) {
+	 *		console.error("There was an error continuing the SSLHandshake: ", e);
+	 *	}
+	 *	car.browser.continueSSLHandshake(success, failure, tabId, streamId, sslAction);
+	 */
+	continueSSLHandshake: function (success, fail, tabId, streamId, sslAction) {
+
+		var args = {};
+		if (tabId === undefined || !tabId || tabId < 0) {
+			console.error("qnx.browser.continueSSLHandshake requires a valid tabId, please check your input parameter: ", tabId);
+			return;
+		} else {
+			args.tabId = tabId;
+		}
+
+		if (streamId === undefined || !streamId || streamId < 0) {
+			console.error("qnx.browser.continueSSLHandshake requires a valid streamId, please check your input parameter: ", streamId);
+			return;
+		} else {
+			args.streamId = streamId;
+		}
+
+		if (sslAction !== "SSLActionTrust" && sslAction !== "SSLActionReject" && sslAction !== "SSLActionNone") {
+			console.error("qnx.browser.continueSSLHandshake requires a valid sslAction, please check your input parameter: ", sslAction);
+			return;
+		} else {
+			args.sslAction = sslAction;
+		}
+
+		try {
+			window.cordova.exec(success, fail, _ID, 'continueSSLHandshake', args);
+		} catch (e) {
+			console.error(e);
+		}
 	}
 };
\ No newline at end of file
-- 
1.7.10.msysgit.1

