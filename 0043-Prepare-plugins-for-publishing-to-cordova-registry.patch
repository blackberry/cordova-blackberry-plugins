From cbd0475c60d511e5fd9d9002c2e2d1c5a55391f5 Mon Sep 17 00:00:00 2001
From: Bryan Higgins <bhiggins@blackberry.com>
Date: Tue, 22 Oct 2013 12:12:03 -0400
Subject: [PATCH 43/61] Prepare plugins for publishing to cordova registry

---
 plugin/com.blackberry.app/plugin.xml               |    8 +-
 plugin/com.blackberry.bbm.platform/plugin.xml      |    9 +-
 plugin/com.blackberry.connection/plugin.xml        |    9 +-
 plugin/com.blackberry.identity/plugin.xml          |    7 +-
 plugin/com.blackberry.invoke.card/plugin.xml       |    7 +-
 plugin/com.blackberry.invoke/plugin.xml            |    7 +-
 plugin/com.blackberry.invoked/plugin.xml           |    7 +-
 plugin/com.blackberry.io.filetransfer/plugin.xml   |    9 +-
 plugin/com.blackberry.io/plugin.xml                |    7 +-
 plugin/com.blackberry.jpps/plugin.xml              |    6 +-
 plugin/com.blackberry.notification/plugin.xml      |    7 +-
 plugin/com.blackberry.payment/plugin.xml           |   10 +-
 plugin/com.blackberry.pim.calendar/plugin.xml      |    9 +-
 plugin/com.blackberry.pim.contacts/plugin.xml      |   11 +-
 plugin/com.blackberry.pim.lib/plugin.xml           |   35 +
 .../src/blackberry10/native/Makefile               |    8 +
 .../src/blackberry10/native/arm/Makefile           |    8 +
 .../src/blackberry10/native/arm/so.le-v7/Makefile  |    1 +
 .../src/blackberry10/native/common.mk              |   18 +
 .../src/blackberry10/native/contact_account.cpp    |   74 +
 .../src/blackberry10/native/contact_account.hpp    |   54 +
 .../blackberry10/native/device/libpimcontacts.so   |  Bin 0 -> 170350 bytes
 .../src/blackberry10/native/pim_contacts_js.cpp    |  174 +++
 .../src/blackberry10/native/pim_contacts_js.hpp    |   45 +
 .../src/blackberry10/native/pim_contacts_qt.cpp    | 1614 ++++++++++++++++++++
 .../src/blackberry10/native/pim_contacts_qt.hpp    |  148 ++
 .../native/simulator/libpimcontacts.so             |  Bin 0 -> 265964 bytes
 .../src/blackberry10/native/x86/Makefile           |    8 +
 .../src/blackberry10/native/x86/so/Makefile        |    1 +
 plugin/com.blackberry.push/plugin.xml              |    9 +-
 plugin/com.blackberry.sensors/plugin.xml           |    9 +-
 plugin/com.blackberry.system/plugin.xml            |    9 +-
 plugin/com.blackberry.ui.contextmenu/plugin.xml    |    7 +-
 plugin/com.blackberry.ui.cover/plugin.xml          |    7 +-
 plugin/com.blackberry.ui.dialog/plugin.xml         |    7 +-
 plugin/com.blackberry.ui.toast/plugin.xml          |    7 +-
 plugin/com.blackberry.user.identity/plugin.xml     |    7 +-
 plugin/com.blackberry.utils/plugin.xml             |    7 +-
 .../plugin.xml                                     |   31 -
 .../src/blackberry10/native/Makefile               |    8 -
 .../src/blackberry10/native/arm/Makefile           |    8 -
 .../src/blackberry10/native/arm/so.le-v7/Makefile  |    1 -
 .../src/blackberry10/native/common.mk              |   18 -
 .../src/blackberry10/native/contact_account.cpp    |   74 -
 .../src/blackberry10/native/contact_account.hpp    |   54 -
 .../blackberry10/native/device/libpimcontacts.so   |  Bin 170350 -> 0 bytes
 .../src/blackberry10/native/pim_contacts_js.cpp    |  174 ---
 .../src/blackberry10/native/pim_contacts_js.hpp    |   45 -
 .../src/blackberry10/native/pim_contacts_qt.cpp    | 1614 --------------------
 .../src/blackberry10/native/pim_contacts_qt.hpp    |  148 --
 .../native/simulator/libpimcontacts.so             |  Bin 265964 -> 0 bytes
 .../src/blackberry10/native/x86/Makefile           |    8 -
 .../src/blackberry10/native/x86/so/Makefile        |    1 -
 53 files changed, 2337 insertions(+), 2217 deletions(-)
 create mode 100644 plugin/com.blackberry.pim.lib/plugin.xml
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/Makefile
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/Makefile
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/so.le-v7/Makefile
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/common.mk
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.cpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.hpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/device/libpimcontacts.so
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.cpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.hpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.cpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.hpp
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/simulator/libpimcontacts.so
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/Makefile
 create mode 100644 plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/so/Makefile
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/plugin.xml
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/Makefile
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/Makefile
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/so.le-v7/Makefile
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/common.mk
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.cpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.hpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/device/libpimcontacts.so
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.cpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.hpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.cpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.hpp
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/simulator/libpimcontacts.so
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/Makefile
 delete mode 100644 plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/so/Makefile

diff --git a/plugin/com.blackberry.app/plugin.xml b/plugin/com.blackberry.app/plugin.xml
index 5a1e861..80e7727 100644
--- a/plugin/com.blackberry.app/plugin.xml
+++ b/plugin/com.blackberry.app/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.app"
     version="1.0.0">
+
+    <description>BlackBerry 10 Application APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.app" />
     </js-module>
@@ -29,4 +34,5 @@
             <feature name="com.blackberry.app" value="com.blackberry.app" />
         </config-file>
     </platform>
+
 </plugin>
diff --git a/plugin/com.blackberry.bbm.platform/plugin.xml b/plugin/com.blackberry.bbm.platform/plugin.xml
index 09a8fa1..506f8ae 100644
--- a/plugin/com.blackberry.bbm.platform/plugin.xml
+++ b/plugin/com.blackberry.bbm.platform/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.bbm.platform"
     version="1.0.0">
+
+    <description>BlackBerry 10 BBM Platform APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.bbm.platform" />
     </js-module>
@@ -35,6 +40,6 @@
         <config-file target="www/config.xml" parent="/widget/rim:permissions">
             <rim:permit>bbm_connect</rim:permit>
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.connection/plugin.xml b/plugin/com.blackberry.connection/plugin.xml
index 8eb5e35..69f1ccc 100644
--- a/plugin/com.blackberry.connection/plugin.xml
+++ b/plugin/com.blackberry.connection/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.connection"
     version="1.0.0">
+
+    <description>BlackBerry 10 Connection APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.connection" />
     </js-module>
@@ -28,6 +33,6 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.connection" value="com.blackberry.connection" />
         </config-file>
-        <dependency id="com.blackberry.jpps" url="." subdir="/plugin/com.blackberry.jpps/"/>
+        <dependency id="com.blackberry.jpps"/>
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.identity/plugin.xml b/plugin/com.blackberry.identity/plugin.xml
index 47dfd7e..7e12b86 100644
--- a/plugin/com.blackberry.identity/plugin.xml
+++ b/plugin/com.blackberry.identity/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.identity"
     version="1.0.0">
+
+    <description>BlackBerry 10 Identity APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.identity" />
     </js-module>
diff --git a/plugin/com.blackberry.invoke.card/plugin.xml b/plugin/com.blackberry.invoke.card/plugin.xml
index 5108658..917b3b3 100644
--- a/plugin/com.blackberry.invoke.card/plugin.xml
+++ b/plugin/com.blackberry.invoke.card/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.invoke.card"
     version="1.0.0">
+
+    <description>BlackBerry 10 Invoke Card APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.invoke.card" />
     </js-module>
diff --git a/plugin/com.blackberry.invoke/plugin.xml b/plugin/com.blackberry.invoke/plugin.xml
index 72c5c26..f1258cb 100644
--- a/plugin/com.blackberry.invoke/plugin.xml
+++ b/plugin/com.blackberry.invoke/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.invoke"
     version="1.0.0">
+
+    <description>BlackBerry 10 Invoke APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.invoke" />
     </js-module>
diff --git a/plugin/com.blackberry.invoked/plugin.xml b/plugin/com.blackberry.invoked/plugin.xml
index 85809ab..9c5646d 100644
--- a/plugin/com.blackberry.invoked/plugin.xml
+++ b/plugin/com.blackberry.invoked/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.invoked"
     version="1.0.0">
+
+    <description>BlackBerry 10 Invoked APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.invoked" />
     </js-module>
diff --git a/plugin/com.blackberry.io.filetransfer/plugin.xml b/plugin/com.blackberry.io.filetransfer/plugin.xml
index 26d34eb..e401a31 100644
--- a/plugin/com.blackberry.io.filetransfer/plugin.xml
+++ b/plugin/com.blackberry.io.filetransfer/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.io.filetransfer"
     version="1.0.0">
+
+    <description>BlackBerry 10 File Transfer APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.io.filetransfer" />
     </js-module>
@@ -30,6 +35,6 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.io.filetransfer" value="com.blackberry.io.filetransfer" />
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.io/plugin.xml b/plugin/com.blackberry.io/plugin.xml
index 093baa7..854e333 100644
--- a/plugin/com.blackberry.io/plugin.xml
+++ b/plugin/com.blackberry.io/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.io"
     version="1.0.0">
+
+    <description>BlackBerry 10 I/O APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.io" />
     </js-module>
diff --git a/plugin/com.blackberry.jpps/plugin.xml b/plugin/com.blackberry.jpps/plugin.xml
index dc713cf..1d5632d 100644
--- a/plugin/com.blackberry.jpps/plugin.xml
+++ b/plugin/com.blackberry.jpps/plugin.xml
@@ -16,10 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.jpps"
     version="1.0.0">
 
+    <description>BlackBerry 10 JPPS Library</description>
+    <license>Apache 2.0</license>
+
     <platform name="blackberry10">
         <lib-file src="src/blackberry10/native/device/libjpps.so" arch="device"/>
         <lib-file src="src/blackberry10/native/simulator/libjpps.so" arch="simulator"/>
diff --git a/plugin/com.blackberry.notification/plugin.xml b/plugin/com.blackberry.notification/plugin.xml
index c9547e2..b6167c3 100644
--- a/plugin/com.blackberry.notification/plugin.xml
+++ b/plugin/com.blackberry.notification/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.notification"
     version="1.0.0">
+
+    <description>BlackBerry 10 Notification APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.notification" />
     </js-module>
diff --git a/plugin/com.blackberry.payment/plugin.xml b/plugin/com.blackberry.payment/plugin.xml
index 321b6f3..6fa2158 100644
--- a/plugin/com.blackberry.payment/plugin.xml
+++ b/plugin/com.blackberry.payment/plugin.xml
@@ -16,9 +16,15 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.payment"
     version="1.0.0">
+
+    <description>BlackBerry 10 Payment APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.payment" />
     </js-module>
@@ -30,6 +36,6 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.payment" value="com.blackberry.payment" />
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.pim.calendar/plugin.xml b/plugin/com.blackberry.pim.calendar/plugin.xml
index e73bf01..dc2e6cc 100644
--- a/plugin/com.blackberry.pim.calendar/plugin.xml
+++ b/plugin/com.blackberry.pim.calendar/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.pim.calendar"
     version="1.0.0">
+
+    <description>BlackBerry 10 Calendar APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.pim.calendar" />
     </js-module>
@@ -45,6 +50,6 @@
         <config-file target="www/config.xml" parent="/widget/rim:permissions">
             <rim:permit>access_pimdomain_calendars</rim:permit>
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.pim.contacts/plugin.xml b/plugin/com.blackberry.pim.contacts/plugin.xml
index 09adabe..d017046 100644
--- a/plugin/com.blackberry.pim.contacts/plugin.xml
+++ b/plugin/com.blackberry.pim.contacts/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.pim.contacts"
     version="1.0.0">
+
+    <description>BlackBerry 10 Contacts APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.pim.contacts" />
     </js-module>
@@ -44,8 +49,8 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.pim.contacts" value="com.blackberry.pim.contacts" />
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
-        <dependency id="org.apache.cordova.blackberry10.pimlib" url="." subdir="/plugin/org.apache.cordova.blackberry10.pimlib/"/>
+        <dependency id="com.blackberry.utils" />
+        <dependency id="com.blackberry.pim.lib" />
         <source-file src="src/blackberry10/ContactActivity.js" />
         <source-file src="src/blackberry10/ContactAddress.js" />
         <source-file src="src/blackberry10/ContactError.js" />
diff --git a/plugin/com.blackberry.pim.lib/plugin.xml b/plugin/com.blackberry.pim.lib/plugin.xml
new file mode 100644
index 0000000..c08a3e9
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/plugin.xml
@@ -0,0 +1,35 @@
+
+<!--
+ Licensed to the Apache Software Foundation (ASF) under one
+ or more contributor license agreements.  See the NOTICE file
+ distributed with this work for additional information
+ regarding copyright ownership.  The ASF licenses this file
+ to you under the Apache License, Version 2.0 (the
+ "License"); you may not use this file except in compliance
+ with the License.  You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing,
+ software distributed under the License is distributed on an
+ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ KIND, either express or implied.  See the License for the
+ specific language governing permissions and limitations
+ under the License.
+-->
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
+    id="com.blackberry.pim.lib"
+    version="1.0.0">
+
+    <description>BlackBerry 10 PIM Library</description>
+    <license>Apache 2.0</license>
+
+    <platform name="blackberry10">
+        <lib-file src="src/blackberry10/native/device/libpimcontacts.so" arch="device"></lib-file>
+        <lib-file src="src/blackberry10/native/simulator/libpimcontacts.so" arch="simulator"></lib-file>
+        <config-file target="www/config.xml" parent="/widget">
+            <feature name="com.blackberry.pim.lib"></feature>
+        </config-file>
+    </platform>
+</plugin>
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/Makefile b/plugin/com.blackberry.pim.lib/src/blackberry10/native/Makefile
new file mode 100644
index 0000000..0cc5eae
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/Makefile
@@ -0,0 +1,8 @@
+LIST=CPU
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/Makefile b/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/Makefile
new file mode 100644
index 0000000..0e22650
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/Makefile
@@ -0,0 +1,8 @@
+LIST=VARIANT
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/so.le-v7/Makefile b/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/so.le-v7/Makefile
new file mode 100644
index 0000000..2c76089
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/arm/so.le-v7/Makefile
@@ -0,0 +1 @@
+include ../../common.mk
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/common.mk b/plugin/com.blackberry.pim.lib/src/blackberry10/native/common.mk
new file mode 100644
index 0000000..7bc06fb
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/common.mk
@@ -0,0 +1,18 @@
+ifndef QCONFIG
+QCONFIG=qconfig.mk
+endif
+include $(QCONFIG)
+
+NAME=pimcontacts
+PLUGIN=yes
+UTILS=yes
+
+include ../../../../../../meta.mk
+
+SRCS+=pim_contacts_qt.cpp \
+      pim_contacts_js.cpp \
+      contact_account.cpp
+
+include $(MKFILES_ROOT)/qtargets.mk
+
+LIBS+=bbpim bbcascadespickers QtCore img
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.cpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.cpp
new file mode 100644
index 0000000..3476e70
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.cpp
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <webworks_utils.hpp>
+#include "contact_account.hpp"
+
+ContactAccount& ContactAccount::GetAccountInstance()
+{
+    static ContactAccount ca;
+    return ca;
+}
+
+ContactAccount::ContactAccount()
+{
+    fetchContactAccounts();
+}
+
+ContactAccount::~ContactAccount()
+{}
+
+QList<bb::pim::account::Account> ContactAccount::GetContactAccounts(bool fresh)
+{
+    if (fresh) {
+        fetchContactAccounts();
+    }
+    return _accounts;
+}
+
+bb::pim::account::Account ContactAccount::GetAccount(bb::pim::account::AccountKey id, bool fresh)
+{
+    if (fresh) {
+        fetchContactAccounts();
+    }
+    return _accountMap.value(id);
+}
+
+Json::Value ContactAccount::Account2Json(const bb::pim::account::Account& account)
+{
+    Json::Value jsonAccount;
+    jsonAccount["id"] = webworks::Utils::intToStr(account.id());
+    jsonAccount["name"] = account.displayName().isEmpty() ? account.provider().name().toStdString() : account.displayName().toStdString();
+    jsonAccount["enterprise"] = account.isEnterprise() == 1 ? true : false;
+
+    return jsonAccount;
+}
+
+void ContactAccount::fetchContactAccounts()
+{
+    QList<bb::pim::account::Account> accounts = _accountService.accounts(bb::pim::account::Service::Contacts);
+
+    _accounts.clear();
+    _accountMap.clear();
+    for (QList<bb::pim::account::Account>::const_iterator it = accounts.begin(); it != accounts.end(); ++it) {
+        if ((it->id() != ID_UNIFIED_ACCOUNT) && (it->id() != ID_ENHANCED_ACCOUNT)) {
+            _accounts.append(*it);
+            _accountMap.insert(it->id(), (bb::pim::account::Account)(*it));
+        }
+    }
+}
+
+
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.hpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.hpp
new file mode 100644
index 0000000..3910de8
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/contact_account.hpp
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _CONTACT_ACCOUNT_HPP_
+#define _CONTACT_ACCOUNT_HPP_
+
+#include <bb/pim/account/Account>
+#include <bb/pim/account/AccountService>
+#include <bb/pim/account/Provider>
+
+#include <json/value.h>
+#include <QList>
+#include <QDebug>
+
+class ContactAccount
+{
+public:
+    static ContactAccount& GetAccountInstance();
+
+    // get all available accounts which provide contact service
+    QList<bb::pim::account::Account> GetContactAccounts(bool fresh = false);
+    // get the contact account with the specific id
+    bb::pim::account::Account GetAccount(bb::pim::account::AccountKey id, bool fresh = false);
+    // serialize account to json object
+    static Json::Value Account2Json(const bb::pim::account::Account& account);
+
+private:
+    ContactAccount();
+    ~ContactAccount();
+    explicit ContactAccount(ContactAccount const&);
+    void operator=(ContactAccount const&);
+    // Refresh the accounts list and map
+    void fetchContactAccounts();
+    QMap<bb::pim::account::AccountKey, bb::pim::account::Account> _accountMap;
+    QList<bb::pim::account::Account> _accounts;
+    bb::pim::account::AccountService _accountService;
+    static const int ID_UNIFIED_ACCOUNT = 4;
+    static const int ID_ENHANCED_ACCOUNT = 6;
+};
+
+#endif // end of _CONTACT_ACCOUNT_HPP_
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/device/libpimcontacts.so b/plugin/com.blackberry.pim.lib/src/blackberry10/native/device/libpimcontacts.so
new file mode 100644
index 0000000000000000000000000000000000000000..03efc41d099fb0b6454c2e039b6f7855696d57e6
GIT binary patch
literal 170350
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

literal 0
HcmV?d00001

diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.cpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.cpp
new file mode 100644
index 0000000..4788bd1
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.cpp
@@ -0,0 +1,174 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <json/reader.h>
+#include <json/writer.h>
+#include <string>
+#include "pim_contacts_js.hpp"
+#include "pim_contacts_qt.hpp"
+
+PimContacts::PimContacts(const std::string& id) : m_id(id)
+{
+}
+
+char* onGetObjList()
+{
+    // Return list of classes in the object
+    static char name[] = "PimContacts";
+    return name;
+}
+
+JSExt* onCreateObject(const std::string& className, const std::string& id)
+{
+    // Make sure we are creating the right class
+    if (className != "PimContacts") {
+        return 0;
+    }
+
+    return new PimContacts(id);
+}
+
+std::string PimContacts::InvokeMethod(const std::string& command)
+{
+    unsigned int index = command.find_first_of(" ");
+
+    string strCommand;
+    string jsonObject;
+    Json::Value *obj;
+
+    if (index != std::string::npos) {
+        strCommand = command.substr(0, index);
+        jsonObject = command.substr(index + 1, command.length());
+
+        // Parse the JSON
+        obj = new Json::Value;
+        bool parse = Json::Reader().parse(jsonObject, *obj);
+
+        if (!parse) {
+            return "Cannot parse JSON object";
+        }
+    } else {
+        strCommand = command;
+        obj = NULL;
+    }
+
+    if (strCommand == "find") {
+        startThread(FindThread, obj);
+    } else if (strCommand == "save") {
+        startThread(SaveThread, obj);
+    } else if (strCommand == "remove") {
+        startThread(RemoveThread, obj);
+    } else if (strCommand == "getContact") {
+        std::string result = Json::FastWriter().write(webworks::PimContactsQt().GetContact(*obj));
+        delete obj;
+        return result;
+    } else if (strCommand == "invokePicker") {
+        Json::Value result = webworks::PimContactsQt::InvokePicker(*obj);
+        delete obj;
+
+        std::string event = Json::FastWriter().write(result);
+        NotifyEvent("invokeContactPicker.invokeEventId", event);
+    } else if (strCommand == "getContactAccounts") {
+        return Json::FastWriter().write(webworks::PimContactsQt::GetContactAccounts());
+    }
+
+    return "";
+}
+
+bool PimContacts::CanDelete()
+{
+    return true;
+}
+
+// Notifies JavaScript of an event
+void PimContacts::NotifyEvent(const std::string& eventId, const std::string& event)
+{
+    std::string eventString = m_id + " result ";
+    eventString.append(eventId);
+    eventString.append(" ");
+    eventString.append(event);
+    SendPluginEvent(eventString.c_str(), m_pContext);
+}
+
+bool PimContacts::startThread(ThreadFunc threadFunction, Json::Value *jsonObj) {
+    webworks::PimContactsThreadInfo *thread_info = new webworks::PimContactsThreadInfo;
+    thread_info->parent = this;
+    thread_info->jsonObj = jsonObj;
+    thread_info->eventId = jsonObj->removeMember("_eventId").asString();
+
+    pthread_attr_t thread_attr;
+    pthread_attr_init(&thread_attr);
+    pthread_attr_setdetachstate(&thread_attr, PTHREAD_CREATE_DETACHED);
+
+    pthread_t thread;
+    pthread_create(&thread, &thread_attr, threadFunction, static_cast<void *>(thread_info));
+    pthread_attr_destroy(&thread_attr);
+
+    if (!thread) {
+        return false;
+    }
+
+    return true;
+}
+
+
+// Static functions:
+
+void* PimContacts::FindThread(void *args)
+{
+    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
+
+    webworks::PimContactsQt pim_qt;
+    Json::Value result = pim_qt.Find(*(thread_info->jsonObj));
+    delete thread_info->jsonObj;
+
+    std::string event = Json::FastWriter().write(result);
+    thread_info->parent->NotifyEvent(thread_info->eventId, event);
+    delete thread_info;
+
+    return NULL;
+}
+
+void* PimContacts::SaveThread(void *args)
+{
+    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
+
+    webworks::PimContactsQt pim_qt;
+    Json::Value result = pim_qt.Save(*(thread_info->jsonObj));
+    delete thread_info->jsonObj;
+
+    std::string event = Json::FastWriter().write(result);
+    thread_info->parent->NotifyEvent(thread_info->eventId, event);
+    delete thread_info;
+
+    return NULL;
+}
+
+void* PimContacts::RemoveThread(void *args)
+{
+    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
+
+    webworks::PimContactsQt pim_qt;
+    Json::Value result = pim_qt.DeleteContact(*(thread_info->jsonObj));
+    delete thread_info->jsonObj;
+
+    std::string event = Json::FastWriter().write(result);
+    thread_info->parent->NotifyEvent(thread_info->eventId, event);
+    delete thread_info;
+
+    return NULL;
+}
+
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.hpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.hpp
new file mode 100644
index 0000000..df8bbd7
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_js.hpp
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PIM_CONTACTS_JS_H_
+#define PIM_CONTACTS_JS_H_
+
+#include <json/value.h>
+#include <pthread.h>
+#include <string>
+#include "../common/plugin.h"
+
+typedef void* ThreadFunc(void *args);
+
+class PimContacts : public JSExt
+{
+public:
+    explicit PimContacts(const std::string& id);
+    virtual ~PimContacts() {}
+    virtual std::string InvokeMethod(const std::string& command);
+    virtual bool CanDelete();
+    void NotifyEvent(const std::string& eventId, const std::string& event);
+
+    static void* FindThread(void *args);
+    static void* SaveThread(void *args);
+    static void* RemoveThread(void *args);
+private:
+    bool startThread(ThreadFunc threadFunction, Json::Value *jsonObj);
+
+    std::string m_id;
+};
+
+#endif // PIM_CONTACTS_JS_H_
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.cpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.cpp
new file mode 100644
index 0000000..532d293
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.cpp
@@ -0,0 +1,1614 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <json/value.h>
+#include <json/writer.h>
+#include <stdio.h>
+#include <webworks_utils.hpp>
+#include <bb/cascades/pickers/ContactPicker>
+#include <bb/cascades/pickers/ContactSelectionMode>
+#include <QSet>
+#include <QMap>
+#include <QtAlgorithms>
+#include <string>
+#include <sstream>
+#include <map>
+#include <algorithm>
+#include "pim_contacts_qt.hpp"
+
+namespace webworks {
+
+StringToKindMap PimContactsQt::_attributeKindMap;
+StringToSubKindMap PimContactsQt::_attributeSubKindMap;
+KindToStringMap PimContactsQt::_kindAttributeMap;
+SubKindToStringMap PimContactsQt::_subKindAttributeMap;
+QList<bbpim::SortSpecifier> PimContactsQt::_sortSpecs;
+std::map<bbpim::ContactId, bbpim::Contact> PimContactsQt::_contactSearchMap;
+ContactAccount& PimContactsQt::_contactAccount = ContactAccount::GetAccountInstance();
+
+PimContactsQt::PimContactsQt()
+{
+    static bool mapInit = false;
+
+    if (!mapInit) {
+        createAttributeKindMap();
+        createAttributeSubKindMap();
+        createKindAttributeMap();
+        createSubKindAttributeMap();
+        mapInit = true;
+    }
+}
+
+PimContactsQt::~PimContactsQt()
+{
+}
+
+/****************************************************************
+ * Public Functions
+ ****************************************************************/
+
+Json::Value PimContactsQt::Find(const Json::Value& args)
+{
+    Json::Value returnObj;
+
+    if (!args.isMember("fields") || args["fields"].empty() || !args.isMember("options") || args["options"].isNull()) {
+        returnObj["_success"] = false;
+        returnObj["code"] = INVALID_ARGUMENT_ERROR;
+        return returnObj;
+    }
+
+    QSet<bbpim::ContactId> results;
+    int limit = -1;
+    bool favorite = false;
+    Json::Value includeAccounts = args["options"].get("includeAccounts", Json::nullValue);
+    Json::Value excludeAccounts = args["options"].get("excludeAccounts", Json::nullValue);
+
+    if (args["options"].isMember("favorite") && args["options"]["favorite"].isBool()) {
+        favorite = args["options"]["favorite"].asBool();
+    }
+
+    if (args["options"].isMember("limit") && args["options"]["limit"].isInt()) {
+        limit = args["options"]["limit"].asInt();
+    }
+
+    if (args["options"].isMember("filter") && !args["options"]["filter"].empty()) {
+        results = getPartialSearchResults(args["options"]["filter"], args["fields"], favorite, includeAccounts, excludeAccounts);
+
+        getSortSpecs(args["options"]["sort"]);
+
+        returnObj["_success"] = true;
+        returnObj["contacts"] = assembleSearchResults(results, args["fields"], limit);
+    } else {
+        // if no filters specified, use list filters to get all contacts
+        bbpim::ContactService service;
+        bbpim::ContactListFilters listFilters;
+        QList<bbpim::Contact> results;
+        Json::Value contacts;
+
+        getSortSpecs(args["options"]["sort"]);
+        if (!_sortSpecs.empty()) {
+            listFilters.setSortBy(_sortSpecs);
+        }
+
+        listFilters.setIncludeAttributes(getIncludeAttributesList(args["fields"], &listFilters));
+
+        if (favorite) {
+            listFilters.setIsFavourite(favorite);
+        }
+
+        if (limit != -1) {
+            listFilters.setLimit(limit);
+        }
+
+        getAccountFilters(NULL, &listFilters, includeAccounts, excludeAccounts);
+
+        results = service.contacts(listFilters);
+        for (QList<bbpim::Contact>::const_iterator i = results.constBegin(); i != results.constEnd(); i++) {
+            Json::Value contactItem = populateContact(*i, args["fields"]);
+            contacts.append(contactItem);
+        }
+
+        returnObj["_success"] = true;
+        returnObj["contacts"] = contacts;
+    }
+
+    return returnObj;
+}
+
+Json::Value PimContactsQt::Save(const Json::Value& attributeObj)
+{
+    if (!attributeObj.isMember("id") || attributeObj["id"].isNull()) {
+        return CreateContact(attributeObj);
+    } else if (attributeObj.isMember("id") && attributeObj["id"].isInt()) {
+        int contactId = attributeObj["id"].asInt();
+        bbpim::ContactService service;
+
+        if (contactId > 0) {
+            bbpim::Contact contact = service.contactDetails(contactId);
+
+            if (contact.isValid()) {
+                return EditContact(contact, attributeObj);
+            }
+        } else {
+            bbpim::Contact contact = service.contactDetails(contactId * -1);
+
+            if (contact.isValid()) {
+                return CloneContact(contact, attributeObj);
+            }
+        }
+    }
+
+    Json::Value returnObj;
+    returnObj["_success"] = false;
+    returnObj["code"] = INVALID_ARGUMENT_ERROR;
+    return returnObj;
+}
+
+Json::Value PimContactsQt::CreateContact(const Json::Value& attributeObj)
+{
+    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
+    Json::Value contactFields;
+
+    bbpim::Contact newContact;
+    bbpim::ContactBuilder contactBuilder(newContact.edit());
+
+    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
+        const std::string key = attributeKeys[i];
+        contactFields.append(Json::Value(key));
+        addAttributeKind(contactBuilder, attributeObj[key], key);
+    }
+
+    bbpim::ContactService service;
+    newContact = service.createContact(newContact, attributeObj["isWork"].asBool(), true);
+
+    Json::Value returnObj;
+
+    if (newContact.isValid()) {
+        returnObj = populateContact(newContact, contactFields);
+        returnObj["_success"] = true;
+    } else {
+        returnObj["_success"] = false;
+        returnObj["code"] = UNKNOWN_ERROR;
+    }
+
+    return returnObj;
+}
+
+Json::Value PimContactsQt::DeleteContact(const Json::Value& contactObj)
+{
+    Json::Value returnObj;
+
+    if (contactObj.isMember("contactId") && contactObj["contactId"].isInt()) {
+        bbpim::ContactId contactId = contactObj["contactId"].asInt();
+
+        bbpim::ContactService service;
+        bbpim::Contact contact = service.contactDetails(contactId);
+
+        if (contact.isValid()) {
+            service.deleteContact(contactId);
+            returnObj["_success"] = true;
+            return returnObj;
+        }
+    }
+
+    returnObj["_success"] = false;
+    returnObj["code"] = INVALID_ARGUMENT_ERROR;
+    return returnObj;
+}
+
+Json::Value PimContactsQt::EditContact(bbpim::Contact& contact, const Json::Value& attributeObj)
+{
+    bbpim::ContactBuilder contactBuilder(contact.edit());
+    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
+    Json::Value contactFields;
+
+    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
+        const std::string key = attributeKeys[i];
+        contactFields.append(Json::Value(key));
+        syncAttributeKind(contact, attributeObj[key], key);
+    }
+
+    bbpim::ContactService service;
+    contact = service.updateContact(contact);
+
+    Json::Value returnObj;
+
+    if (contact.isValid()) {
+        returnObj = populateContact(contact, contactFields);
+        returnObj["_success"] = true;
+    } else {
+        returnObj["_success"] = false;
+        returnObj["code"] = UNKNOWN_ERROR;
+    }
+
+    return returnObj;
+}
+
+Json::Value PimContactsQt::CloneContact(bbpim::Contact& contact, const Json::Value& attributeObj)
+{
+    bbpim::ContactService service;
+    bbpim::Contact newContact;
+    bbpim::ContactBuilder contactBuilder(newContact.edit());
+    contactBuilder = contactBuilder.addFromContact(contact);
+    contactBuilder = contactBuilder.setFavorite(contact.isFavourite());
+
+    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
+    Json::Value contactFields;
+
+    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
+        const std::string key = attributeKeys[i];
+        contactFields.append(Json::Value(key));
+        syncAttributeKind(newContact, attributeObj[key], key);
+    }
+
+    newContact = service.createContact(newContact, attributeObj["isWork"].asBool(), true);
+
+    Json::Value returnObj;
+
+    if (newContact.isValid()) {
+        returnObj = populateContact(newContact, contactFields);
+        returnObj["_success"] = true;
+    } else {
+        returnObj["_success"] = false;
+        returnObj["code"] = UNKNOWN_ERROR;
+    }
+
+    return returnObj;
+}
+
+Json::Value PimContactsQt::GetContact(const Json::Value& args)
+{
+    Json::Value returnObj;
+    Json::Value fields;
+    bbpim::ContactService contactService;
+    StringToKindMap::const_iterator it;
+    int loop = 0;
+
+    for (it = _attributeKindMap.begin(); it != _attributeKindMap.end(); ++it) {
+        fields[loop] = it->first;
+        loop++;
+    }
+
+    if (args.isMember("contactId")) {
+        bbpim::Contact contact;
+        bbpim::ContactId contactId = Utils::strToInt(args["contactId"].asString());
+
+        if (contactId == -1) {
+            returnObj["_success"] = false;
+            returnObj["code"] = INVALID_ARGUMENT_ERROR;
+        } else {
+            contact = contactService.contactDetails(contactId);
+            returnObj["_success"] = true;
+            if (contact.isValid()) {
+                returnObj["contact"] = populateContact(contact, fields);
+            }
+        }
+    } else {
+        returnObj["_success"] = false;
+        returnObj["code"] = INVALID_ARGUMENT_ERROR;
+    }
+
+    if (returnObj.empty()) {
+        returnObj["_success"] = false;
+        returnObj["code"] = UNKNOWN_ERROR;
+    }
+
+    return returnObj;
+}
+
+Json::Value PimContactsQt::InvokePicker(const Json::Value& args)
+{
+    bb::cascades::pickers::ContactPicker picker;
+    bb::cascades::pickers::ContactSelectionMode::Type mode;
+    QSet<bbpim::AttributeKind::Type> filters;
+    Json::Value result;
+
+    if (args.isMember("mode")) {
+        switch (args["mode"].asInt()) {
+            case bb::cascades::pickers::ContactSelectionMode::Single:
+                mode = bb::cascades::pickers::ContactSelectionMode::Single;
+                break;
+            case bb::cascades::pickers::ContactSelectionMode::Multiple:
+                mode = bb::cascades::pickers::ContactSelectionMode::Multiple;
+                break;
+            case bb::cascades::pickers::ContactSelectionMode::Attribute:
+                mode = bb::cascades::pickers::ContactSelectionMode::Attribute;
+                break;
+            default:
+                result["_success"] = false;
+                result["code"] = INVALID_ARGUMENT_ERROR;
+                return result;
+        }
+
+        picker.setMode(mode);
+
+        if (args.isMember("fields") && !args["fields"].empty()) {
+            std::string fieldName;
+            StringToKindMap::iterator found;
+
+            if (_attributeKindMap.empty()) {
+                createAttributeKindMap();
+            }
+
+            for (unsigned int i = 0; i < args["fields"].size(); i++) {
+                fieldName = args["fields"][i].asString();
+
+                if ((found = _attributeKindMap.find(fieldName)) != _attributeKindMap.end()) {
+                    filters << found->second;
+                }
+            }
+
+            picker.setKindFilters(filters);
+        }
+
+        // cannot open picker if mode = attribute unless filters are specified
+        if (mode == bb::cascades::pickers::ContactSelectionMode::Attribute && filters.empty()) {
+            result["_success"] = false;
+            result["code"] = INVALID_ARGUMENT_ERROR;
+            return result;
+        }
+
+        if (args.isMember("title") && args["title"].isString()) {
+            picker.setTitle(QString(args["title"].asCString()));
+        }
+
+        if (args.isMember("confirmButtonLabel") && args["confirmButtonLabel"].isString()) {
+            picker.setConfirmButtonLabel(QString(args["confirmButtonLabel"].asCString()));
+        }
+
+        picker.open();
+
+        result["_success"] = true;
+        return result;
+    }
+
+    result["_success"] = false;
+    result["code"] = INVALID_ARGUMENT_ERROR;
+    return result;
+}
+
+Json::Value PimContactsQt::GetContactAccounts()
+{
+    Json::Value retVal;
+
+    retVal["accounts"] = Json::Value();
+    QList<bb::pim::account::Account> accounts = _contactAccount.GetContactAccounts();
+    for (int i = 0; i < accounts.size(); ++i) {
+        retVal["accounts"].append(ContactAccount::Account2Json(accounts[i]));
+    }
+    retVal["_success"] = true;
+    return retVal;
+}
+
+/****************************************************************
+ * Helper functions for Find
+ ****************************************************************/
+
+QList<bbpim::SearchField::Type> PimContactsQt::getSearchFields(const Json::Value& searchFieldsJson)
+{
+    QList<bbpim::SearchField::Type> searchFields;
+
+    switch (searchFieldsJson["fieldName"].asInt()) {
+        case bbpim::SearchField::FirstName:
+            searchFields.append(bbpim::SearchField::FirstName);
+            break;
+        case bbpim::SearchField::LastName:
+            searchFields.append(bbpim::SearchField::LastName);
+            break;
+        case bbpim::SearchField::CompanyName:
+            searchFields.append(bbpim::SearchField::CompanyName);
+            break;
+        case bbpim::SearchField::Phone:
+            searchFields.append(bbpim::SearchField::Phone);
+            break;
+        case bbpim::SearchField::Email:
+            searchFields.append(bbpim::SearchField::Email);
+            break;
+        case bbpim::SearchField::BBMPin:
+            searchFields.append(bbpim::SearchField::BBMPin);
+            break;
+        case bbpim::SearchField::LinkedIn:
+            searchFields.append(bbpim::SearchField::LinkedIn);
+            break;
+        case bbpim::SearchField::Twitter:
+            searchFields.append(bbpim::SearchField::Twitter);
+            break;
+        case bbpim::SearchField::VideoChat:
+            searchFields.append(bbpim::SearchField::VideoChat);
+            break;
+    }
+
+    return searchFields;
+}
+
+void PimContactsQt::getSortSpecs(const Json::Value& sort)
+{
+    _sortSpecs.clear();
+
+    if (sort.isArray()) {
+        for (unsigned int j = 0; j < sort.size(); j++) {
+            bbpim::SortOrder::Type order;
+            bbpim::SortColumn::Type sortField = bbpim::SortColumn::LastName;
+
+            if (sort[j]["desc"].asBool()) {
+                order = bbpim::SortOrder::Descending;
+            } else {
+                order = bbpim::SortOrder::Ascending;
+            }
+
+            switch (sort[j]["fieldName"].asInt()) {
+                case bbpim::SortColumn::FirstName:
+                    sortField = bbpim::SortColumn::FirstName;
+                    break;
+                case bbpim::SortColumn::LastName:
+                    sortField = bbpim::SortColumn::LastName;
+                    break;
+                case bbpim::SortColumn::CompanyName:
+                    sortField = bbpim::SortColumn::CompanyName;
+                    break;
+            }
+
+            _sortSpecs.append(bbpim::SortSpecifier(sortField, order));
+        }
+    }
+}
+
+QSet<bbpim::ContactId> PimContactsQt::getPartialSearchResults(const Json::Value& filter, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
+{
+    QSet<bbpim::ContactId> results;
+
+    _contactSearchMap.clear();
+
+    if (!filter.empty()) {
+        for (unsigned int j = 0; j < filter.size(); j++) {
+            QSet<bbpim::ContactId> currentResults = singleFieldSearch(filter[j], contactFields, favorite, includeAccounts, excludeAccounts);
+
+            if (currentResults.empty()) {
+                // no need to continue, can return right away
+                results = currentResults;
+                break;
+            } else {
+                if (j == 0) {
+                    results = currentResults;
+                } else {
+                    results.intersect(currentResults);
+                }
+            }
+        }
+    }
+
+    return results;
+}
+
+void PimContactsQt::getAccountFilters(bbpim::ContactSearchFilters* searchFilter, bbpim::ContactListFilters* listFilter, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
+{
+    if (!includeAccounts.empty() && includeAccounts.isArray()) {
+        QList<bbpim::AccountId> accountIds;
+
+        for (unsigned int i = 0; i < includeAccounts.size(); i++) {
+            accountIds << Utils::strToInt(includeAccounts[i].asString());
+        }
+
+        if (searchFilter != NULL) {
+            searchFilter->setHasAccounts(accountIds);
+        }
+
+        if (listFilter != NULL) {
+            listFilter->setHasAccounts(accountIds);
+        }
+    }
+
+    if (!excludeAccounts.empty() && excludeAccounts.isArray()) {
+        QList<bbpim::AccountId> accountIds;
+
+        for (unsigned int i = 0; i < excludeAccounts.size(); i++) {
+            accountIds << Utils::strToInt(excludeAccounts[i].asString());
+        }
+
+        if (searchFilter != NULL) {
+            searchFilter->setExcludeAccounts(accountIds);
+        }
+
+        if (listFilter != NULL) {
+            listFilter->setExcludeAccounts(accountIds);
+        }
+    }
+}
+
+QList<bbpim::AttributeKind::Type> PimContactsQt::getIncludeAttributesList(const Json::Value& contactFields, bbpim::ContactListFilters* listFilters)
+{
+    QList<bbpim::AttributeKind::Type> includeFields;
+
+    for (unsigned int i = 0; i < contactFields.size(); i++) {
+        // favorite is always included, no need to include
+        if (contactFields[i].asString() == "favorite") {
+            continue;
+        }
+
+        StringToKindMap::const_iterator kindIter = _attributeKindMap.find(contactFields[i].asString());
+
+        if (kindIter != _attributeKindMap.end()) {
+            // multiple fields can map to the same kind, only add kind to the list if it's not already added
+            if (includeFields.count(kindIter->second) == 0) {
+                includeFields.append(kindIter->second);
+            }
+        } else if (contactFields[i].asString() == "displayName" || contactFields[i].asString() == "nickname") {
+            // special case: displayName and nickname are first-level fields under Contact but only map to AttributeSubKind
+            if (includeFields.count(bbpim::AttributeKind::Name) == 0) {
+                includeFields.append(bbpim::AttributeKind::Name);
+            }
+        } else if (contactFields[i].asString() == "addresses") {
+            if (listFilters != NULL) {
+                listFilters->setIncludePostalAddress(true);
+            }
+        } else if (contactFields[i].asString() == "photos") {
+            if (listFilters != NULL) {
+                listFilters->setIncludePhotos(true);
+            }
+        }
+    }
+
+    return includeFields;
+}
+
+QSet<bbpim::ContactId> PimContactsQt::singleFieldSearch(const Json::Value& searchFieldsJson, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
+{
+    QList<bbpim::SearchField::Type> searchFields = PimContactsQt::getSearchFields(searchFieldsJson);
+    QSet<bbpim::ContactId> contactIds;
+
+    if (!searchFields.empty()) {
+        bbpim::ContactService contactService;
+        bbpim::ContactSearchFilters contactFilter;
+        QList<bbpim::Contact> results;
+
+        contactFilter.setSearchFields(searchFields);
+        contactFilter.setSearchValue(QString(searchFieldsJson["fieldValue"].asString().c_str()));
+
+        if (favorite) {
+            contactFilter.setIsFavourite(favorite);
+        }
+
+        contactFilter.setShowAttributes(true);
+        contactFilter.setIncludeAttributes(getIncludeAttributesList(contactFields));
+
+        getAccountFilters(&contactFilter, NULL, includeAccounts, excludeAccounts);
+
+        results = contactService.searchContacts(contactFilter);
+
+        for (int i = 0; i < results.size(); i++) {
+            contactIds.insert(results[i].id());
+            _contactSearchMap[results[i].id()] = results[i];
+        }
+    }
+
+    return contactIds;
+}
+
+QString PimContactsQt::getSortFieldValue(const bbpim::SortColumn::Type sort_field, const bbpim::Contact& contact)
+{
+    switch (sort_field) {
+        case bbpim::SortColumn::FirstName:
+            return contact.sortFirstName();
+        case bbpim::SortColumn::LastName:
+            return contact.sortLastName();
+        case bbpim::SortColumn::CompanyName:
+            return contact.sortCompanyName();
+    }
+
+    return QString();
+}
+
+bool PimContactsQt::lessThan(const bbpim::Contact& c1, const bbpim::Contact& c2)
+{
+    QList<bbpim::SortSpecifier>::const_iterator i = PimContactsQt::_sortSpecs.constBegin();
+    bbpim::SortSpecifier sortSpec;
+    QString val1, val2;
+
+    do {
+        sortSpec = *i;
+        val1 = PimContactsQt::getSortFieldValue(sortSpec.first, c1);
+        val2 = PimContactsQt::getSortFieldValue(sortSpec.first, c2);
+        ++i;
+    } while (val1 == val2 && i != PimContactsQt::_sortSpecs.constEnd());
+
+    if (sortSpec.second == bbpim::SortOrder::Ascending) {
+        return val1 < val2;
+    } else {
+        return !(val1 < val2);
+    }
+}
+
+Json::Value PimContactsQt::assembleSearchResults(const QSet<bbpim::ContactId>& resultIds, const Json::Value& contactFields, int limit)
+{
+    QMap<bbpim::ContactId, bbpim::Contact> completeResults;
+
+    // put complete contacts in map
+    for (QSet<bbpim::ContactId>::const_iterator i = resultIds.constBegin(); i != resultIds.constEnd(); i++) {
+        completeResults.insertMulti(*i, _contactSearchMap[*i]);
+    }
+
+    // sort results based on sort specs
+    QList<bbpim::Contact> sortedResults = completeResults.values();
+    if (!_sortSpecs.empty()) {
+        qSort(sortedResults.begin(), sortedResults.end(), lessThan);
+    }
+
+    Json::Value contactArray;
+
+    // if limit is -1, returned all available results, otherwise return based on the number passed in find options
+    if (limit == -1) {
+        limit = sortedResults.size();
+    } else {
+        limit = std::min(limit, sortedResults.size());
+    }
+
+    for (int i = 0; i < limit; i++) {
+        Json::Value contactItem = populateContact(sortedResults[i], contactFields);
+        contactArray.append(contactItem);
+    }
+
+    return contactArray;
+}
+
+std::string PimContactsQt::replaceAll(const std::string& s, const std::string& souce, const std::string& target) {
+    size_t start = 0;
+    std::string temp(s);
+    while ((start = temp.find(souce, start)) != std::string::npos) {
+        temp.replace(start, souce.length(), target);
+        start += target.length();
+    }
+    return temp;
+}
+std::string PimContactsQt::replaceString(const std::string& s) {
+    std::string temp = replaceAll(replaceAll(replaceAll(replaceAll(replaceAll(s), "\n", "\\\\n"), "\r", ""), "\t", "\\\\t"), "\"", "\"");
+    return temp;
+}
+
+/****************************************************************
+ * Helper functions shared by Find and Save
+ ****************************************************************/
+
+Json::Value PimContactsQt::populateContact(const bbpim::Contact& contact, const Json::Value& contactFields)
+{
+    Json::Value contactItem;
+
+    for (unsigned int i = 0; i < contactFields.size(); i++) {
+        std::string field = contactFields[i].asString();
+        StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
+
+        if (kindIter != _attributeKindMap.end()) {
+            switch (kindIter->second) {
+                case bbpim::AttributeKind::Name: {
+                    contactItem[field] = Json::Value();
+                    populateField(contact, kindIter->second, contactItem[field], false, false);
+                    break;
+                }
+
+                case bbpim::AttributeKind::OrganizationAffiliation: {
+                    contactItem[field] = Json::Value();
+                    populateOrganizations(contact, contactItem[field]);
+                    break;
+                }
+
+                case bbpim::AttributeKind::Date:
+                case bbpim::AttributeKind::Note:
+                case bbpim::AttributeKind::Sound: {
+                    populateField(contact, kindIter->second, contactItem, false, false);
+                    break;
+                }
+
+                case bbpim::AttributeKind::VideoChat: {
+                    contactItem[field] = Json::Value();
+                    populateField(contact, kindIter->second, contactItem[field], false, true);
+                    break;
+                }
+
+                case bbpim::AttributeKind::Email:
+                case bbpim::AttributeKind::Fax:
+                case bbpim::AttributeKind::Pager:
+                case bbpim::AttributeKind::Phone:
+                case bbpim::AttributeKind::Profile:
+                case bbpim::AttributeKind::Website:
+                case bbpim::AttributeKind::InstantMessaging: {
+                    contactItem[field] = Json::Value();
+                    populateField(contact, kindIter->second, contactItem[field], true, false);
+                    break;
+                }
+
+                // Special cases (treated differently in ContactBuilder):
+                default: {
+                    if (field == "addresses") {
+                        contactItem[field] = Json::Value();
+                        populateAddresses(contact, contactItem[field]);
+                    } else if (field == "photos") {
+                        contactItem[field] = Json::Value();
+                        populatePhotos(contact, contactItem[field]);
+                    } else if (field == "news") {
+                        contactItem[field] = Json::Value();
+                        populateNews(contact, contactItem[field]);
+                    } else if (field == "activities") {
+                        contactItem[field] = Json::Value();
+                        populateActivity(contact, contactItem[field]);
+                    }
+
+                    break;
+                }
+            }
+        } else {
+            if (field == "displayName" || field == "nickname") {
+                populateDisplayNameNickName(contact, contactItem, field);
+            }
+        }
+    }
+
+    contactItem["sourceAccounts"] = Json::Value();
+    // fetch sourceAccounts by sourceSourceIds
+    for (int i = 0; i < contact.sourceAccountIds().size(); ++i) {
+        bb::pim::account::AccountKey id = contact.sourceAccountIds()[i];
+        bb::pim::account::Account account = _contactAccount.GetAccount(id);
+        contactItem["sourceAccounts"].append(ContactAccount::Account2Json(account));
+    }
+
+    contactItem["id"] = Utils::intToStr(contact.id());
+    contactItem["favorite"] = Json::Value(contact.isFavourite()); // always populate favorite
+
+    return contactItem;
+}
+
+void PimContactsQt::populateField(const bbpim::Contact& contact, bbpim::AttributeKind::Type kind, Json::Value& contactItem, bool isContactField, bool isArray)
+{
+    QList<bbpim::ContactAttribute> attrs = contact.filteredAttributes(kind);
+
+    for (int i = 0; i < attrs.size(); i++) {
+        bbpim::ContactAttribute currentAttr = attrs[i];
+
+        // displayName and nickname are populated separately, do not populate within the name object
+        if (currentAttr.subKind() == bbpim::AttributeSubKind::NameDisplayName || currentAttr.subKind() == bbpim::AttributeSubKind::NameNickname) {
+            continue;
+        }
+
+        Json::Value val;
+        SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(currentAttr.subKind());
+
+        // Check note type first
+        if (kind == bbpim::AttributeKind::Note) {
+            std::string note = currentAttr.value().toStdString();
+            note = replaceString(note);
+            contactItem["note"] = Json::Value(note);
+            break;
+        } else if (typeIter != _subKindAttributeMap.end()) {
+            if (isContactField) {
+                val["type"] = Json::Value(typeIter->second);
+
+                std::string value = currentAttr.value().toStdString();
+                value = replaceString(value);
+
+                val["value"] = Json::Value(value);
+                contactItem.append(val);
+            } else {
+                if (isArray) {
+                    std::string value = currentAttr.value().toStdString();
+                    value = replaceString(value);
+
+                    val = Json::Value(value);
+                    contactItem.append(val);
+                } else {
+                    if (kind == bbpim::AttributeKind::Date) {
+                        QString format = "yyyy-MM-dd";
+                        contactItem[typeIter->second] = Json::Value(currentAttr.valueAsDateTime().date().toString(format).toStdString());
+                    } else {
+                        std::string value = currentAttr.value().toStdString();
+                        value = replaceString(value);
+                        contactItem[typeIter->second] = Json::Value(value);
+                    }
+                }
+            }
+        }
+    }
+}
+
+void PimContactsQt::populateDisplayNameNickName(const bbpim::Contact& contact, Json::Value& contactItem, const std::string& field)
+{
+    QList<QList<bbpim::ContactAttribute> > nameGroups = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::Name);
+    bbpim::AttributeSubKind::Type subkind = (field == "displayName" ? bbpim::AttributeSubKind::NameDisplayName : bbpim::AttributeSubKind::NameNickname);
+
+    if (!nameGroups.empty()) {
+        QList<bbpim::ContactAttribute> nameAttrs = nameGroups[0];
+
+        for (int i = 0; i < nameAttrs.size(); i++) {
+            bbpim::ContactAttribute currentAttr = nameAttrs[i];
+
+            if (currentAttr.subKind() == subkind) {
+                std::string value = currentAttr.value().toStdString();
+                value = replaceString(value);
+                contactItem[field] = Json::Value(value);
+                break;
+            }
+        }
+    }
+}
+
+void PimContactsQt::populateAddresses(const bbpim::Contact& contact, Json::Value& contactAddrs)
+{
+    bbpim::ContactService contactService;
+    bbpim::Contact fullContact = contactService.contactDetails(contact.id());
+    QList<bbpim::ContactPostalAddress> addrs = fullContact.postalAddresses();
+
+    for (int i = 0; i < addrs.size(); i++) {
+        bbpim::ContactPostalAddress currentAddr = addrs[i];
+        Json::Value addr;
+
+        SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(currentAddr.subKind());
+
+        if (typeIter != _subKindAttributeMap.end()) {
+            addr["type"] = Json::Value(typeIter->second);
+        }
+
+        addr["streetAddress"] = Json::Value(currentAddr.line1().toStdString());
+        addr["streetOther"] = Json::Value(currentAddr.line2().toStdString());
+        addr["country"] = Json::Value(currentAddr.country().toStdString());
+        addr["locality"] = Json::Value(currentAddr.city().toStdString());
+        addr["postalCode"] = Json::Value(currentAddr.postalCode().toStdString());
+        addr["region"] = Json::Value(currentAddr.region().toStdString());
+
+        contactAddrs.append(addr);
+    }
+}
+
+void PimContactsQt::populateOrganizations(const bbpim::Contact& contact, Json::Value& contactOrgs)
+{
+    QList<QList<bbpim::ContactAttribute> > orgAttrs = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::OrganizationAffiliation);
+
+    for (int i = 0; i < orgAttrs.size(); i++) {
+        QList<bbpim::ContactAttribute> currentOrgAttrs = orgAttrs[i];
+        Json::Value org;
+
+        for (int j = 0; j < currentOrgAttrs.size(); j++) {
+            bbpim::ContactAttribute attr = currentOrgAttrs[j];
+            SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(attr.subKind());
+
+            if (typeIter != _subKindAttributeMap.end()) {
+                std::string value = attr.value().toStdString();
+                value = replaceString(value);
+                org[typeIter->second] = Json::Value(value);
+            }
+        }
+
+        contactOrgs.append(org);
+    }
+}
+
+void PimContactsQt::populatePhotos(const bbpim::Contact& contact, Json::Value& contactPhotos)
+{
+    bbpim::ContactService contactService;
+    bbpim::Contact fullContact = contactService.contactDetails(contact.id());
+    QList<bbpim::ContactPhoto> photos = fullContact.photos();
+    bbpim::ContactPhoto primaryPhoto = fullContact.primaryPhoto();
+
+    for (int i = 0; i < photos.size(); i++) {
+        bbpim::ContactPhoto currentPhoto = photos[i];
+        Json::Value photo;
+
+        photo["originalFilePath"] = Json::Value(currentPhoto.originalPhoto().toStdString());
+        photo["largeFilePath"] = Json::Value(currentPhoto.largePhoto().toStdString());
+        photo["smallFilePath"] = Json::Value(currentPhoto.smallPhoto().toStdString());
+        photo["pref"] = Json::Value((primaryPhoto.id() == currentPhoto.id()));
+
+        contactPhotos.append(photo);
+    }
+}
+
+void PimContactsQt::populateNews(const bbpim::Contact& contact, Json::Value& contactNews)
+{
+    QList<bbpim::ContactNews> newsList = contact.news(5);
+    QList<bbpim::ContactNews>::const_iterator k = newsList.constBegin();
+
+    while (k != newsList.constEnd()) {
+        Json::Value news;
+        Json::Value companies;
+        QString format = "yyyy-MM-dd";
+
+        std::string body = k->body().toStdString();
+        body = replaceString(body);
+        news["body"] = Json::Value(body);
+
+        std::string title = k->title().toStdString();
+        title = replaceString(title);
+        news["title"] = Json::Value(title);
+
+        std::string articleSource = k->articleSource().toStdString();
+        articleSource = replaceString(articleSource);
+        news["articleSource"] = Json::Value(articleSource);
+
+        news["type"] = Json::Value(k->type().toStdString());
+        news["publishedAt"] = Json::Value(QString::number(k->publishedAt().toUTC().toMSecsSinceEpoch()).toStdString());
+        news["uri"] = Json::Value(k->uri().toString().toStdString());
+
+        QStringList companiesList = k->companies();
+        QStringList::const_iterator j = companiesList.constBegin();
+
+        while (j != companiesList.constEnd()) {
+            companies.append(j->toStdString());
+            ++j;
+        }
+
+        news["companies"] = companies;
+
+        contactNews.append(news);
+        ++k;
+    }
+}
+
+void PimContactsQt::populateActivity(const bbpim::Contact& contact, Json::Value& contactActivity)
+{
+    QList<bbpim::ContactActivity> activities = contact.activities();
+    QList<bbpim::ContactActivity>::const_iterator k = activities.constBegin();
+
+    while (k != activities.constEnd()) {
+        Json::Value activity;
+
+        std::string desc = k->description().toStdString();
+        desc = replaceString(desc);
+
+        activity["description"] = Json::Value(desc);
+        activity["direction"] = Json::Value(k->direction());
+        activity["mimeType"] = Json::Value(k->mimeType().toStdString());
+        activity["timestamp"] = Json::Value(QString::number(k->statusTimeStamp().toUTC().toMSecsSinceEpoch()).toStdString());
+
+        contactActivity.append(activity);
+        ++k;
+    }
+}
+
+/****************************************************************
+ * Helper functions for Save
+ ****************************************************************/
+
+void PimContactsQt::addAttributeKind(bbpim::ContactBuilder& contactBuilder, const Json::Value& jsonObj, const std::string& field)
+{
+    StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
+
+    if (kindIter != _attributeKindMap.end()) {
+        switch (kindIter->second) {
+            // Attributes requiring group keys:
+            case bbpim::AttributeKind::Name: {
+                QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj);
+                addConvertedList(contactBuilder, kindIter->second, convertedList, "1");
+                break;
+            }
+            case bbpim::AttributeKind::OrganizationAffiliation: {
+                for (unsigned int i = 0; i < jsonObj.size(); i++) {
+                    std::stringstream groupKeyStream;
+                    groupKeyStream << i + 1;
+
+                    QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
+                    addConvertedList(contactBuilder, kindIter->second, convertedList, groupKeyStream.str());
+                }
+
+                break;
+            }
+
+            // String arrays:
+            case bbpim::AttributeKind::VideoChat: {
+                QList<SubkindValuePair> convertedList = convertStringArray(jsonObj, bbpim::AttributeSubKind::VideoChatBbPlaybook);
+                addConvertedList(contactBuilder, kindIter->second, convertedList);
+                break;
+            }
+
+            // Dates:
+            case bbpim::AttributeKind::Date: {
+                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+                if (subkindIter != _attributeSubKindMap.end()) {
+                    std::string value = jsonObj.asString();
+                    addAttribute(contactBuilder, kindIter->second, subkindIter->second, value);
+                }
+
+                break;
+            }
+
+            // Strings:
+            case bbpim::AttributeKind::Note:
+            case bbpim::AttributeKind::Sound: {
+                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+                if (subkindIter != _attributeSubKindMap.end()) {
+                    QList<SubkindValuePair> convertedList;
+                    std::string value = jsonObj.asString();
+                    convertedList.append(SubkindValuePair(subkindIter->second, value));
+                    addConvertedList(contactBuilder, kindIter->second, convertedList);
+                }
+
+                break;
+            }
+
+            // ContactField attributes:
+            case bbpim::AttributeKind::Phone:
+            case bbpim::AttributeKind::Email:
+            case bbpim::AttributeKind::Fax:
+            case bbpim::AttributeKind::Pager:
+            case bbpim::AttributeKind::InstantMessaging:
+            case bbpim::AttributeKind::Website:
+            case bbpim::AttributeKind::Group:
+            case bbpim::AttributeKind::Profile: {
+                QList<SubkindValuePair> convertedList = convertFieldAttributes(jsonObj);
+                addConvertedList(contactBuilder, kindIter->second, convertedList);
+                break;
+            }
+
+            // Special cases (treated differently in ContactBuilder):
+            default: {
+                if (field == "addresses") {
+                    for (unsigned int i = 0; i < jsonObj.size(); i++) {
+                        Json::Value addressObj = jsonObj[i];
+                        addPostalAddress(contactBuilder, addressObj);
+                    }
+                } else if (field == "photos") {
+                    for (unsigned int i = 0; i < jsonObj.size(); i++) {
+                        Json::Value photoObj = jsonObj[i];
+                        addPhoto(contactBuilder, photoObj);
+                    }
+                } else if (field == "favorite") {
+                    bool isFavorite = jsonObj.asBool();
+                    contactBuilder = contactBuilder.setFavorite(isFavorite);
+                }
+
+                break;
+            }
+        }
+    } else if (field == "displayName" || field == "nickname") {
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            addAttribute(contactBuilder, bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
+        }
+    }
+}
+
+void PimContactsQt::syncAttributeKind(bbpim::Contact& contact, const Json::Value& jsonObj, const std::string& field)
+{
+    StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
+    bbpim::ContactBuilder contactBuilder(contact.edit());
+
+    if (kindIter != _attributeKindMap.end()) {
+        switch (kindIter->second) {
+            // Attributes requiring group keys:
+            case bbpim::AttributeKind::Name: {
+                QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(kindIter->second);
+                QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj);
+
+                if (!savedList.empty()) {
+                    syncConvertedList(contactBuilder, kindIter->second, savedList[0], convertedList, "1");
+                } else {
+                    addConvertedList(contactBuilder, kindIter->second, convertedList, "1");
+                }
+
+                break;
+            }
+            case bbpim::AttributeKind::OrganizationAffiliation: {
+                QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(kindIter->second);
+                syncAttributeGroup(contactBuilder, kindIter->second, savedList, jsonObj);
+                break;
+            }
+
+            // String arrays:
+            case bbpim::AttributeKind::VideoChat: {
+                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
+                QList<SubkindValuePair> convertedList = convertStringArray(jsonObj, bbpim::AttributeSubKind::VideoChatBbPlaybook);
+                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
+                break;
+            }
+
+            // Dates:
+            case bbpim::AttributeKind::Date: {
+                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+                if (subkindIter != _attributeSubKindMap.end()) {
+                    QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
+                    syncAttribute(contactBuilder, savedList, kindIter->second, subkindIter->second, jsonObj.asString());
+                }
+
+                break;
+            }
+
+            // Strings:
+            case bbpim::AttributeKind::Note:
+            case bbpim::AttributeKind::Sound: {
+                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
+                QList<SubkindValuePair> convertedList;
+                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+                if (subkindIter != _attributeSubKindMap.end()) {
+                    std::string value = jsonObj.asString();
+                    convertedList.append(SubkindValuePair(subkindIter->second, value));
+                }
+
+                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
+                break;
+            }
+
+            // ContactField attributes:
+            case bbpim::AttributeKind::Phone:
+            case bbpim::AttributeKind::Email:
+            case bbpim::AttributeKind::Fax:
+            case bbpim::AttributeKind::Pager:
+            case bbpim::AttributeKind::InstantMessaging:
+            case bbpim::AttributeKind::Website:
+            case bbpim::AttributeKind::Group:
+            case bbpim::AttributeKind::Profile: {
+                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
+                QList<SubkindValuePair> convertedList = convertFieldAttributes(jsonObj);
+                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
+                break;
+            }
+
+            // Special cases (treated differently in ContactBuilder):
+            default: {
+                if (field == "addresses") {
+                    QList<bbpim::ContactPostalAddress> savedList = contact.postalAddresses();
+                    syncPostalAddresses(contactBuilder, savedList, jsonObj);
+                } else if (field == "photos") {
+                    QList<bbpim::ContactPhoto> savedList = contact.photos();
+                    syncPhotos(contactBuilder, savedList, jsonObj, contact.primaryPhoto());
+
+                } else if (field == "favorite") {
+                    bool isFavorite = jsonObj.asBool();
+                    contactBuilder.setFavorite(isFavorite);
+                }
+
+                break;
+            }
+        }
+    } else if (field == "displayName" || field == "nickname") {
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::Name);
+
+            if (!savedList.empty()) {
+                syncAttribute(contactBuilder, savedList[0], bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
+            } else {
+                addAttribute(contactBuilder, bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
+            }
+        }
+    }
+}
+
+
+QList<SubkindValuePair> PimContactsQt::convertGroupedAttributes(const Json::Value& fieldsObj)
+{
+    const Json::Value::Members fields = fieldsObj.getMemberNames();
+    QList<SubkindValuePair> convertedList;
+
+    for (unsigned int i = 0; i < fields.size(); i++) {
+        const std::string fieldKey = fields[i];
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(fieldKey);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            convertedList.append(SubkindValuePair(subkindIter->second, fieldsObj[fieldKey].asString()));
+        }
+    }
+
+    return convertedList;
+}
+
+QList<SubkindValuePair> PimContactsQt::convertFieldAttributes(const Json::Value& fieldArray)
+{
+    QList<SubkindValuePair> convertedList;
+
+    for (unsigned int i = 0; i < fieldArray.size(); i++) {
+        Json::Value fieldObj = fieldArray[i];
+        std::string type = fieldObj.get("type", "").asString();
+        std::string value = fieldObj.get("value", "").asString();
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(type);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            convertedList.append(SubkindValuePair(subkindIter->second, value));
+        }
+    }
+
+    return convertedList;
+}
+
+QList<SubkindValuePair> PimContactsQt::convertStringArray(const Json::Value& stringArray, bbpim::AttributeSubKind::Type subkind)
+{
+    QList<SubkindValuePair> convertedList;
+
+    for (unsigned int i = 0; i < stringArray.size(); i++) {
+        std::string value = stringArray[i].asString();
+        convertedList.append(SubkindValuePair(subkind, value));
+    }
+
+    return convertedList;
+}
+
+void PimContactsQt::addConvertedList(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const QList<SubkindValuePair>& convertedList, const std::string& groupKey)
+{
+    for (int i = 0; i < convertedList.size(); i++) {
+        addAttribute(contactBuilder, kind, convertedList[i].first, convertedList[i].second, groupKey);
+    }
+}
+
+void PimContactsQt::addAttribute(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey)
+{
+    bbpim::ContactAttribute attribute;
+    bbpim::ContactAttributeBuilder attributeBuilder(attribute.edit());
+
+    attributeBuilder = attributeBuilder.setKind(kind);
+    attributeBuilder = attributeBuilder.setSubKind(subkind);
+
+    if (kind == bbpim::AttributeKind::Date) {
+        QDateTime date = QDateTime::fromString(QString(value.c_str()), QString("ddd MMM dd yyyy"));
+
+        if (date.isValid()) {
+            attributeBuilder = attributeBuilder.setValue(date);
+        } else {
+            attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
+        }
+    } else {
+        attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
+    }
+
+    if (!groupKey.empty()) {
+        attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
+    }
+
+    contactBuilder.addAttribute(attribute);
+}
+
+void PimContactsQt::addPostalAddress(bbpim::ContactBuilder& contactBuilder, const Json::Value& addressObj)
+{
+    bbpim::ContactPostalAddress address;
+    bbpim::ContactPostalAddressBuilder addressBuilder(address.edit());
+
+    if (addressObj.isMember("type")) {
+        std::string value = addressObj["type"].asString();
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(value);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            addressBuilder = addressBuilder.setSubKind(subkindIter->second);
+        }
+    }
+
+    addressBuilder = addressBuilder.setLine1(QString(addressObj.get("streetAddress", "").asCString()));
+    addressBuilder = addressBuilder.setLine2(QString(addressObj.get("streetOther", "").asCString()));
+    addressBuilder = addressBuilder.setCity(QString(addressObj.get("locality", "").asCString()));
+    addressBuilder = addressBuilder.setRegion(QString(addressObj.get("region", "").asCString()));
+    addressBuilder = addressBuilder.setCountry(QString(addressObj.get("country", "").asCString()));
+    addressBuilder = addressBuilder.setPostalCode(QString(addressObj.get("postalCode", "").asCString()));
+
+    contactBuilder = contactBuilder.addPostalAddress(address);
+}
+
+void PimContactsQt::addPhoto(bbpim::ContactBuilder& contactBuilder, const Json::Value& photoObj)
+{
+    bbpim::ContactPhoto photo;
+    bbpim::ContactPhotoBuilder photoBuilder(photo.edit());
+
+    std::string filepath = photoObj.get("originalFilePath", "").asString();
+    bool pref = photoObj.get("pref", false).asBool();
+
+    photoBuilder.setOriginalPhoto(QString(filepath.c_str()));
+    photoBuilder.setPrimaryPhoto(pref);
+
+    contactBuilder = contactBuilder.addPhoto(photo, pref);
+}
+
+void PimContactsQt::syncConvertedList(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<bbpim::ContactAttribute>& savedList, const QList<SubkindValuePair>& convertedList, const std::string& groupKey)
+{
+    int index;
+
+    for (index = 0; index < savedList.size() && index < convertedList.size(); index++) {
+        // Do not overwrite display name or nickname when syncing name
+        if (kind == bbpim::AttributeKind::Name &&
+            (savedList[index].subKind() == bbpim::AttributeSubKind::NameNickname ||
+             savedList[index].subKind() == bbpim::AttributeSubKind::NameDisplayName)) {
+            addAttribute(contactBuilder, kind, convertedList[index].first, convertedList[index].second, groupKey);
+        } else {
+            bbpim::ContactAttributeBuilder attributeBuilder(savedList[index].edit());
+            attributeBuilder = attributeBuilder.setSubKind(convertedList[index].first);
+            attributeBuilder = attributeBuilder.setValue(QString(convertedList[index].second.c_str()));
+
+            if (!groupKey.empty()) {
+                attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
+            }
+        }
+    }
+
+    if (index < savedList.size()) {
+        for (; index < savedList.size(); index++) {
+            // Do not delete display name or nickname when syncing name
+            if (savedList[index].subKind() != bbpim::AttributeSubKind::NameNickname &&
+                savedList[index].subKind() != bbpim::AttributeSubKind::NameDisplayName) {
+                contactBuilder = contactBuilder.deleteAttribute(savedList[index]);
+            }
+        }
+    } else if (index < convertedList.size()) {
+        for (; index < convertedList.size(); index++) {
+            QList<SubkindValuePair> remainingList = convertedList.mid(index);
+            addConvertedList(contactBuilder, kind, remainingList, groupKey);
+        }
+    }
+}
+
+void PimContactsQt::syncAttributeGroup(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<QList<bbpim::ContactAttribute> > savedList, const Json::Value& jsonObj)
+{
+    int i;
+
+    for (i = 0; i < static_cast<int>(jsonObj.size()) && i < savedList.size(); i++) {
+        std::stringstream groupKeyStream;
+        groupKeyStream << i + 1;
+
+        QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
+        syncConvertedList(contactBuilder, kind, savedList[i], convertedList, groupKeyStream.str());
+    }
+
+    if (i < savedList.size()) {
+        for (; i < savedList.size(); i++) {
+            for (int j = 0; j < savedList[i].size(); j++) {
+                contactBuilder = contactBuilder.deleteAttribute(savedList[i][j]);
+            }
+        }
+    } else if (i < static_cast<int>(jsonObj.size())) {
+        for (; i < static_cast<int>(jsonObj.size()); i++) {
+            std::stringstream groupKeyStream;
+            groupKeyStream << i + 1;
+
+            QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
+            addConvertedList(contactBuilder, kind, convertedList, groupKeyStream.str());
+        }
+    }
+}
+
+void PimContactsQt::syncAttribute(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactAttribute>& savedList, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey)
+{
+    bool found = false;
+
+    for (int i = 0; i < savedList.size() && !found; i++) {
+        if (savedList[i].subKind() == subkind) {
+            bbpim::ContactAttributeBuilder attributeBuilder(savedList[i].edit());
+
+            if (kind == bbpim::AttributeKind::Date) {
+                QDateTime date = QDateTime::fromString(QString(value.c_str()), QString("ddd MMM dd yyyy"));
+
+                if (date.isValid()) {
+                    attributeBuilder = attributeBuilder.setValue(date);
+                } else {
+                    attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
+                }
+            } else {
+                attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
+
+                if (!groupKey.empty()) {
+                    attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
+                }
+            }
+
+            found = true;
+        }
+    }
+
+    if (!found) {
+        addAttribute(contactBuilder, kind, subkind, value, groupKey);
+    }
+}
+
+void PimContactsQt::syncPostalAddresses(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPostalAddress>& savedList, const Json::Value& jsonObj)
+{
+    int i;
+
+    for (i = 0; i < savedList.size() && i < static_cast<int>(jsonObj.size()); i++) {
+        Json::Value addressObj = jsonObj[i];
+        bbpim::ContactPostalAddressBuilder addressBuilder(savedList[i].edit());
+
+        std::string type = addressObj.get("type", "other").asString();
+        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(type);
+
+        if (subkindIter != _attributeSubKindMap.end()) {
+            addressBuilder = addressBuilder.setSubKind(subkindIter->second);
+        }
+
+        addressBuilder = addressBuilder.setLine1(QString(addressObj.get("streetAddress", "").asCString()));
+        addressBuilder = addressBuilder.setLine2(QString(addressObj.get("streetOther", "").asCString()));
+        addressBuilder = addressBuilder.setCity(QString(addressObj.get("locality", "").asCString()));
+        addressBuilder = addressBuilder.setRegion(QString(addressObj.get("region", "").asCString()));
+        addressBuilder = addressBuilder.setCountry(QString(addressObj.get("country", "").asCString()));
+        addressBuilder = addressBuilder.setPostalCode(QString(addressObj.get("postalCode", "").asCString()));
+    }
+
+    if (i < savedList.size()) {
+        for (; i < savedList.size(); i++) {
+            contactBuilder = contactBuilder.deletePostalAddress(savedList[i]);
+        }
+    } else if (i < static_cast<int>(jsonObj.size())) {
+        for (; i < static_cast<int>(jsonObj.size()); i++) {
+            addPostalAddress(contactBuilder, jsonObj[i]);
+        }
+    }
+}
+
+void PimContactsQt::syncPhotos(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPhoto>& savedList, const Json::Value& jsonObj, const bbpim::ContactPhoto& primaryPhoto)
+{
+    int i;
+
+    // We must do the delete first, because there seems to be a problem if we do it after
+    if (savedList.size() > static_cast<int>(jsonObj.size())) {
+        for (i = jsonObj.size(); i < savedList.size(); i++) {
+            contactBuilder = contactBuilder.deletePhoto(savedList[i]);
+        }
+    }
+
+    for (i = 0; i < savedList.size() && i < static_cast<int>(jsonObj.size()); i++) {
+        std::string filepath = jsonObj[i].get("originalFilePath", "").asString();
+        bool pref = jsonObj[i].get("pref", false).asBool();
+
+        if (filepath != savedList[i].originalPhoto().toStdString()) {
+            contactBuilder = contactBuilder.deletePhoto(savedList[i]);
+            addPhoto(contactBuilder, jsonObj[i]);
+        } else if (pref != (primaryPhoto.id() == savedList[i].id())) {
+            bbpim::ContactPhotoBuilder photoBuilder = savedList[i].edit();
+            photoBuilder.setPrimaryPhoto(pref);
+        }
+    }
+
+    if (i < static_cast<int>(jsonObj.size())) {
+        for (; i < static_cast<int>(jsonObj.size()); i++) {
+            addPhoto(contactBuilder, jsonObj[i]);
+        }
+    }
+}
+
+/****************************************************************
+ * Mapping functions
+ ****************************************************************/
+
+void PimContactsQt::createAttributeKindMap()
+{
+    _attributeKindMap["phoneNumbers"] = bbpim::AttributeKind::Phone;
+    _attributeKindMap["faxNumbers"] = bbpim::AttributeKind::Fax;
+    _attributeKindMap["pagerNumbers"] = bbpim::AttributeKind::Pager;
+    _attributeKindMap["emails"] = bbpim::AttributeKind::Email;
+    _attributeKindMap["urls"] = bbpim::AttributeKind::Website;
+    _attributeKindMap["socialNetworks"] = bbpim::AttributeKind::Profile;
+    _attributeKindMap["anniversary"] = bbpim::AttributeKind::Date;
+    _attributeKindMap["birthday"] = bbpim::AttributeKind::Date;
+    _attributeKindMap["categories"] = bbpim::AttributeKind::Group;
+    _attributeKindMap["name"] = bbpim::AttributeKind::Name;
+    _attributeKindMap["organizations"] = bbpim::AttributeKind::OrganizationAffiliation;
+    _attributeKindMap["education"] = bbpim::AttributeKind::Education;
+    _attributeKindMap["note"] = bbpim::AttributeKind::Note;
+    _attributeKindMap["ims"] = bbpim::AttributeKind::InstantMessaging;
+    _attributeKindMap["ringtone"] = bbpim::AttributeKind::Sound;
+    _attributeKindMap["videoChat"] = bbpim::AttributeKind::VideoChat;
+    _attributeKindMap["addresses"] = bbpim::AttributeKind::Invalid;
+    _attributeKindMap["favorite"] = bbpim::AttributeKind::Invalid;
+    _attributeKindMap["photos"] = bbpim::AttributeKind::Invalid;
+    _attributeKindMap["news"] = bbpim::AttributeKind::Invalid;
+    _attributeKindMap["activities"] = bbpim::AttributeKind::Invalid;
+}
+
+void PimContactsQt::createAttributeSubKindMap()
+{
+    _attributeSubKindMap["other"] = bbpim::AttributeSubKind::Other;
+    _attributeSubKindMap["home"] = bbpim::AttributeSubKind::Home;
+    _attributeSubKindMap["work"] = bbpim::AttributeSubKind::Work;
+    _attributeSubKindMap["mobile"] = bbpim::AttributeSubKind::PhoneMobile;
+    _attributeSubKindMap["direct"] = bbpim::AttributeSubKind::FaxDirect;
+    _attributeSubKindMap["blog"] = bbpim::AttributeSubKind::Blog;
+    _attributeSubKindMap["resume"] = bbpim::AttributeSubKind::WebsiteResume;
+    _attributeSubKindMap["portfolio"] = bbpim::AttributeSubKind::WebsitePortfolio;
+    _attributeSubKindMap["personal"] = bbpim::AttributeSubKind::WebsitePersonal;
+    _attributeSubKindMap["company"] = bbpim::AttributeSubKind::WebsiteCompany;
+    _attributeSubKindMap["facebook"] = bbpim::AttributeSubKind::ProfileFacebook;
+    _attributeSubKindMap["twitter"] = bbpim::AttributeSubKind::ProfileTwitter;
+    _attributeSubKindMap["linkedin"] = bbpim::AttributeSubKind::ProfileLinkedIn;
+    _attributeSubKindMap["gist"] = bbpim::AttributeSubKind::ProfileGist;
+    _attributeSubKindMap["tungle"] = bbpim::AttributeSubKind::ProfileTungle;
+    _attributeSubKindMap["birthday"] = bbpim::AttributeSubKind::DateBirthday;
+    _attributeSubKindMap["anniversary"] = bbpim::AttributeSubKind::DateAnniversary;
+    _attributeSubKindMap["categories"] = bbpim::AttributeSubKind::GroupDepartment;
+    _attributeSubKindMap["givenName"] = bbpim::AttributeSubKind::NameGiven;
+    _attributeSubKindMap["familyName"] = bbpim::AttributeSubKind::NameSurname;
+    _attributeSubKindMap["honorificPrefix"] = bbpim::AttributeSubKind::Title;
+    _attributeSubKindMap["honorificSuffix"] = bbpim::AttributeSubKind::NameSuffix;
+    _attributeSubKindMap["middleName"] = bbpim::AttributeSubKind::NameMiddle;
+    _attributeSubKindMap["nickname"] = bbpim::AttributeSubKind::NameNickname;
+    _attributeSubKindMap["displayName"] = bbpim::AttributeSubKind::NameDisplayName;
+    _attributeSubKindMap["phoneticGivenName"] = bbpim::AttributeSubKind::NamePhoneticGiven;
+    _attributeSubKindMap["phoneticFamilyName"] = bbpim::AttributeSubKind::NamePhoneticSurname;
+    _attributeSubKindMap["name"] = bbpim::AttributeSubKind::OrganizationAffiliationName;
+    _attributeSubKindMap["department"] = bbpim::AttributeSubKind::OrganizationAffiliationDetails;
+    _attributeSubKindMap["title"] = bbpim::AttributeSubKind::Title;
+    _attributeSubKindMap["BbmPin"] = bbpim::AttributeSubKind::InstantMessagingBbmPin;
+    _attributeSubKindMap["Aim"] = bbpim::AttributeSubKind::InstantMessagingAim;
+    _attributeSubKindMap["Aliwangwang"] = bbpim::AttributeSubKind::InstantMessagingAliwangwang;
+    _attributeSubKindMap["GoogleTalk"] = bbpim::AttributeSubKind::InstantMessagingGoogleTalk;
+    _attributeSubKindMap["Sametime"] = bbpim::AttributeSubKind::InstantMessagingSametime;
+    _attributeSubKindMap["Icq"] = bbpim::AttributeSubKind::InstantMessagingIcq;
+    _attributeSubKindMap["Jabber"] = bbpim::AttributeSubKind::InstantMessagingJabber;
+    _attributeSubKindMap["MsLcs"] = bbpim::AttributeSubKind::InstantMessagingMsLcs;
+    _attributeSubKindMap["Skype"] = bbpim::AttributeSubKind::InstantMessagingSkype;
+    _attributeSubKindMap["YahooMessenger"] = bbpim::AttributeSubKind::InstantMessagingYahooMessenger;
+    _attributeSubKindMap["YahooMessegerJapan"] = bbpim::AttributeSubKind::InstantMessagingYahooMessengerJapan;
+    _attributeSubKindMap["BbPlaybook"] = bbpim::AttributeSubKind::VideoChatBbPlaybook;
+    _attributeSubKindMap["ringtone"] = bbpim::AttributeSubKind::SoundRingtone;
+    _attributeSubKindMap["note"] = bbpim::AttributeSubKind::Other;
+}
+
+void PimContactsQt::createKindAttributeMap() {
+    _kindAttributeMap[bbpim::AttributeKind::Phone] = "phoneNumbers";
+    _kindAttributeMap[bbpim::AttributeKind::Fax] = "faxNumbers";
+    _kindAttributeMap[bbpim::AttributeKind::Pager] = "pagerNumber";
+    _kindAttributeMap[bbpim::AttributeKind::Email] = "emails";
+    _kindAttributeMap[bbpim::AttributeKind::Website] = "urls";
+    _kindAttributeMap[bbpim::AttributeKind::Profile] = "socialNetworks";
+    _kindAttributeMap[bbpim::AttributeKind::OrganizationAffiliation] = "organizations";
+    _kindAttributeMap[bbpim::AttributeKind::Education] = "education";
+    _kindAttributeMap[bbpim::AttributeKind::Note] = "note";
+    _kindAttributeMap[bbpim::AttributeKind::InstantMessaging] = "ims";
+    _kindAttributeMap[bbpim::AttributeKind::VideoChat] = "videoChat";
+    _kindAttributeMap[bbpim::AttributeKind::Sound] = "ringtone";
+    _kindAttributeMap[bbpim::AttributeKind::Website] = "urls";
+}
+
+void PimContactsQt::createSubKindAttributeMap() {
+    _subKindAttributeMap[bbpim::AttributeSubKind::Other] = "other";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Home] = "home";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Work] = "work";
+    _subKindAttributeMap[bbpim::AttributeSubKind::PhoneMobile] = "mobile";
+    _subKindAttributeMap[bbpim::AttributeSubKind::FaxDirect] = "direct";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Blog] = "blog";
+    _subKindAttributeMap[bbpim::AttributeSubKind::WebsiteResume] = "resume";
+    _subKindAttributeMap[bbpim::AttributeSubKind::WebsitePortfolio] = "portfolio";
+    _subKindAttributeMap[bbpim::AttributeSubKind::WebsitePersonal] = "personal";
+    _subKindAttributeMap[bbpim::AttributeSubKind::WebsiteCompany] = "company";
+    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileFacebook] = "facebook";
+    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileTwitter] = "twitter";
+    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileLinkedIn] = "linkedin";
+    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileGist] = "gist";
+    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileTungle] = "tungle";
+    _subKindAttributeMap[bbpim::AttributeSubKind::DateBirthday] = "birthday";
+    _subKindAttributeMap[bbpim::AttributeSubKind::DateAnniversary] = "anniversary";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameGiven] = "givenName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameSurname] = "familyName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Title] = "honorificPrefix";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameSuffix] = "honorificSuffix";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameMiddle] = "middleName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NamePhoneticGiven] = "phoneticGivenName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NamePhoneticSurname] = "phoneticFamilyName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameNickname] = "nickname";
+    _subKindAttributeMap[bbpim::AttributeSubKind::NameDisplayName] = "displayName";
+    _subKindAttributeMap[bbpim::AttributeSubKind::OrganizationAffiliationName] = "name";
+    _subKindAttributeMap[bbpim::AttributeSubKind::OrganizationAffiliationDetails] = "department";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Title] = "title";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingBbmPin] = "BbmPin";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingAim] = "Aim";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingAliwangwang] = "Aliwangwang";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingGoogleTalk] = "GoogleTalk";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingSametime] = "Sametime";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingIcq] = "Icq";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingJabber] = "Jabber";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingMsLcs] = "MsLcs";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingSkype] = "Skype";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingYahooMessenger] = "YahooMessenger";
+    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingYahooMessengerJapan] = "YahooMessegerJapan";
+    _subKindAttributeMap[bbpim::AttributeSubKind::VideoChatBbPlaybook] = "BbPlaybook";
+    _subKindAttributeMap[bbpim::AttributeSubKind::SoundRingtone] = "ringtone";
+    _subKindAttributeMap[bbpim::AttributeSubKind::Personal] = "personal";
+}
+
+} // namespace webworks
+
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.hpp b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.hpp
new file mode 100644
index 0000000..115469c
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/pim_contacts_qt.hpp
@@ -0,0 +1,148 @@
+/*
+ * Copyright 2012 Research In Motion Limited.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef PIM_CONTACTS_QT_H_
+#define PIM_CONTACTS_QT_H_
+
+#include <json/value.h>
+#include <bb/pim/contacts/ContactService.hpp>
+#include <bb/pim/contacts/ContactConsts.hpp>
+#include <bb/pim/contacts/Contact.hpp>
+#include <bb/pim/contacts/ContactBuilder.hpp>
+#include <bb/pim/contacts/ContactAttribute.hpp>
+#include <bb/pim/contacts/ContactAttributeBuilder.hpp>
+#include <bb/pim/contacts/ContactPostalAddress.hpp>
+#include <bb/pim/contacts/ContactPostalAddressBuilder.hpp>
+#include <bb/pim/contacts/ContactPhoto.hpp>
+#include <bb/pim/contacts/ContactPhotoBuilder.hpp>
+#include <bb/pim/contacts/ContactListFilters.hpp>
+#include <bb/pim/account/AccountService.hpp>
+#include <bb/pim/account/Account.hpp>
+#include <bb/pim/account/Provider>
+#include <webworks_utils.hpp>
+
+#include <string>
+#include <utility>
+#include <map>
+
+#include "contact_account.hpp"
+
+class PimContacts;
+
+namespace webworks {
+
+namespace bbpim = bb::pim::contacts;
+namespace bbpimacc = bb::pim::account;
+
+typedef std::map<std::string, bbpim::AttributeKind::Type> StringToKindMap;
+typedef std::map<std::string, bbpim::AttributeSubKind::Type> StringToSubKindMap;
+typedef std::map<bbpim::AttributeKind::Type, std::string> KindToStringMap;
+typedef std::map<bbpim::AttributeSubKind::Type, std::string> SubKindToStringMap;
+
+typedef std::pair<bbpim::AttributeSubKind::Type, std::string> SubkindValuePair;
+
+enum PimContactsError {
+    UNKNOWN_ERROR = 0,
+    INVALID_ARGUMENT_ERROR = 1,
+    TIMEOUT_ERROR = 2,
+    PENDING_OPERATION_ERROR = 3,
+    IO_ERROR = 4,
+    NOT_SUPPORTED_ERROR = 5,
+    PERMISSION_DENIED_ERROR = 20,
+};
+
+struct PimContactsThreadInfo {
+    PimContacts *parent;
+    Json::Value *jsonObj;
+    std::string eventId;
+};
+
+class PimContactsQt {
+public:
+    PimContactsQt();
+    ~PimContactsQt();
+    Json::Value Find(const Json::Value& argsObj);
+    Json::Value Save(const Json::Value& attributeObj);
+    Json::Value CreateContact(const Json::Value& attributeObj);
+    Json::Value DeleteContact(const Json::Value& contactObj);
+    Json::Value EditContact(bbpim::Contact& contact, const Json::Value& attributeObj);
+    Json::Value CloneContact(bbpim::Contact& contact, const Json::Value& attributeObj);
+    Json::Value GetContact(const Json::Value& argsObj);
+    static Json::Value InvokePicker(const Json::Value& args);
+    static Json::Value GetContactAccounts();
+
+private:
+    // Helper functions for Find
+    Json::Value assembleSearchResults(const QSet<bbpim::ContactId>& results, const Json::Value& contactFields, int limit);
+    Json::Value populateContact(const bbpim::Contact& contact, const Json::Value& contactFields);
+    void populateField(const bbpim::Contact& contact, bbpim::AttributeKind::Type kind, Json::Value& contactItem, bool isContactField, bool isArray);
+    void populateDisplayNameNickName(const bbpim::Contact& contact, Json::Value& contactItem, const std::string& field);
+    void populateOrganizations(const bbpim::Contact& contact, Json::Value& contactOrgs);
+    void populateAddresses(const bbpim::Contact& contact, Json::Value& contactAddrs);
+    void populatePhotos(const bbpim::Contact& contact, Json::Value& contactPhotos);
+    void populateNews(const bbpim::Contact& contact, Json::Value& contactNews);
+    void populateActivity(const bbpim::Contact& contact, Json::Value& contactActivity);
+    static void populateAccount(const bbpimacc::Account& account, Json::Value& jsonAccount);
+
+    static QSet<bbpim::ContactId> singleFieldSearch(const Json::Value& searchFieldsJson, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
+    static QString getSortFieldValue(const bbpim::SortColumn::Type sortField, const bbpim::Contact& contact);
+    static QList<bbpim::SearchField::Type> getSearchFields(const Json::Value& searchFieldsJson);
+    static void getSortSpecs(const Json::Value& sort);
+    static QSet<bbpim::ContactId> getPartialSearchResults(const Json::Value& filter, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
+    static bool lessThan(const bbpim::Contact& c1, const bbpim::Contact& c2);
+    static std::string replaceAll(const std::string& s, const std::string& souce = "\"", const std::string& target = "\\\"");
+    static std::string replaceString(const std::string& s);
+    static QList<bbpim::AttributeKind::Type> getIncludeAttributesList(const Json::Value& contactFields, bbpim::ContactListFilters* listFilters = NULL);
+    static void getAccountFilters(bbpim::ContactSearchFilters* searchFilter, bbpim::ContactListFilters* listFilter, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
+
+    // Helper functions for Save
+    void addAttributeKind(bbpim::ContactBuilder& contactBuilder, const Json::Value& jsonObj, const std::string& field);
+    void addPostalAddress(bbpim::ContactBuilder& contactBuilder, const Json::Value& addressObj);
+    void addPhoto(bbpim::ContactBuilder& contactBuilder, const Json::Value& photoObj);
+
+    void syncAttributeKind(bbpim::Contact& contact, const Json::Value& jsonObj, const std::string& field);
+    void syncConvertedList(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<bbpim::ContactAttribute>& savedList, const QList<SubkindValuePair>& convertedList, const std::string& groupKey = "");
+    void syncAttributeGroup(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<QList<bbpim::ContactAttribute> > savedList, const Json::Value& jsonObj);
+    void syncAttribute(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactAttribute>& savedList, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey = "");
+    void syncPostalAddresses(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPostalAddress>& savedList, const Json::Value& jsonObj);
+    void syncPhotos(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPhoto>& savedList, const Json::Value& jsonObj, const bbpim::ContactPhoto& primaryPhoto);
+
+    void addConvertedList(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const QList<SubkindValuePair>& convertedList, const std::string& groupKey = "");
+    void addAttribute(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey = "");
+
+    QList<SubkindValuePair> convertGroupedAttributes(const Json::Value& fieldsObj);
+    QList<SubkindValuePair> convertFieldAttributes(const Json::Value& fieldArray);
+    QList<SubkindValuePair> convertStringArray(const Json::Value& stringArray, bbpim::AttributeSubKind::Type subkind);
+
+    // Mappings between JSON strings and attribute kinds/subkinds
+    static void createAttributeKindMap();
+    static void createAttributeSubKindMap();
+    static void createKindAttributeMap();
+    static void createSubKindAttributeMap();
+
+    static StringToKindMap _attributeKindMap;
+    static StringToSubKindMap _attributeSubKindMap;
+    static KindToStringMap _kindAttributeMap;
+    static SubKindToStringMap _subKindAttributeMap;
+    static QList<bbpim::SortSpecifier> _sortSpecs;
+
+    static std::map<bbpim::ContactId, bbpim::Contact> _contactSearchMap;
+    static ContactAccount& _contactAccount;
+};
+
+} // namespace webworks
+
+#endif // PIM_CONTACTS_QT_H_
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/simulator/libpimcontacts.so b/plugin/com.blackberry.pim.lib/src/blackberry10/native/simulator/libpimcontacts.so
new file mode 100644
index 0000000000000000000000000000000000000000..263e8bae016741fa0a0fbf672e1b709822db3589
GIT binary patch
literal 265964
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
bFn_iVE`01-0gJ2fxfp-b3MU-RkA40h&BWLe

literal 0
HcmV?d00001

diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/Makefile b/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/Makefile
new file mode 100644
index 0000000..0e22650
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/Makefile
@@ -0,0 +1,8 @@
+LIST=VARIANT
+ifndef QRECURSE
+QRECURSE=recurse.mk
+ifdef QCONFIG
+QRDIR=$(dir $(QCONFIG))
+endif
+endif
+include $(QRDIR)$(QRECURSE)
diff --git a/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/so/Makefile b/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/so/Makefile
new file mode 100644
index 0000000..2c76089
--- /dev/null
+++ b/plugin/com.blackberry.pim.lib/src/blackberry10/native/x86/so/Makefile
@@ -0,0 +1 @@
+include ../../common.mk
diff --git a/plugin/com.blackberry.push/plugin.xml b/plugin/com.blackberry.push/plugin.xml
index d191cb4..d3b7dfb 100644
--- a/plugin/com.blackberry.push/plugin.xml
+++ b/plugin/com.blackberry.push/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.push"
     version="1.0.0">
+
+    <description>BlackBerry 10 Push APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.push" />
     </js-module>
@@ -34,6 +39,6 @@
             <rim:permit system="true">_sys_use_consumer_push</rim:permit>
             <rim:permit>run_when_backgrounded</rim:permit>
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.sensors/plugin.xml b/plugin/com.blackberry.sensors/plugin.xml
index 726fee7..cb0f19a 100644
--- a/plugin/com.blackberry.sensors/plugin.xml
+++ b/plugin/com.blackberry.sensors/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.sensors"
     version="1.0.0">
+
+    <description>BlackBerry 10 Sensors APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.sensors" />
     </js-module>
@@ -32,6 +37,6 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.sensors" value="com.blackberry.sensors" />
         </config-file>
-        <dependency id="com.blackberry.utils" url="." subdir="/plugin/com.blackberry.utils/"/>
+        <dependency id="com.blackberry.utils" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.system/plugin.xml b/plugin/com.blackberry.system/plugin.xml
index b6fbcd6..439e902 100644
--- a/plugin/com.blackberry.system/plugin.xml
+++ b/plugin/com.blackberry.system/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.system"
     version="1.0.0">
+
+    <description>BlackBerry 10 System APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.system" />
     </js-module>
@@ -28,6 +33,6 @@
         <config-file target="www/config.xml" parent="/widget">
             <feature name="com.blackberry.system" value="com.blackberry.system" />
         </config-file>
-        <dependency id="com.blackberry.jpps" url="." subdir="/plugin/com.blackberry.jpps/"/>
+        <dependency id="com.blackberry.jpps" />
     </platform>
 </plugin>
diff --git a/plugin/com.blackberry.ui.contextmenu/plugin.xml b/plugin/com.blackberry.ui.contextmenu/plugin.xml
index 95cd94d..f3d8861 100644
--- a/plugin/com.blackberry.ui.contextmenu/plugin.xml
+++ b/plugin/com.blackberry.ui.contextmenu/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.ui.contextmenu"
     version="1.0.0">
+
+    <description>BlackBerry 10 Context Menu APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.ui.contextmenu" />
     </js-module>
diff --git a/plugin/com.blackberry.ui.cover/plugin.xml b/plugin/com.blackberry.ui.cover/plugin.xml
index 3f527d5..382c2df 100644
--- a/plugin/com.blackberry.ui.cover/plugin.xml
+++ b/plugin/com.blackberry.ui.cover/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.ui.cover"
     version="1.0.0">
+
+    <description>BlackBerry 10 Cover APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.ui.cover" />
     </js-module>
diff --git a/plugin/com.blackberry.ui.dialog/plugin.xml b/plugin/com.blackberry.ui.dialog/plugin.xml
index b4bfd68..75777bc 100644
--- a/plugin/com.blackberry.ui.dialog/plugin.xml
+++ b/plugin/com.blackberry.ui.dialog/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.ui.dialog"
     version="1.0.0">
+
+    <description>BlackBerry 10 Dialog APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.ui.dialog" />
     </js-module>
diff --git a/plugin/com.blackberry.ui.toast/plugin.xml b/plugin/com.blackberry.ui.toast/plugin.xml
index 419592f..ff0e63a 100644
--- a/plugin/com.blackberry.ui.toast/plugin.xml
+++ b/plugin/com.blackberry.ui.toast/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.ui.toast"
     version="1.0.0">
+
+    <description>BlackBerry 10 Toast APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js">
         <clobbers target="blackberry.ui.toast" />
     </js-module>
diff --git a/plugin/com.blackberry.user.identity/plugin.xml b/plugin/com.blackberry.user.identity/plugin.xml
index d51d1c4..87d8ca2 100644
--- a/plugin/com.blackberry.user.identity/plugin.xml
+++ b/plugin/com.blackberry.user.identity/plugin.xml
@@ -16,9 +16,14 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.user.identity"
     version="1.0.0">
+
+    <description>BlackBerry 10 User Identity APIs</description>
+    <license>Apache 2.0</license>
+
     <js-module src="www/client.js"> 
         <clobbers target="blackberry.user.identity" />
     </js-module>
diff --git a/plugin/com.blackberry.utils/plugin.xml b/plugin/com.blackberry.utils/plugin.xml
index 746fa76..747d047 100644
--- a/plugin/com.blackberry.utils/plugin.xml
+++ b/plugin/com.blackberry.utils/plugin.xml
@@ -16,10 +16,15 @@
  specific language governing permissions and limitations
  under the License.
 -->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
+
+<plugin xmlns="http://cordova.apache.org/ns/plugins/1.0"
+    xmlns:rim="http://www.blackberry.com/ns/widgets"
     id="com.blackberry.utils"
     version="1.0.0">
 
+    <description>BlackBerry 10 Utilities Library</description>
+    <license>Apache 2.0</license>
+
     <platform name="blackberry10">
         <lib-file src="src/blackberry10/native/device/libutils.so" arch="device"/>
         <lib-file src="src/blackberry10/native/simulator/libutils.so" arch="simulator"/>
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/plugin.xml b/plugin/org.apache.cordova.blackberry10.pimlib/plugin.xml
deleted file mode 100644
index 474077e..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/plugin.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-
-<!--
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
--->
-<plugin xmlns="http://www.phonegap.com/ns/plugins/1.0"
-    id="org.apache.cordova.blackberry10.pimlib"
-    version="1.0.0">
-
-    <platform name="blackberry10">
-        <lib-file src="src/blackberry10/native/device/libpimcontacts.so" arch="device"></lib-file>
-        <lib-file src="src/blackberry10/native/simulator/libpimcontacts.so" arch="simulator"></lib-file>
-        <config-file target="www/config.xml" parent="/widget">
-            <feature name="org.apache.cordova.blackberry10.pimlib"></feature>
-        </config-file>
-    </platform>
-</plugin>
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/Makefile b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/Makefile
deleted file mode 100644
index 0cc5eae..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/Makefile
+++ /dev/null
@@ -1,8 +0,0 @@
-LIST=CPU
-ifndef QRECURSE
-QRECURSE=recurse.mk
-ifdef QCONFIG
-QRDIR=$(dir $(QCONFIG))
-endif
-endif
-include $(QRDIR)$(QRECURSE)
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/Makefile b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/Makefile
deleted file mode 100644
index 0e22650..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/Makefile
+++ /dev/null
@@ -1,8 +0,0 @@
-LIST=VARIANT
-ifndef QRECURSE
-QRECURSE=recurse.mk
-ifdef QCONFIG
-QRDIR=$(dir $(QCONFIG))
-endif
-endif
-include $(QRDIR)$(QRECURSE)
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/so.le-v7/Makefile b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/so.le-v7/Makefile
deleted file mode 100644
index 2c76089..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/arm/so.le-v7/Makefile
+++ /dev/null
@@ -1 +0,0 @@
-include ../../common.mk
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/common.mk b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/common.mk
deleted file mode 100644
index 7bc06fb..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/common.mk
+++ /dev/null
@@ -1,18 +0,0 @@
-ifndef QCONFIG
-QCONFIG=qconfig.mk
-endif
-include $(QCONFIG)
-
-NAME=pimcontacts
-PLUGIN=yes
-UTILS=yes
-
-include ../../../../../../meta.mk
-
-SRCS+=pim_contacts_qt.cpp \
-      pim_contacts_js.cpp \
-      contact_account.cpp
-
-include $(MKFILES_ROOT)/qtargets.mk
-
-LIBS+=bbpim bbcascadespickers QtCore img
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.cpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.cpp
deleted file mode 100644
index 3476e70..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.cpp
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <webworks_utils.hpp>
-#include "contact_account.hpp"
-
-ContactAccount& ContactAccount::GetAccountInstance()
-{
-    static ContactAccount ca;
-    return ca;
-}
-
-ContactAccount::ContactAccount()
-{
-    fetchContactAccounts();
-}
-
-ContactAccount::~ContactAccount()
-{}
-
-QList<bb::pim::account::Account> ContactAccount::GetContactAccounts(bool fresh)
-{
-    if (fresh) {
-        fetchContactAccounts();
-    }
-    return _accounts;
-}
-
-bb::pim::account::Account ContactAccount::GetAccount(bb::pim::account::AccountKey id, bool fresh)
-{
-    if (fresh) {
-        fetchContactAccounts();
-    }
-    return _accountMap.value(id);
-}
-
-Json::Value ContactAccount::Account2Json(const bb::pim::account::Account& account)
-{
-    Json::Value jsonAccount;
-    jsonAccount["id"] = webworks::Utils::intToStr(account.id());
-    jsonAccount["name"] = account.displayName().isEmpty() ? account.provider().name().toStdString() : account.displayName().toStdString();
-    jsonAccount["enterprise"] = account.isEnterprise() == 1 ? true : false;
-
-    return jsonAccount;
-}
-
-void ContactAccount::fetchContactAccounts()
-{
-    QList<bb::pim::account::Account> accounts = _accountService.accounts(bb::pim::account::Service::Contacts);
-
-    _accounts.clear();
-    _accountMap.clear();
-    for (QList<bb::pim::account::Account>::const_iterator it = accounts.begin(); it != accounts.end(); ++it) {
-        if ((it->id() != ID_UNIFIED_ACCOUNT) && (it->id() != ID_ENHANCED_ACCOUNT)) {
-            _accounts.append(*it);
-            _accountMap.insert(it->id(), (bb::pim::account::Account)(*it));
-        }
-    }
-}
-
-
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.hpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.hpp
deleted file mode 100644
index 3910de8..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/contact_account.hpp
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef _CONTACT_ACCOUNT_HPP_
-#define _CONTACT_ACCOUNT_HPP_
-
-#include <bb/pim/account/Account>
-#include <bb/pim/account/AccountService>
-#include <bb/pim/account/Provider>
-
-#include <json/value.h>
-#include <QList>
-#include <QDebug>
-
-class ContactAccount
-{
-public:
-    static ContactAccount& GetAccountInstance();
-
-    // get all available accounts which provide contact service
-    QList<bb::pim::account::Account> GetContactAccounts(bool fresh = false);
-    // get the contact account with the specific id
-    bb::pim::account::Account GetAccount(bb::pim::account::AccountKey id, bool fresh = false);
-    // serialize account to json object
-    static Json::Value Account2Json(const bb::pim::account::Account& account);
-
-private:
-    ContactAccount();
-    ~ContactAccount();
-    explicit ContactAccount(ContactAccount const&);
-    void operator=(ContactAccount const&);
-    // Refresh the accounts list and map
-    void fetchContactAccounts();
-    QMap<bb::pim::account::AccountKey, bb::pim::account::Account> _accountMap;
-    QList<bb::pim::account::Account> _accounts;
-    bb::pim::account::AccountService _accountService;
-    static const int ID_UNIFIED_ACCOUNT = 4;
-    static const int ID_ENHANCED_ACCOUNT = 6;
-};
-
-#endif // end of _CONTACT_ACCOUNT_HPP_
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/device/libpimcontacts.so b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/device/libpimcontacts.so
deleted file mode 100644
index 03efc41d099fb0b6454c2e039b6f7855696d57e6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 170350
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

diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.cpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.cpp
deleted file mode 100644
index 4788bd1..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.cpp
+++ /dev/null
@@ -1,174 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <json/reader.h>
-#include <json/writer.h>
-#include <string>
-#include "pim_contacts_js.hpp"
-#include "pim_contacts_qt.hpp"
-
-PimContacts::PimContacts(const std::string& id) : m_id(id)
-{
-}
-
-char* onGetObjList()
-{
-    // Return list of classes in the object
-    static char name[] = "PimContacts";
-    return name;
-}
-
-JSExt* onCreateObject(const std::string& className, const std::string& id)
-{
-    // Make sure we are creating the right class
-    if (className != "PimContacts") {
-        return 0;
-    }
-
-    return new PimContacts(id);
-}
-
-std::string PimContacts::InvokeMethod(const std::string& command)
-{
-    unsigned int index = command.find_first_of(" ");
-
-    string strCommand;
-    string jsonObject;
-    Json::Value *obj;
-
-    if (index != std::string::npos) {
-        strCommand = command.substr(0, index);
-        jsonObject = command.substr(index + 1, command.length());
-
-        // Parse the JSON
-        obj = new Json::Value;
-        bool parse = Json::Reader().parse(jsonObject, *obj);
-
-        if (!parse) {
-            return "Cannot parse JSON object";
-        }
-    } else {
-        strCommand = command;
-        obj = NULL;
-    }
-
-    if (strCommand == "find") {
-        startThread(FindThread, obj);
-    } else if (strCommand == "save") {
-        startThread(SaveThread, obj);
-    } else if (strCommand == "remove") {
-        startThread(RemoveThread, obj);
-    } else if (strCommand == "getContact") {
-        std::string result = Json::FastWriter().write(webworks::PimContactsQt().GetContact(*obj));
-        delete obj;
-        return result;
-    } else if (strCommand == "invokePicker") {
-        Json::Value result = webworks::PimContactsQt::InvokePicker(*obj);
-        delete obj;
-
-        std::string event = Json::FastWriter().write(result);
-        NotifyEvent("invokeContactPicker.invokeEventId", event);
-    } else if (strCommand == "getContactAccounts") {
-        return Json::FastWriter().write(webworks::PimContactsQt::GetContactAccounts());
-    }
-
-    return "";
-}
-
-bool PimContacts::CanDelete()
-{
-    return true;
-}
-
-// Notifies JavaScript of an event
-void PimContacts::NotifyEvent(const std::string& eventId, const std::string& event)
-{
-    std::string eventString = m_id + " result ";
-    eventString.append(eventId);
-    eventString.append(" ");
-    eventString.append(event);
-    SendPluginEvent(eventString.c_str(), m_pContext);
-}
-
-bool PimContacts::startThread(ThreadFunc threadFunction, Json::Value *jsonObj) {
-    webworks::PimContactsThreadInfo *thread_info = new webworks::PimContactsThreadInfo;
-    thread_info->parent = this;
-    thread_info->jsonObj = jsonObj;
-    thread_info->eventId = jsonObj->removeMember("_eventId").asString();
-
-    pthread_attr_t thread_attr;
-    pthread_attr_init(&thread_attr);
-    pthread_attr_setdetachstate(&thread_attr, PTHREAD_CREATE_DETACHED);
-
-    pthread_t thread;
-    pthread_create(&thread, &thread_attr, threadFunction, static_cast<void *>(thread_info));
-    pthread_attr_destroy(&thread_attr);
-
-    if (!thread) {
-        return false;
-    }
-
-    return true;
-}
-
-
-// Static functions:
-
-void* PimContacts::FindThread(void *args)
-{
-    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
-
-    webworks::PimContactsQt pim_qt;
-    Json::Value result = pim_qt.Find(*(thread_info->jsonObj));
-    delete thread_info->jsonObj;
-
-    std::string event = Json::FastWriter().write(result);
-    thread_info->parent->NotifyEvent(thread_info->eventId, event);
-    delete thread_info;
-
-    return NULL;
-}
-
-void* PimContacts::SaveThread(void *args)
-{
-    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
-
-    webworks::PimContactsQt pim_qt;
-    Json::Value result = pim_qt.Save(*(thread_info->jsonObj));
-    delete thread_info->jsonObj;
-
-    std::string event = Json::FastWriter().write(result);
-    thread_info->parent->NotifyEvent(thread_info->eventId, event);
-    delete thread_info;
-
-    return NULL;
-}
-
-void* PimContacts::RemoveThread(void *args)
-{
-    webworks::PimContactsThreadInfo *thread_info = static_cast<webworks::PimContactsThreadInfo *>(args);
-
-    webworks::PimContactsQt pim_qt;
-    Json::Value result = pim_qt.DeleteContact(*(thread_info->jsonObj));
-    delete thread_info->jsonObj;
-
-    std::string event = Json::FastWriter().write(result);
-    thread_info->parent->NotifyEvent(thread_info->eventId, event);
-    delete thread_info;
-
-    return NULL;
-}
-
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.hpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.hpp
deleted file mode 100644
index df8bbd7..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_js.hpp
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef PIM_CONTACTS_JS_H_
-#define PIM_CONTACTS_JS_H_
-
-#include <json/value.h>
-#include <pthread.h>
-#include <string>
-#include "../common/plugin.h"
-
-typedef void* ThreadFunc(void *args);
-
-class PimContacts : public JSExt
-{
-public:
-    explicit PimContacts(const std::string& id);
-    virtual ~PimContacts() {}
-    virtual std::string InvokeMethod(const std::string& command);
-    virtual bool CanDelete();
-    void NotifyEvent(const std::string& eventId, const std::string& event);
-
-    static void* FindThread(void *args);
-    static void* SaveThread(void *args);
-    static void* RemoveThread(void *args);
-private:
-    bool startThread(ThreadFunc threadFunction, Json::Value *jsonObj);
-
-    std::string m_id;
-};
-
-#endif // PIM_CONTACTS_JS_H_
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.cpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.cpp
deleted file mode 100644
index 532d293..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.cpp
+++ /dev/null
@@ -1,1614 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <json/value.h>
-#include <json/writer.h>
-#include <stdio.h>
-#include <webworks_utils.hpp>
-#include <bb/cascades/pickers/ContactPicker>
-#include <bb/cascades/pickers/ContactSelectionMode>
-#include <QSet>
-#include <QMap>
-#include <QtAlgorithms>
-#include <string>
-#include <sstream>
-#include <map>
-#include <algorithm>
-#include "pim_contacts_qt.hpp"
-
-namespace webworks {
-
-StringToKindMap PimContactsQt::_attributeKindMap;
-StringToSubKindMap PimContactsQt::_attributeSubKindMap;
-KindToStringMap PimContactsQt::_kindAttributeMap;
-SubKindToStringMap PimContactsQt::_subKindAttributeMap;
-QList<bbpim::SortSpecifier> PimContactsQt::_sortSpecs;
-std::map<bbpim::ContactId, bbpim::Contact> PimContactsQt::_contactSearchMap;
-ContactAccount& PimContactsQt::_contactAccount = ContactAccount::GetAccountInstance();
-
-PimContactsQt::PimContactsQt()
-{
-    static bool mapInit = false;
-
-    if (!mapInit) {
-        createAttributeKindMap();
-        createAttributeSubKindMap();
-        createKindAttributeMap();
-        createSubKindAttributeMap();
-        mapInit = true;
-    }
-}
-
-PimContactsQt::~PimContactsQt()
-{
-}
-
-/****************************************************************
- * Public Functions
- ****************************************************************/
-
-Json::Value PimContactsQt::Find(const Json::Value& args)
-{
-    Json::Value returnObj;
-
-    if (!args.isMember("fields") || args["fields"].empty() || !args.isMember("options") || args["options"].isNull()) {
-        returnObj["_success"] = false;
-        returnObj["code"] = INVALID_ARGUMENT_ERROR;
-        return returnObj;
-    }
-
-    QSet<bbpim::ContactId> results;
-    int limit = -1;
-    bool favorite = false;
-    Json::Value includeAccounts = args["options"].get("includeAccounts", Json::nullValue);
-    Json::Value excludeAccounts = args["options"].get("excludeAccounts", Json::nullValue);
-
-    if (args["options"].isMember("favorite") && args["options"]["favorite"].isBool()) {
-        favorite = args["options"]["favorite"].asBool();
-    }
-
-    if (args["options"].isMember("limit") && args["options"]["limit"].isInt()) {
-        limit = args["options"]["limit"].asInt();
-    }
-
-    if (args["options"].isMember("filter") && !args["options"]["filter"].empty()) {
-        results = getPartialSearchResults(args["options"]["filter"], args["fields"], favorite, includeAccounts, excludeAccounts);
-
-        getSortSpecs(args["options"]["sort"]);
-
-        returnObj["_success"] = true;
-        returnObj["contacts"] = assembleSearchResults(results, args["fields"], limit);
-    } else {
-        // if no filters specified, use list filters to get all contacts
-        bbpim::ContactService service;
-        bbpim::ContactListFilters listFilters;
-        QList<bbpim::Contact> results;
-        Json::Value contacts;
-
-        getSortSpecs(args["options"]["sort"]);
-        if (!_sortSpecs.empty()) {
-            listFilters.setSortBy(_sortSpecs);
-        }
-
-        listFilters.setIncludeAttributes(getIncludeAttributesList(args["fields"], &listFilters));
-
-        if (favorite) {
-            listFilters.setIsFavourite(favorite);
-        }
-
-        if (limit != -1) {
-            listFilters.setLimit(limit);
-        }
-
-        getAccountFilters(NULL, &listFilters, includeAccounts, excludeAccounts);
-
-        results = service.contacts(listFilters);
-        for (QList<bbpim::Contact>::const_iterator i = results.constBegin(); i != results.constEnd(); i++) {
-            Json::Value contactItem = populateContact(*i, args["fields"]);
-            contacts.append(contactItem);
-        }
-
-        returnObj["_success"] = true;
-        returnObj["contacts"] = contacts;
-    }
-
-    return returnObj;
-}
-
-Json::Value PimContactsQt::Save(const Json::Value& attributeObj)
-{
-    if (!attributeObj.isMember("id") || attributeObj["id"].isNull()) {
-        return CreateContact(attributeObj);
-    } else if (attributeObj.isMember("id") && attributeObj["id"].isInt()) {
-        int contactId = attributeObj["id"].asInt();
-        bbpim::ContactService service;
-
-        if (contactId > 0) {
-            bbpim::Contact contact = service.contactDetails(contactId);
-
-            if (contact.isValid()) {
-                return EditContact(contact, attributeObj);
-            }
-        } else {
-            bbpim::Contact contact = service.contactDetails(contactId * -1);
-
-            if (contact.isValid()) {
-                return CloneContact(contact, attributeObj);
-            }
-        }
-    }
-
-    Json::Value returnObj;
-    returnObj["_success"] = false;
-    returnObj["code"] = INVALID_ARGUMENT_ERROR;
-    return returnObj;
-}
-
-Json::Value PimContactsQt::CreateContact(const Json::Value& attributeObj)
-{
-    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
-    Json::Value contactFields;
-
-    bbpim::Contact newContact;
-    bbpim::ContactBuilder contactBuilder(newContact.edit());
-
-    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
-        const std::string key = attributeKeys[i];
-        contactFields.append(Json::Value(key));
-        addAttributeKind(contactBuilder, attributeObj[key], key);
-    }
-
-    bbpim::ContactService service;
-    newContact = service.createContact(newContact, attributeObj["isWork"].asBool(), true);
-
-    Json::Value returnObj;
-
-    if (newContact.isValid()) {
-        returnObj = populateContact(newContact, contactFields);
-        returnObj["_success"] = true;
-    } else {
-        returnObj["_success"] = false;
-        returnObj["code"] = UNKNOWN_ERROR;
-    }
-
-    return returnObj;
-}
-
-Json::Value PimContactsQt::DeleteContact(const Json::Value& contactObj)
-{
-    Json::Value returnObj;
-
-    if (contactObj.isMember("contactId") && contactObj["contactId"].isInt()) {
-        bbpim::ContactId contactId = contactObj["contactId"].asInt();
-
-        bbpim::ContactService service;
-        bbpim::Contact contact = service.contactDetails(contactId);
-
-        if (contact.isValid()) {
-            service.deleteContact(contactId);
-            returnObj["_success"] = true;
-            return returnObj;
-        }
-    }
-
-    returnObj["_success"] = false;
-    returnObj["code"] = INVALID_ARGUMENT_ERROR;
-    return returnObj;
-}
-
-Json::Value PimContactsQt::EditContact(bbpim::Contact& contact, const Json::Value& attributeObj)
-{
-    bbpim::ContactBuilder contactBuilder(contact.edit());
-    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
-    Json::Value contactFields;
-
-    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
-        const std::string key = attributeKeys[i];
-        contactFields.append(Json::Value(key));
-        syncAttributeKind(contact, attributeObj[key], key);
-    }
-
-    bbpim::ContactService service;
-    contact = service.updateContact(contact);
-
-    Json::Value returnObj;
-
-    if (contact.isValid()) {
-        returnObj = populateContact(contact, contactFields);
-        returnObj["_success"] = true;
-    } else {
-        returnObj["_success"] = false;
-        returnObj["code"] = UNKNOWN_ERROR;
-    }
-
-    return returnObj;
-}
-
-Json::Value PimContactsQt::CloneContact(bbpim::Contact& contact, const Json::Value& attributeObj)
-{
-    bbpim::ContactService service;
-    bbpim::Contact newContact;
-    bbpim::ContactBuilder contactBuilder(newContact.edit());
-    contactBuilder = contactBuilder.addFromContact(contact);
-    contactBuilder = contactBuilder.setFavorite(contact.isFavourite());
-
-    const Json::Value::Members attributeKeys = attributeObj.getMemberNames();
-    Json::Value contactFields;
-
-    for (unsigned int i = 0; i < attributeKeys.size(); i++) {
-        const std::string key = attributeKeys[i];
-        contactFields.append(Json::Value(key));
-        syncAttributeKind(newContact, attributeObj[key], key);
-    }
-
-    newContact = service.createContact(newContact, attributeObj["isWork"].asBool(), true);
-
-    Json::Value returnObj;
-
-    if (newContact.isValid()) {
-        returnObj = populateContact(newContact, contactFields);
-        returnObj["_success"] = true;
-    } else {
-        returnObj["_success"] = false;
-        returnObj["code"] = UNKNOWN_ERROR;
-    }
-
-    return returnObj;
-}
-
-Json::Value PimContactsQt::GetContact(const Json::Value& args)
-{
-    Json::Value returnObj;
-    Json::Value fields;
-    bbpim::ContactService contactService;
-    StringToKindMap::const_iterator it;
-    int loop = 0;
-
-    for (it = _attributeKindMap.begin(); it != _attributeKindMap.end(); ++it) {
-        fields[loop] = it->first;
-        loop++;
-    }
-
-    if (args.isMember("contactId")) {
-        bbpim::Contact contact;
-        bbpim::ContactId contactId = Utils::strToInt(args["contactId"].asString());
-
-        if (contactId == -1) {
-            returnObj["_success"] = false;
-            returnObj["code"] = INVALID_ARGUMENT_ERROR;
-        } else {
-            contact = contactService.contactDetails(contactId);
-            returnObj["_success"] = true;
-            if (contact.isValid()) {
-                returnObj["contact"] = populateContact(contact, fields);
-            }
-        }
-    } else {
-        returnObj["_success"] = false;
-        returnObj["code"] = INVALID_ARGUMENT_ERROR;
-    }
-
-    if (returnObj.empty()) {
-        returnObj["_success"] = false;
-        returnObj["code"] = UNKNOWN_ERROR;
-    }
-
-    return returnObj;
-}
-
-Json::Value PimContactsQt::InvokePicker(const Json::Value& args)
-{
-    bb::cascades::pickers::ContactPicker picker;
-    bb::cascades::pickers::ContactSelectionMode::Type mode;
-    QSet<bbpim::AttributeKind::Type> filters;
-    Json::Value result;
-
-    if (args.isMember("mode")) {
-        switch (args["mode"].asInt()) {
-            case bb::cascades::pickers::ContactSelectionMode::Single:
-                mode = bb::cascades::pickers::ContactSelectionMode::Single;
-                break;
-            case bb::cascades::pickers::ContactSelectionMode::Multiple:
-                mode = bb::cascades::pickers::ContactSelectionMode::Multiple;
-                break;
-            case bb::cascades::pickers::ContactSelectionMode::Attribute:
-                mode = bb::cascades::pickers::ContactSelectionMode::Attribute;
-                break;
-            default:
-                result["_success"] = false;
-                result["code"] = INVALID_ARGUMENT_ERROR;
-                return result;
-        }
-
-        picker.setMode(mode);
-
-        if (args.isMember("fields") && !args["fields"].empty()) {
-            std::string fieldName;
-            StringToKindMap::iterator found;
-
-            if (_attributeKindMap.empty()) {
-                createAttributeKindMap();
-            }
-
-            for (unsigned int i = 0; i < args["fields"].size(); i++) {
-                fieldName = args["fields"][i].asString();
-
-                if ((found = _attributeKindMap.find(fieldName)) != _attributeKindMap.end()) {
-                    filters << found->second;
-                }
-            }
-
-            picker.setKindFilters(filters);
-        }
-
-        // cannot open picker if mode = attribute unless filters are specified
-        if (mode == bb::cascades::pickers::ContactSelectionMode::Attribute && filters.empty()) {
-            result["_success"] = false;
-            result["code"] = INVALID_ARGUMENT_ERROR;
-            return result;
-        }
-
-        if (args.isMember("title") && args["title"].isString()) {
-            picker.setTitle(QString(args["title"].asCString()));
-        }
-
-        if (args.isMember("confirmButtonLabel") && args["confirmButtonLabel"].isString()) {
-            picker.setConfirmButtonLabel(QString(args["confirmButtonLabel"].asCString()));
-        }
-
-        picker.open();
-
-        result["_success"] = true;
-        return result;
-    }
-
-    result["_success"] = false;
-    result["code"] = INVALID_ARGUMENT_ERROR;
-    return result;
-}
-
-Json::Value PimContactsQt::GetContactAccounts()
-{
-    Json::Value retVal;
-
-    retVal["accounts"] = Json::Value();
-    QList<bb::pim::account::Account> accounts = _contactAccount.GetContactAccounts();
-    for (int i = 0; i < accounts.size(); ++i) {
-        retVal["accounts"].append(ContactAccount::Account2Json(accounts[i]));
-    }
-    retVal["_success"] = true;
-    return retVal;
-}
-
-/****************************************************************
- * Helper functions for Find
- ****************************************************************/
-
-QList<bbpim::SearchField::Type> PimContactsQt::getSearchFields(const Json::Value& searchFieldsJson)
-{
-    QList<bbpim::SearchField::Type> searchFields;
-
-    switch (searchFieldsJson["fieldName"].asInt()) {
-        case bbpim::SearchField::FirstName:
-            searchFields.append(bbpim::SearchField::FirstName);
-            break;
-        case bbpim::SearchField::LastName:
-            searchFields.append(bbpim::SearchField::LastName);
-            break;
-        case bbpim::SearchField::CompanyName:
-            searchFields.append(bbpim::SearchField::CompanyName);
-            break;
-        case bbpim::SearchField::Phone:
-            searchFields.append(bbpim::SearchField::Phone);
-            break;
-        case bbpim::SearchField::Email:
-            searchFields.append(bbpim::SearchField::Email);
-            break;
-        case bbpim::SearchField::BBMPin:
-            searchFields.append(bbpim::SearchField::BBMPin);
-            break;
-        case bbpim::SearchField::LinkedIn:
-            searchFields.append(bbpim::SearchField::LinkedIn);
-            break;
-        case bbpim::SearchField::Twitter:
-            searchFields.append(bbpim::SearchField::Twitter);
-            break;
-        case bbpim::SearchField::VideoChat:
-            searchFields.append(bbpim::SearchField::VideoChat);
-            break;
-    }
-
-    return searchFields;
-}
-
-void PimContactsQt::getSortSpecs(const Json::Value& sort)
-{
-    _sortSpecs.clear();
-
-    if (sort.isArray()) {
-        for (unsigned int j = 0; j < sort.size(); j++) {
-            bbpim::SortOrder::Type order;
-            bbpim::SortColumn::Type sortField = bbpim::SortColumn::LastName;
-
-            if (sort[j]["desc"].asBool()) {
-                order = bbpim::SortOrder::Descending;
-            } else {
-                order = bbpim::SortOrder::Ascending;
-            }
-
-            switch (sort[j]["fieldName"].asInt()) {
-                case bbpim::SortColumn::FirstName:
-                    sortField = bbpim::SortColumn::FirstName;
-                    break;
-                case bbpim::SortColumn::LastName:
-                    sortField = bbpim::SortColumn::LastName;
-                    break;
-                case bbpim::SortColumn::CompanyName:
-                    sortField = bbpim::SortColumn::CompanyName;
-                    break;
-            }
-
-            _sortSpecs.append(bbpim::SortSpecifier(sortField, order));
-        }
-    }
-}
-
-QSet<bbpim::ContactId> PimContactsQt::getPartialSearchResults(const Json::Value& filter, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
-{
-    QSet<bbpim::ContactId> results;
-
-    _contactSearchMap.clear();
-
-    if (!filter.empty()) {
-        for (unsigned int j = 0; j < filter.size(); j++) {
-            QSet<bbpim::ContactId> currentResults = singleFieldSearch(filter[j], contactFields, favorite, includeAccounts, excludeAccounts);
-
-            if (currentResults.empty()) {
-                // no need to continue, can return right away
-                results = currentResults;
-                break;
-            } else {
-                if (j == 0) {
-                    results = currentResults;
-                } else {
-                    results.intersect(currentResults);
-                }
-            }
-        }
-    }
-
-    return results;
-}
-
-void PimContactsQt::getAccountFilters(bbpim::ContactSearchFilters* searchFilter, bbpim::ContactListFilters* listFilter, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
-{
-    if (!includeAccounts.empty() && includeAccounts.isArray()) {
-        QList<bbpim::AccountId> accountIds;
-
-        for (unsigned int i = 0; i < includeAccounts.size(); i++) {
-            accountIds << Utils::strToInt(includeAccounts[i].asString());
-        }
-
-        if (searchFilter != NULL) {
-            searchFilter->setHasAccounts(accountIds);
-        }
-
-        if (listFilter != NULL) {
-            listFilter->setHasAccounts(accountIds);
-        }
-    }
-
-    if (!excludeAccounts.empty() && excludeAccounts.isArray()) {
-        QList<bbpim::AccountId> accountIds;
-
-        for (unsigned int i = 0; i < excludeAccounts.size(); i++) {
-            accountIds << Utils::strToInt(excludeAccounts[i].asString());
-        }
-
-        if (searchFilter != NULL) {
-            searchFilter->setExcludeAccounts(accountIds);
-        }
-
-        if (listFilter != NULL) {
-            listFilter->setExcludeAccounts(accountIds);
-        }
-    }
-}
-
-QList<bbpim::AttributeKind::Type> PimContactsQt::getIncludeAttributesList(const Json::Value& contactFields, bbpim::ContactListFilters* listFilters)
-{
-    QList<bbpim::AttributeKind::Type> includeFields;
-
-    for (unsigned int i = 0; i < contactFields.size(); i++) {
-        // favorite is always included, no need to include
-        if (contactFields[i].asString() == "favorite") {
-            continue;
-        }
-
-        StringToKindMap::const_iterator kindIter = _attributeKindMap.find(contactFields[i].asString());
-
-        if (kindIter != _attributeKindMap.end()) {
-            // multiple fields can map to the same kind, only add kind to the list if it's not already added
-            if (includeFields.count(kindIter->second) == 0) {
-                includeFields.append(kindIter->second);
-            }
-        } else if (contactFields[i].asString() == "displayName" || contactFields[i].asString() == "nickname") {
-            // special case: displayName and nickname are first-level fields under Contact but only map to AttributeSubKind
-            if (includeFields.count(bbpim::AttributeKind::Name) == 0) {
-                includeFields.append(bbpim::AttributeKind::Name);
-            }
-        } else if (contactFields[i].asString() == "addresses") {
-            if (listFilters != NULL) {
-                listFilters->setIncludePostalAddress(true);
-            }
-        } else if (contactFields[i].asString() == "photos") {
-            if (listFilters != NULL) {
-                listFilters->setIncludePhotos(true);
-            }
-        }
-    }
-
-    return includeFields;
-}
-
-QSet<bbpim::ContactId> PimContactsQt::singleFieldSearch(const Json::Value& searchFieldsJson, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts)
-{
-    QList<bbpim::SearchField::Type> searchFields = PimContactsQt::getSearchFields(searchFieldsJson);
-    QSet<bbpim::ContactId> contactIds;
-
-    if (!searchFields.empty()) {
-        bbpim::ContactService contactService;
-        bbpim::ContactSearchFilters contactFilter;
-        QList<bbpim::Contact> results;
-
-        contactFilter.setSearchFields(searchFields);
-        contactFilter.setSearchValue(QString(searchFieldsJson["fieldValue"].asString().c_str()));
-
-        if (favorite) {
-            contactFilter.setIsFavourite(favorite);
-        }
-
-        contactFilter.setShowAttributes(true);
-        contactFilter.setIncludeAttributes(getIncludeAttributesList(contactFields));
-
-        getAccountFilters(&contactFilter, NULL, includeAccounts, excludeAccounts);
-
-        results = contactService.searchContacts(contactFilter);
-
-        for (int i = 0; i < results.size(); i++) {
-            contactIds.insert(results[i].id());
-            _contactSearchMap[results[i].id()] = results[i];
-        }
-    }
-
-    return contactIds;
-}
-
-QString PimContactsQt::getSortFieldValue(const bbpim::SortColumn::Type sort_field, const bbpim::Contact& contact)
-{
-    switch (sort_field) {
-        case bbpim::SortColumn::FirstName:
-            return contact.sortFirstName();
-        case bbpim::SortColumn::LastName:
-            return contact.sortLastName();
-        case bbpim::SortColumn::CompanyName:
-            return contact.sortCompanyName();
-    }
-
-    return QString();
-}
-
-bool PimContactsQt::lessThan(const bbpim::Contact& c1, const bbpim::Contact& c2)
-{
-    QList<bbpim::SortSpecifier>::const_iterator i = PimContactsQt::_sortSpecs.constBegin();
-    bbpim::SortSpecifier sortSpec;
-    QString val1, val2;
-
-    do {
-        sortSpec = *i;
-        val1 = PimContactsQt::getSortFieldValue(sortSpec.first, c1);
-        val2 = PimContactsQt::getSortFieldValue(sortSpec.first, c2);
-        ++i;
-    } while (val1 == val2 && i != PimContactsQt::_sortSpecs.constEnd());
-
-    if (sortSpec.second == bbpim::SortOrder::Ascending) {
-        return val1 < val2;
-    } else {
-        return !(val1 < val2);
-    }
-}
-
-Json::Value PimContactsQt::assembleSearchResults(const QSet<bbpim::ContactId>& resultIds, const Json::Value& contactFields, int limit)
-{
-    QMap<bbpim::ContactId, bbpim::Contact> completeResults;
-
-    // put complete contacts in map
-    for (QSet<bbpim::ContactId>::const_iterator i = resultIds.constBegin(); i != resultIds.constEnd(); i++) {
-        completeResults.insertMulti(*i, _contactSearchMap[*i]);
-    }
-
-    // sort results based on sort specs
-    QList<bbpim::Contact> sortedResults = completeResults.values();
-    if (!_sortSpecs.empty()) {
-        qSort(sortedResults.begin(), sortedResults.end(), lessThan);
-    }
-
-    Json::Value contactArray;
-
-    // if limit is -1, returned all available results, otherwise return based on the number passed in find options
-    if (limit == -1) {
-        limit = sortedResults.size();
-    } else {
-        limit = std::min(limit, sortedResults.size());
-    }
-
-    for (int i = 0; i < limit; i++) {
-        Json::Value contactItem = populateContact(sortedResults[i], contactFields);
-        contactArray.append(contactItem);
-    }
-
-    return contactArray;
-}
-
-std::string PimContactsQt::replaceAll(const std::string& s, const std::string& souce, const std::string& target) {
-    size_t start = 0;
-    std::string temp(s);
-    while ((start = temp.find(souce, start)) != std::string::npos) {
-        temp.replace(start, souce.length(), target);
-        start += target.length();
-    }
-    return temp;
-}
-std::string PimContactsQt::replaceString(const std::string& s) {
-    std::string temp = replaceAll(replaceAll(replaceAll(replaceAll(replaceAll(s), "\n", "\\\\n"), "\r", ""), "\t", "\\\\t"), "\"", "\"");
-    return temp;
-}
-
-/****************************************************************
- * Helper functions shared by Find and Save
- ****************************************************************/
-
-Json::Value PimContactsQt::populateContact(const bbpim::Contact& contact, const Json::Value& contactFields)
-{
-    Json::Value contactItem;
-
-    for (unsigned int i = 0; i < contactFields.size(); i++) {
-        std::string field = contactFields[i].asString();
-        StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
-
-        if (kindIter != _attributeKindMap.end()) {
-            switch (kindIter->second) {
-                case bbpim::AttributeKind::Name: {
-                    contactItem[field] = Json::Value();
-                    populateField(contact, kindIter->second, contactItem[field], false, false);
-                    break;
-                }
-
-                case bbpim::AttributeKind::OrganizationAffiliation: {
-                    contactItem[field] = Json::Value();
-                    populateOrganizations(contact, contactItem[field]);
-                    break;
-                }
-
-                case bbpim::AttributeKind::Date:
-                case bbpim::AttributeKind::Note:
-                case bbpim::AttributeKind::Sound: {
-                    populateField(contact, kindIter->second, contactItem, false, false);
-                    break;
-                }
-
-                case bbpim::AttributeKind::VideoChat: {
-                    contactItem[field] = Json::Value();
-                    populateField(contact, kindIter->second, contactItem[field], false, true);
-                    break;
-                }
-
-                case bbpim::AttributeKind::Email:
-                case bbpim::AttributeKind::Fax:
-                case bbpim::AttributeKind::Pager:
-                case bbpim::AttributeKind::Phone:
-                case bbpim::AttributeKind::Profile:
-                case bbpim::AttributeKind::Website:
-                case bbpim::AttributeKind::InstantMessaging: {
-                    contactItem[field] = Json::Value();
-                    populateField(contact, kindIter->second, contactItem[field], true, false);
-                    break;
-                }
-
-                // Special cases (treated differently in ContactBuilder):
-                default: {
-                    if (field == "addresses") {
-                        contactItem[field] = Json::Value();
-                        populateAddresses(contact, contactItem[field]);
-                    } else if (field == "photos") {
-                        contactItem[field] = Json::Value();
-                        populatePhotos(contact, contactItem[field]);
-                    } else if (field == "news") {
-                        contactItem[field] = Json::Value();
-                        populateNews(contact, contactItem[field]);
-                    } else if (field == "activities") {
-                        contactItem[field] = Json::Value();
-                        populateActivity(contact, contactItem[field]);
-                    }
-
-                    break;
-                }
-            }
-        } else {
-            if (field == "displayName" || field == "nickname") {
-                populateDisplayNameNickName(contact, contactItem, field);
-            }
-        }
-    }
-
-    contactItem["sourceAccounts"] = Json::Value();
-    // fetch sourceAccounts by sourceSourceIds
-    for (int i = 0; i < contact.sourceAccountIds().size(); ++i) {
-        bb::pim::account::AccountKey id = contact.sourceAccountIds()[i];
-        bb::pim::account::Account account = _contactAccount.GetAccount(id);
-        contactItem["sourceAccounts"].append(ContactAccount::Account2Json(account));
-    }
-
-    contactItem["id"] = Utils::intToStr(contact.id());
-    contactItem["favorite"] = Json::Value(contact.isFavourite()); // always populate favorite
-
-    return contactItem;
-}
-
-void PimContactsQt::populateField(const bbpim::Contact& contact, bbpim::AttributeKind::Type kind, Json::Value& contactItem, bool isContactField, bool isArray)
-{
-    QList<bbpim::ContactAttribute> attrs = contact.filteredAttributes(kind);
-
-    for (int i = 0; i < attrs.size(); i++) {
-        bbpim::ContactAttribute currentAttr = attrs[i];
-
-        // displayName and nickname are populated separately, do not populate within the name object
-        if (currentAttr.subKind() == bbpim::AttributeSubKind::NameDisplayName || currentAttr.subKind() == bbpim::AttributeSubKind::NameNickname) {
-            continue;
-        }
-
-        Json::Value val;
-        SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(currentAttr.subKind());
-
-        // Check note type first
-        if (kind == bbpim::AttributeKind::Note) {
-            std::string note = currentAttr.value().toStdString();
-            note = replaceString(note);
-            contactItem["note"] = Json::Value(note);
-            break;
-        } else if (typeIter != _subKindAttributeMap.end()) {
-            if (isContactField) {
-                val["type"] = Json::Value(typeIter->second);
-
-                std::string value = currentAttr.value().toStdString();
-                value = replaceString(value);
-
-                val["value"] = Json::Value(value);
-                contactItem.append(val);
-            } else {
-                if (isArray) {
-                    std::string value = currentAttr.value().toStdString();
-                    value = replaceString(value);
-
-                    val = Json::Value(value);
-                    contactItem.append(val);
-                } else {
-                    if (kind == bbpim::AttributeKind::Date) {
-                        QString format = "yyyy-MM-dd";
-                        contactItem[typeIter->second] = Json::Value(currentAttr.valueAsDateTime().date().toString(format).toStdString());
-                    } else {
-                        std::string value = currentAttr.value().toStdString();
-                        value = replaceString(value);
-                        contactItem[typeIter->second] = Json::Value(value);
-                    }
-                }
-            }
-        }
-    }
-}
-
-void PimContactsQt::populateDisplayNameNickName(const bbpim::Contact& contact, Json::Value& contactItem, const std::string& field)
-{
-    QList<QList<bbpim::ContactAttribute> > nameGroups = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::Name);
-    bbpim::AttributeSubKind::Type subkind = (field == "displayName" ? bbpim::AttributeSubKind::NameDisplayName : bbpim::AttributeSubKind::NameNickname);
-
-    if (!nameGroups.empty()) {
-        QList<bbpim::ContactAttribute> nameAttrs = nameGroups[0];
-
-        for (int i = 0; i < nameAttrs.size(); i++) {
-            bbpim::ContactAttribute currentAttr = nameAttrs[i];
-
-            if (currentAttr.subKind() == subkind) {
-                std::string value = currentAttr.value().toStdString();
-                value = replaceString(value);
-                contactItem[field] = Json::Value(value);
-                break;
-            }
-        }
-    }
-}
-
-void PimContactsQt::populateAddresses(const bbpim::Contact& contact, Json::Value& contactAddrs)
-{
-    bbpim::ContactService contactService;
-    bbpim::Contact fullContact = contactService.contactDetails(contact.id());
-    QList<bbpim::ContactPostalAddress> addrs = fullContact.postalAddresses();
-
-    for (int i = 0; i < addrs.size(); i++) {
-        bbpim::ContactPostalAddress currentAddr = addrs[i];
-        Json::Value addr;
-
-        SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(currentAddr.subKind());
-
-        if (typeIter != _subKindAttributeMap.end()) {
-            addr["type"] = Json::Value(typeIter->second);
-        }
-
-        addr["streetAddress"] = Json::Value(currentAddr.line1().toStdString());
-        addr["streetOther"] = Json::Value(currentAddr.line2().toStdString());
-        addr["country"] = Json::Value(currentAddr.country().toStdString());
-        addr["locality"] = Json::Value(currentAddr.city().toStdString());
-        addr["postalCode"] = Json::Value(currentAddr.postalCode().toStdString());
-        addr["region"] = Json::Value(currentAddr.region().toStdString());
-
-        contactAddrs.append(addr);
-    }
-}
-
-void PimContactsQt::populateOrganizations(const bbpim::Contact& contact, Json::Value& contactOrgs)
-{
-    QList<QList<bbpim::ContactAttribute> > orgAttrs = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::OrganizationAffiliation);
-
-    for (int i = 0; i < orgAttrs.size(); i++) {
-        QList<bbpim::ContactAttribute> currentOrgAttrs = orgAttrs[i];
-        Json::Value org;
-
-        for (int j = 0; j < currentOrgAttrs.size(); j++) {
-            bbpim::ContactAttribute attr = currentOrgAttrs[j];
-            SubKindToStringMap::const_iterator typeIter = _subKindAttributeMap.find(attr.subKind());
-
-            if (typeIter != _subKindAttributeMap.end()) {
-                std::string value = attr.value().toStdString();
-                value = replaceString(value);
-                org[typeIter->second] = Json::Value(value);
-            }
-        }
-
-        contactOrgs.append(org);
-    }
-}
-
-void PimContactsQt::populatePhotos(const bbpim::Contact& contact, Json::Value& contactPhotos)
-{
-    bbpim::ContactService contactService;
-    bbpim::Contact fullContact = contactService.contactDetails(contact.id());
-    QList<bbpim::ContactPhoto> photos = fullContact.photos();
-    bbpim::ContactPhoto primaryPhoto = fullContact.primaryPhoto();
-
-    for (int i = 0; i < photos.size(); i++) {
-        bbpim::ContactPhoto currentPhoto = photos[i];
-        Json::Value photo;
-
-        photo["originalFilePath"] = Json::Value(currentPhoto.originalPhoto().toStdString());
-        photo["largeFilePath"] = Json::Value(currentPhoto.largePhoto().toStdString());
-        photo["smallFilePath"] = Json::Value(currentPhoto.smallPhoto().toStdString());
-        photo["pref"] = Json::Value((primaryPhoto.id() == currentPhoto.id()));
-
-        contactPhotos.append(photo);
-    }
-}
-
-void PimContactsQt::populateNews(const bbpim::Contact& contact, Json::Value& contactNews)
-{
-    QList<bbpim::ContactNews> newsList = contact.news(5);
-    QList<bbpim::ContactNews>::const_iterator k = newsList.constBegin();
-
-    while (k != newsList.constEnd()) {
-        Json::Value news;
-        Json::Value companies;
-        QString format = "yyyy-MM-dd";
-
-        std::string body = k->body().toStdString();
-        body = replaceString(body);
-        news["body"] = Json::Value(body);
-
-        std::string title = k->title().toStdString();
-        title = replaceString(title);
-        news["title"] = Json::Value(title);
-
-        std::string articleSource = k->articleSource().toStdString();
-        articleSource = replaceString(articleSource);
-        news["articleSource"] = Json::Value(articleSource);
-
-        news["type"] = Json::Value(k->type().toStdString());
-        news["publishedAt"] = Json::Value(QString::number(k->publishedAt().toUTC().toMSecsSinceEpoch()).toStdString());
-        news["uri"] = Json::Value(k->uri().toString().toStdString());
-
-        QStringList companiesList = k->companies();
-        QStringList::const_iterator j = companiesList.constBegin();
-
-        while (j != companiesList.constEnd()) {
-            companies.append(j->toStdString());
-            ++j;
-        }
-
-        news["companies"] = companies;
-
-        contactNews.append(news);
-        ++k;
-    }
-}
-
-void PimContactsQt::populateActivity(const bbpim::Contact& contact, Json::Value& contactActivity)
-{
-    QList<bbpim::ContactActivity> activities = contact.activities();
-    QList<bbpim::ContactActivity>::const_iterator k = activities.constBegin();
-
-    while (k != activities.constEnd()) {
-        Json::Value activity;
-
-        std::string desc = k->description().toStdString();
-        desc = replaceString(desc);
-
-        activity["description"] = Json::Value(desc);
-        activity["direction"] = Json::Value(k->direction());
-        activity["mimeType"] = Json::Value(k->mimeType().toStdString());
-        activity["timestamp"] = Json::Value(QString::number(k->statusTimeStamp().toUTC().toMSecsSinceEpoch()).toStdString());
-
-        contactActivity.append(activity);
-        ++k;
-    }
-}
-
-/****************************************************************
- * Helper functions for Save
- ****************************************************************/
-
-void PimContactsQt::addAttributeKind(bbpim::ContactBuilder& contactBuilder, const Json::Value& jsonObj, const std::string& field)
-{
-    StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
-
-    if (kindIter != _attributeKindMap.end()) {
-        switch (kindIter->second) {
-            // Attributes requiring group keys:
-            case bbpim::AttributeKind::Name: {
-                QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj);
-                addConvertedList(contactBuilder, kindIter->second, convertedList, "1");
-                break;
-            }
-            case bbpim::AttributeKind::OrganizationAffiliation: {
-                for (unsigned int i = 0; i < jsonObj.size(); i++) {
-                    std::stringstream groupKeyStream;
-                    groupKeyStream << i + 1;
-
-                    QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
-                    addConvertedList(contactBuilder, kindIter->second, convertedList, groupKeyStream.str());
-                }
-
-                break;
-            }
-
-            // String arrays:
-            case bbpim::AttributeKind::VideoChat: {
-                QList<SubkindValuePair> convertedList = convertStringArray(jsonObj, bbpim::AttributeSubKind::VideoChatBbPlaybook);
-                addConvertedList(contactBuilder, kindIter->second, convertedList);
-                break;
-            }
-
-            // Dates:
-            case bbpim::AttributeKind::Date: {
-                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-                if (subkindIter != _attributeSubKindMap.end()) {
-                    std::string value = jsonObj.asString();
-                    addAttribute(contactBuilder, kindIter->second, subkindIter->second, value);
-                }
-
-                break;
-            }
-
-            // Strings:
-            case bbpim::AttributeKind::Note:
-            case bbpim::AttributeKind::Sound: {
-                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-                if (subkindIter != _attributeSubKindMap.end()) {
-                    QList<SubkindValuePair> convertedList;
-                    std::string value = jsonObj.asString();
-                    convertedList.append(SubkindValuePair(subkindIter->second, value));
-                    addConvertedList(contactBuilder, kindIter->second, convertedList);
-                }
-
-                break;
-            }
-
-            // ContactField attributes:
-            case bbpim::AttributeKind::Phone:
-            case bbpim::AttributeKind::Email:
-            case bbpim::AttributeKind::Fax:
-            case bbpim::AttributeKind::Pager:
-            case bbpim::AttributeKind::InstantMessaging:
-            case bbpim::AttributeKind::Website:
-            case bbpim::AttributeKind::Group:
-            case bbpim::AttributeKind::Profile: {
-                QList<SubkindValuePair> convertedList = convertFieldAttributes(jsonObj);
-                addConvertedList(contactBuilder, kindIter->second, convertedList);
-                break;
-            }
-
-            // Special cases (treated differently in ContactBuilder):
-            default: {
-                if (field == "addresses") {
-                    for (unsigned int i = 0; i < jsonObj.size(); i++) {
-                        Json::Value addressObj = jsonObj[i];
-                        addPostalAddress(contactBuilder, addressObj);
-                    }
-                } else if (field == "photos") {
-                    for (unsigned int i = 0; i < jsonObj.size(); i++) {
-                        Json::Value photoObj = jsonObj[i];
-                        addPhoto(contactBuilder, photoObj);
-                    }
-                } else if (field == "favorite") {
-                    bool isFavorite = jsonObj.asBool();
-                    contactBuilder = contactBuilder.setFavorite(isFavorite);
-                }
-
-                break;
-            }
-        }
-    } else if (field == "displayName" || field == "nickname") {
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            addAttribute(contactBuilder, bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
-        }
-    }
-}
-
-void PimContactsQt::syncAttributeKind(bbpim::Contact& contact, const Json::Value& jsonObj, const std::string& field)
-{
-    StringToKindMap::const_iterator kindIter = _attributeKindMap.find(field);
-    bbpim::ContactBuilder contactBuilder(contact.edit());
-
-    if (kindIter != _attributeKindMap.end()) {
-        switch (kindIter->second) {
-            // Attributes requiring group keys:
-            case bbpim::AttributeKind::Name: {
-                QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(kindIter->second);
-                QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj);
-
-                if (!savedList.empty()) {
-                    syncConvertedList(contactBuilder, kindIter->second, savedList[0], convertedList, "1");
-                } else {
-                    addConvertedList(contactBuilder, kindIter->second, convertedList, "1");
-                }
-
-                break;
-            }
-            case bbpim::AttributeKind::OrganizationAffiliation: {
-                QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(kindIter->second);
-                syncAttributeGroup(contactBuilder, kindIter->second, savedList, jsonObj);
-                break;
-            }
-
-            // String arrays:
-            case bbpim::AttributeKind::VideoChat: {
-                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
-                QList<SubkindValuePair> convertedList = convertStringArray(jsonObj, bbpim::AttributeSubKind::VideoChatBbPlaybook);
-                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
-                break;
-            }
-
-            // Dates:
-            case bbpim::AttributeKind::Date: {
-                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-                if (subkindIter != _attributeSubKindMap.end()) {
-                    QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
-                    syncAttribute(contactBuilder, savedList, kindIter->second, subkindIter->second, jsonObj.asString());
-                }
-
-                break;
-            }
-
-            // Strings:
-            case bbpim::AttributeKind::Note:
-            case bbpim::AttributeKind::Sound: {
-                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
-                QList<SubkindValuePair> convertedList;
-                StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-                if (subkindIter != _attributeSubKindMap.end()) {
-                    std::string value = jsonObj.asString();
-                    convertedList.append(SubkindValuePair(subkindIter->second, value));
-                }
-
-                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
-                break;
-            }
-
-            // ContactField attributes:
-            case bbpim::AttributeKind::Phone:
-            case bbpim::AttributeKind::Email:
-            case bbpim::AttributeKind::Fax:
-            case bbpim::AttributeKind::Pager:
-            case bbpim::AttributeKind::InstantMessaging:
-            case bbpim::AttributeKind::Website:
-            case bbpim::AttributeKind::Group:
-            case bbpim::AttributeKind::Profile: {
-                QList<bbpim::ContactAttribute> savedList = contact.filteredAttributes(kindIter->second);
-                QList<SubkindValuePair> convertedList = convertFieldAttributes(jsonObj);
-                syncConvertedList(contactBuilder, kindIter->second, savedList, convertedList);
-                break;
-            }
-
-            // Special cases (treated differently in ContactBuilder):
-            default: {
-                if (field == "addresses") {
-                    QList<bbpim::ContactPostalAddress> savedList = contact.postalAddresses();
-                    syncPostalAddresses(contactBuilder, savedList, jsonObj);
-                } else if (field == "photos") {
-                    QList<bbpim::ContactPhoto> savedList = contact.photos();
-                    syncPhotos(contactBuilder, savedList, jsonObj, contact.primaryPhoto());
-
-                } else if (field == "favorite") {
-                    bool isFavorite = jsonObj.asBool();
-                    contactBuilder.setFavorite(isFavorite);
-                }
-
-                break;
-            }
-        }
-    } else if (field == "displayName" || field == "nickname") {
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(field);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            QList<QList<bbpim::ContactAttribute> > savedList = contact.filteredAttributesByGroupKey(bbpim::AttributeKind::Name);
-
-            if (!savedList.empty()) {
-                syncAttribute(contactBuilder, savedList[0], bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
-            } else {
-                addAttribute(contactBuilder, bbpim::AttributeKind::Name, subkindIter->second, jsonObj.asString(), "1");
-            }
-        }
-    }
-}
-
-
-QList<SubkindValuePair> PimContactsQt::convertGroupedAttributes(const Json::Value& fieldsObj)
-{
-    const Json::Value::Members fields = fieldsObj.getMemberNames();
-    QList<SubkindValuePair> convertedList;
-
-    for (unsigned int i = 0; i < fields.size(); i++) {
-        const std::string fieldKey = fields[i];
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(fieldKey);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            convertedList.append(SubkindValuePair(subkindIter->second, fieldsObj[fieldKey].asString()));
-        }
-    }
-
-    return convertedList;
-}
-
-QList<SubkindValuePair> PimContactsQt::convertFieldAttributes(const Json::Value& fieldArray)
-{
-    QList<SubkindValuePair> convertedList;
-
-    for (unsigned int i = 0; i < fieldArray.size(); i++) {
-        Json::Value fieldObj = fieldArray[i];
-        std::string type = fieldObj.get("type", "").asString();
-        std::string value = fieldObj.get("value", "").asString();
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(type);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            convertedList.append(SubkindValuePair(subkindIter->second, value));
-        }
-    }
-
-    return convertedList;
-}
-
-QList<SubkindValuePair> PimContactsQt::convertStringArray(const Json::Value& stringArray, bbpim::AttributeSubKind::Type subkind)
-{
-    QList<SubkindValuePair> convertedList;
-
-    for (unsigned int i = 0; i < stringArray.size(); i++) {
-        std::string value = stringArray[i].asString();
-        convertedList.append(SubkindValuePair(subkind, value));
-    }
-
-    return convertedList;
-}
-
-void PimContactsQt::addConvertedList(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const QList<SubkindValuePair>& convertedList, const std::string& groupKey)
-{
-    for (int i = 0; i < convertedList.size(); i++) {
-        addAttribute(contactBuilder, kind, convertedList[i].first, convertedList[i].second, groupKey);
-    }
-}
-
-void PimContactsQt::addAttribute(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey)
-{
-    bbpim::ContactAttribute attribute;
-    bbpim::ContactAttributeBuilder attributeBuilder(attribute.edit());
-
-    attributeBuilder = attributeBuilder.setKind(kind);
-    attributeBuilder = attributeBuilder.setSubKind(subkind);
-
-    if (kind == bbpim::AttributeKind::Date) {
-        QDateTime date = QDateTime::fromString(QString(value.c_str()), QString("ddd MMM dd yyyy"));
-
-        if (date.isValid()) {
-            attributeBuilder = attributeBuilder.setValue(date);
-        } else {
-            attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
-        }
-    } else {
-        attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
-    }
-
-    if (!groupKey.empty()) {
-        attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
-    }
-
-    contactBuilder.addAttribute(attribute);
-}
-
-void PimContactsQt::addPostalAddress(bbpim::ContactBuilder& contactBuilder, const Json::Value& addressObj)
-{
-    bbpim::ContactPostalAddress address;
-    bbpim::ContactPostalAddressBuilder addressBuilder(address.edit());
-
-    if (addressObj.isMember("type")) {
-        std::string value = addressObj["type"].asString();
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(value);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            addressBuilder = addressBuilder.setSubKind(subkindIter->second);
-        }
-    }
-
-    addressBuilder = addressBuilder.setLine1(QString(addressObj.get("streetAddress", "").asCString()));
-    addressBuilder = addressBuilder.setLine2(QString(addressObj.get("streetOther", "").asCString()));
-    addressBuilder = addressBuilder.setCity(QString(addressObj.get("locality", "").asCString()));
-    addressBuilder = addressBuilder.setRegion(QString(addressObj.get("region", "").asCString()));
-    addressBuilder = addressBuilder.setCountry(QString(addressObj.get("country", "").asCString()));
-    addressBuilder = addressBuilder.setPostalCode(QString(addressObj.get("postalCode", "").asCString()));
-
-    contactBuilder = contactBuilder.addPostalAddress(address);
-}
-
-void PimContactsQt::addPhoto(bbpim::ContactBuilder& contactBuilder, const Json::Value& photoObj)
-{
-    bbpim::ContactPhoto photo;
-    bbpim::ContactPhotoBuilder photoBuilder(photo.edit());
-
-    std::string filepath = photoObj.get("originalFilePath", "").asString();
-    bool pref = photoObj.get("pref", false).asBool();
-
-    photoBuilder.setOriginalPhoto(QString(filepath.c_str()));
-    photoBuilder.setPrimaryPhoto(pref);
-
-    contactBuilder = contactBuilder.addPhoto(photo, pref);
-}
-
-void PimContactsQt::syncConvertedList(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<bbpim::ContactAttribute>& savedList, const QList<SubkindValuePair>& convertedList, const std::string& groupKey)
-{
-    int index;
-
-    for (index = 0; index < savedList.size() && index < convertedList.size(); index++) {
-        // Do not overwrite display name or nickname when syncing name
-        if (kind == bbpim::AttributeKind::Name &&
-            (savedList[index].subKind() == bbpim::AttributeSubKind::NameNickname ||
-             savedList[index].subKind() == bbpim::AttributeSubKind::NameDisplayName)) {
-            addAttribute(contactBuilder, kind, convertedList[index].first, convertedList[index].second, groupKey);
-        } else {
-            bbpim::ContactAttributeBuilder attributeBuilder(savedList[index].edit());
-            attributeBuilder = attributeBuilder.setSubKind(convertedList[index].first);
-            attributeBuilder = attributeBuilder.setValue(QString(convertedList[index].second.c_str()));
-
-            if (!groupKey.empty()) {
-                attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
-            }
-        }
-    }
-
-    if (index < savedList.size()) {
-        for (; index < savedList.size(); index++) {
-            // Do not delete display name or nickname when syncing name
-            if (savedList[index].subKind() != bbpim::AttributeSubKind::NameNickname &&
-                savedList[index].subKind() != bbpim::AttributeSubKind::NameDisplayName) {
-                contactBuilder = contactBuilder.deleteAttribute(savedList[index]);
-            }
-        }
-    } else if (index < convertedList.size()) {
-        for (; index < convertedList.size(); index++) {
-            QList<SubkindValuePair> remainingList = convertedList.mid(index);
-            addConvertedList(contactBuilder, kind, remainingList, groupKey);
-        }
-    }
-}
-
-void PimContactsQt::syncAttributeGroup(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<QList<bbpim::ContactAttribute> > savedList, const Json::Value& jsonObj)
-{
-    int i;
-
-    for (i = 0; i < static_cast<int>(jsonObj.size()) && i < savedList.size(); i++) {
-        std::stringstream groupKeyStream;
-        groupKeyStream << i + 1;
-
-        QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
-        syncConvertedList(contactBuilder, kind, savedList[i], convertedList, groupKeyStream.str());
-    }
-
-    if (i < savedList.size()) {
-        for (; i < savedList.size(); i++) {
-            for (int j = 0; j < savedList[i].size(); j++) {
-                contactBuilder = contactBuilder.deleteAttribute(savedList[i][j]);
-            }
-        }
-    } else if (i < static_cast<int>(jsonObj.size())) {
-        for (; i < static_cast<int>(jsonObj.size()); i++) {
-            std::stringstream groupKeyStream;
-            groupKeyStream << i + 1;
-
-            QList<SubkindValuePair> convertedList = convertGroupedAttributes(jsonObj[i]);
-            addConvertedList(contactBuilder, kind, convertedList, groupKeyStream.str());
-        }
-    }
-}
-
-void PimContactsQt::syncAttribute(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactAttribute>& savedList, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey)
-{
-    bool found = false;
-
-    for (int i = 0; i < savedList.size() && !found; i++) {
-        if (savedList[i].subKind() == subkind) {
-            bbpim::ContactAttributeBuilder attributeBuilder(savedList[i].edit());
-
-            if (kind == bbpim::AttributeKind::Date) {
-                QDateTime date = QDateTime::fromString(QString(value.c_str()), QString("ddd MMM dd yyyy"));
-
-                if (date.isValid()) {
-                    attributeBuilder = attributeBuilder.setValue(date);
-                } else {
-                    attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
-                }
-            } else {
-                attributeBuilder = attributeBuilder.setValue(QString(value.c_str()));
-
-                if (!groupKey.empty()) {
-                    attributeBuilder = attributeBuilder.setGroupKey(QString(groupKey.c_str()));
-                }
-            }
-
-            found = true;
-        }
-    }
-
-    if (!found) {
-        addAttribute(contactBuilder, kind, subkind, value, groupKey);
-    }
-}
-
-void PimContactsQt::syncPostalAddresses(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPostalAddress>& savedList, const Json::Value& jsonObj)
-{
-    int i;
-
-    for (i = 0; i < savedList.size() && i < static_cast<int>(jsonObj.size()); i++) {
-        Json::Value addressObj = jsonObj[i];
-        bbpim::ContactPostalAddressBuilder addressBuilder(savedList[i].edit());
-
-        std::string type = addressObj.get("type", "other").asString();
-        StringToSubKindMap::const_iterator subkindIter = _attributeSubKindMap.find(type);
-
-        if (subkindIter != _attributeSubKindMap.end()) {
-            addressBuilder = addressBuilder.setSubKind(subkindIter->second);
-        }
-
-        addressBuilder = addressBuilder.setLine1(QString(addressObj.get("streetAddress", "").asCString()));
-        addressBuilder = addressBuilder.setLine2(QString(addressObj.get("streetOther", "").asCString()));
-        addressBuilder = addressBuilder.setCity(QString(addressObj.get("locality", "").asCString()));
-        addressBuilder = addressBuilder.setRegion(QString(addressObj.get("region", "").asCString()));
-        addressBuilder = addressBuilder.setCountry(QString(addressObj.get("country", "").asCString()));
-        addressBuilder = addressBuilder.setPostalCode(QString(addressObj.get("postalCode", "").asCString()));
-    }
-
-    if (i < savedList.size()) {
-        for (; i < savedList.size(); i++) {
-            contactBuilder = contactBuilder.deletePostalAddress(savedList[i]);
-        }
-    } else if (i < static_cast<int>(jsonObj.size())) {
-        for (; i < static_cast<int>(jsonObj.size()); i++) {
-            addPostalAddress(contactBuilder, jsonObj[i]);
-        }
-    }
-}
-
-void PimContactsQt::syncPhotos(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPhoto>& savedList, const Json::Value& jsonObj, const bbpim::ContactPhoto& primaryPhoto)
-{
-    int i;
-
-    // We must do the delete first, because there seems to be a problem if we do it after
-    if (savedList.size() > static_cast<int>(jsonObj.size())) {
-        for (i = jsonObj.size(); i < savedList.size(); i++) {
-            contactBuilder = contactBuilder.deletePhoto(savedList[i]);
-        }
-    }
-
-    for (i = 0; i < savedList.size() && i < static_cast<int>(jsonObj.size()); i++) {
-        std::string filepath = jsonObj[i].get("originalFilePath", "").asString();
-        bool pref = jsonObj[i].get("pref", false).asBool();
-
-        if (filepath != savedList[i].originalPhoto().toStdString()) {
-            contactBuilder = contactBuilder.deletePhoto(savedList[i]);
-            addPhoto(contactBuilder, jsonObj[i]);
-        } else if (pref != (primaryPhoto.id() == savedList[i].id())) {
-            bbpim::ContactPhotoBuilder photoBuilder = savedList[i].edit();
-            photoBuilder.setPrimaryPhoto(pref);
-        }
-    }
-
-    if (i < static_cast<int>(jsonObj.size())) {
-        for (; i < static_cast<int>(jsonObj.size()); i++) {
-            addPhoto(contactBuilder, jsonObj[i]);
-        }
-    }
-}
-
-/****************************************************************
- * Mapping functions
- ****************************************************************/
-
-void PimContactsQt::createAttributeKindMap()
-{
-    _attributeKindMap["phoneNumbers"] = bbpim::AttributeKind::Phone;
-    _attributeKindMap["faxNumbers"] = bbpim::AttributeKind::Fax;
-    _attributeKindMap["pagerNumbers"] = bbpim::AttributeKind::Pager;
-    _attributeKindMap["emails"] = bbpim::AttributeKind::Email;
-    _attributeKindMap["urls"] = bbpim::AttributeKind::Website;
-    _attributeKindMap["socialNetworks"] = bbpim::AttributeKind::Profile;
-    _attributeKindMap["anniversary"] = bbpim::AttributeKind::Date;
-    _attributeKindMap["birthday"] = bbpim::AttributeKind::Date;
-    _attributeKindMap["categories"] = bbpim::AttributeKind::Group;
-    _attributeKindMap["name"] = bbpim::AttributeKind::Name;
-    _attributeKindMap["organizations"] = bbpim::AttributeKind::OrganizationAffiliation;
-    _attributeKindMap["education"] = bbpim::AttributeKind::Education;
-    _attributeKindMap["note"] = bbpim::AttributeKind::Note;
-    _attributeKindMap["ims"] = bbpim::AttributeKind::InstantMessaging;
-    _attributeKindMap["ringtone"] = bbpim::AttributeKind::Sound;
-    _attributeKindMap["videoChat"] = bbpim::AttributeKind::VideoChat;
-    _attributeKindMap["addresses"] = bbpim::AttributeKind::Invalid;
-    _attributeKindMap["favorite"] = bbpim::AttributeKind::Invalid;
-    _attributeKindMap["photos"] = bbpim::AttributeKind::Invalid;
-    _attributeKindMap["news"] = bbpim::AttributeKind::Invalid;
-    _attributeKindMap["activities"] = bbpim::AttributeKind::Invalid;
-}
-
-void PimContactsQt::createAttributeSubKindMap()
-{
-    _attributeSubKindMap["other"] = bbpim::AttributeSubKind::Other;
-    _attributeSubKindMap["home"] = bbpim::AttributeSubKind::Home;
-    _attributeSubKindMap["work"] = bbpim::AttributeSubKind::Work;
-    _attributeSubKindMap["mobile"] = bbpim::AttributeSubKind::PhoneMobile;
-    _attributeSubKindMap["direct"] = bbpim::AttributeSubKind::FaxDirect;
-    _attributeSubKindMap["blog"] = bbpim::AttributeSubKind::Blog;
-    _attributeSubKindMap["resume"] = bbpim::AttributeSubKind::WebsiteResume;
-    _attributeSubKindMap["portfolio"] = bbpim::AttributeSubKind::WebsitePortfolio;
-    _attributeSubKindMap["personal"] = bbpim::AttributeSubKind::WebsitePersonal;
-    _attributeSubKindMap["company"] = bbpim::AttributeSubKind::WebsiteCompany;
-    _attributeSubKindMap["facebook"] = bbpim::AttributeSubKind::ProfileFacebook;
-    _attributeSubKindMap["twitter"] = bbpim::AttributeSubKind::ProfileTwitter;
-    _attributeSubKindMap["linkedin"] = bbpim::AttributeSubKind::ProfileLinkedIn;
-    _attributeSubKindMap["gist"] = bbpim::AttributeSubKind::ProfileGist;
-    _attributeSubKindMap["tungle"] = bbpim::AttributeSubKind::ProfileTungle;
-    _attributeSubKindMap["birthday"] = bbpim::AttributeSubKind::DateBirthday;
-    _attributeSubKindMap["anniversary"] = bbpim::AttributeSubKind::DateAnniversary;
-    _attributeSubKindMap["categories"] = bbpim::AttributeSubKind::GroupDepartment;
-    _attributeSubKindMap["givenName"] = bbpim::AttributeSubKind::NameGiven;
-    _attributeSubKindMap["familyName"] = bbpim::AttributeSubKind::NameSurname;
-    _attributeSubKindMap["honorificPrefix"] = bbpim::AttributeSubKind::Title;
-    _attributeSubKindMap["honorificSuffix"] = bbpim::AttributeSubKind::NameSuffix;
-    _attributeSubKindMap["middleName"] = bbpim::AttributeSubKind::NameMiddle;
-    _attributeSubKindMap["nickname"] = bbpim::AttributeSubKind::NameNickname;
-    _attributeSubKindMap["displayName"] = bbpim::AttributeSubKind::NameDisplayName;
-    _attributeSubKindMap["phoneticGivenName"] = bbpim::AttributeSubKind::NamePhoneticGiven;
-    _attributeSubKindMap["phoneticFamilyName"] = bbpim::AttributeSubKind::NamePhoneticSurname;
-    _attributeSubKindMap["name"] = bbpim::AttributeSubKind::OrganizationAffiliationName;
-    _attributeSubKindMap["department"] = bbpim::AttributeSubKind::OrganizationAffiliationDetails;
-    _attributeSubKindMap["title"] = bbpim::AttributeSubKind::Title;
-    _attributeSubKindMap["BbmPin"] = bbpim::AttributeSubKind::InstantMessagingBbmPin;
-    _attributeSubKindMap["Aim"] = bbpim::AttributeSubKind::InstantMessagingAim;
-    _attributeSubKindMap["Aliwangwang"] = bbpim::AttributeSubKind::InstantMessagingAliwangwang;
-    _attributeSubKindMap["GoogleTalk"] = bbpim::AttributeSubKind::InstantMessagingGoogleTalk;
-    _attributeSubKindMap["Sametime"] = bbpim::AttributeSubKind::InstantMessagingSametime;
-    _attributeSubKindMap["Icq"] = bbpim::AttributeSubKind::InstantMessagingIcq;
-    _attributeSubKindMap["Jabber"] = bbpim::AttributeSubKind::InstantMessagingJabber;
-    _attributeSubKindMap["MsLcs"] = bbpim::AttributeSubKind::InstantMessagingMsLcs;
-    _attributeSubKindMap["Skype"] = bbpim::AttributeSubKind::InstantMessagingSkype;
-    _attributeSubKindMap["YahooMessenger"] = bbpim::AttributeSubKind::InstantMessagingYahooMessenger;
-    _attributeSubKindMap["YahooMessegerJapan"] = bbpim::AttributeSubKind::InstantMessagingYahooMessengerJapan;
-    _attributeSubKindMap["BbPlaybook"] = bbpim::AttributeSubKind::VideoChatBbPlaybook;
-    _attributeSubKindMap["ringtone"] = bbpim::AttributeSubKind::SoundRingtone;
-    _attributeSubKindMap["note"] = bbpim::AttributeSubKind::Other;
-}
-
-void PimContactsQt::createKindAttributeMap() {
-    _kindAttributeMap[bbpim::AttributeKind::Phone] = "phoneNumbers";
-    _kindAttributeMap[bbpim::AttributeKind::Fax] = "faxNumbers";
-    _kindAttributeMap[bbpim::AttributeKind::Pager] = "pagerNumber";
-    _kindAttributeMap[bbpim::AttributeKind::Email] = "emails";
-    _kindAttributeMap[bbpim::AttributeKind::Website] = "urls";
-    _kindAttributeMap[bbpim::AttributeKind::Profile] = "socialNetworks";
-    _kindAttributeMap[bbpim::AttributeKind::OrganizationAffiliation] = "organizations";
-    _kindAttributeMap[bbpim::AttributeKind::Education] = "education";
-    _kindAttributeMap[bbpim::AttributeKind::Note] = "note";
-    _kindAttributeMap[bbpim::AttributeKind::InstantMessaging] = "ims";
-    _kindAttributeMap[bbpim::AttributeKind::VideoChat] = "videoChat";
-    _kindAttributeMap[bbpim::AttributeKind::Sound] = "ringtone";
-    _kindAttributeMap[bbpim::AttributeKind::Website] = "urls";
-}
-
-void PimContactsQt::createSubKindAttributeMap() {
-    _subKindAttributeMap[bbpim::AttributeSubKind::Other] = "other";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Home] = "home";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Work] = "work";
-    _subKindAttributeMap[bbpim::AttributeSubKind::PhoneMobile] = "mobile";
-    _subKindAttributeMap[bbpim::AttributeSubKind::FaxDirect] = "direct";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Blog] = "blog";
-    _subKindAttributeMap[bbpim::AttributeSubKind::WebsiteResume] = "resume";
-    _subKindAttributeMap[bbpim::AttributeSubKind::WebsitePortfolio] = "portfolio";
-    _subKindAttributeMap[bbpim::AttributeSubKind::WebsitePersonal] = "personal";
-    _subKindAttributeMap[bbpim::AttributeSubKind::WebsiteCompany] = "company";
-    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileFacebook] = "facebook";
-    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileTwitter] = "twitter";
-    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileLinkedIn] = "linkedin";
-    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileGist] = "gist";
-    _subKindAttributeMap[bbpim::AttributeSubKind::ProfileTungle] = "tungle";
-    _subKindAttributeMap[bbpim::AttributeSubKind::DateBirthday] = "birthday";
-    _subKindAttributeMap[bbpim::AttributeSubKind::DateAnniversary] = "anniversary";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameGiven] = "givenName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameSurname] = "familyName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Title] = "honorificPrefix";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameSuffix] = "honorificSuffix";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameMiddle] = "middleName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NamePhoneticGiven] = "phoneticGivenName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NamePhoneticSurname] = "phoneticFamilyName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameNickname] = "nickname";
-    _subKindAttributeMap[bbpim::AttributeSubKind::NameDisplayName] = "displayName";
-    _subKindAttributeMap[bbpim::AttributeSubKind::OrganizationAffiliationName] = "name";
-    _subKindAttributeMap[bbpim::AttributeSubKind::OrganizationAffiliationDetails] = "department";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Title] = "title";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingBbmPin] = "BbmPin";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingAim] = "Aim";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingAliwangwang] = "Aliwangwang";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingGoogleTalk] = "GoogleTalk";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingSametime] = "Sametime";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingIcq] = "Icq";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingJabber] = "Jabber";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingMsLcs] = "MsLcs";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingSkype] = "Skype";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingYahooMessenger] = "YahooMessenger";
-    _subKindAttributeMap[bbpim::AttributeSubKind::InstantMessagingYahooMessengerJapan] = "YahooMessegerJapan";
-    _subKindAttributeMap[bbpim::AttributeSubKind::VideoChatBbPlaybook] = "BbPlaybook";
-    _subKindAttributeMap[bbpim::AttributeSubKind::SoundRingtone] = "ringtone";
-    _subKindAttributeMap[bbpim::AttributeSubKind::Personal] = "personal";
-}
-
-} // namespace webworks
-
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.hpp b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.hpp
deleted file mode 100644
index 115469c..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/pim_contacts_qt.hpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef PIM_CONTACTS_QT_H_
-#define PIM_CONTACTS_QT_H_
-
-#include <json/value.h>
-#include <bb/pim/contacts/ContactService.hpp>
-#include <bb/pim/contacts/ContactConsts.hpp>
-#include <bb/pim/contacts/Contact.hpp>
-#include <bb/pim/contacts/ContactBuilder.hpp>
-#include <bb/pim/contacts/ContactAttribute.hpp>
-#include <bb/pim/contacts/ContactAttributeBuilder.hpp>
-#include <bb/pim/contacts/ContactPostalAddress.hpp>
-#include <bb/pim/contacts/ContactPostalAddressBuilder.hpp>
-#include <bb/pim/contacts/ContactPhoto.hpp>
-#include <bb/pim/contacts/ContactPhotoBuilder.hpp>
-#include <bb/pim/contacts/ContactListFilters.hpp>
-#include <bb/pim/account/AccountService.hpp>
-#include <bb/pim/account/Account.hpp>
-#include <bb/pim/account/Provider>
-#include <webworks_utils.hpp>
-
-#include <string>
-#include <utility>
-#include <map>
-
-#include "contact_account.hpp"
-
-class PimContacts;
-
-namespace webworks {
-
-namespace bbpim = bb::pim::contacts;
-namespace bbpimacc = bb::pim::account;
-
-typedef std::map<std::string, bbpim::AttributeKind::Type> StringToKindMap;
-typedef std::map<std::string, bbpim::AttributeSubKind::Type> StringToSubKindMap;
-typedef std::map<bbpim::AttributeKind::Type, std::string> KindToStringMap;
-typedef std::map<bbpim::AttributeSubKind::Type, std::string> SubKindToStringMap;
-
-typedef std::pair<bbpim::AttributeSubKind::Type, std::string> SubkindValuePair;
-
-enum PimContactsError {
-    UNKNOWN_ERROR = 0,
-    INVALID_ARGUMENT_ERROR = 1,
-    TIMEOUT_ERROR = 2,
-    PENDING_OPERATION_ERROR = 3,
-    IO_ERROR = 4,
-    NOT_SUPPORTED_ERROR = 5,
-    PERMISSION_DENIED_ERROR = 20,
-};
-
-struct PimContactsThreadInfo {
-    PimContacts *parent;
-    Json::Value *jsonObj;
-    std::string eventId;
-};
-
-class PimContactsQt {
-public:
-    PimContactsQt();
-    ~PimContactsQt();
-    Json::Value Find(const Json::Value& argsObj);
-    Json::Value Save(const Json::Value& attributeObj);
-    Json::Value CreateContact(const Json::Value& attributeObj);
-    Json::Value DeleteContact(const Json::Value& contactObj);
-    Json::Value EditContact(bbpim::Contact& contact, const Json::Value& attributeObj);
-    Json::Value CloneContact(bbpim::Contact& contact, const Json::Value& attributeObj);
-    Json::Value GetContact(const Json::Value& argsObj);
-    static Json::Value InvokePicker(const Json::Value& args);
-    static Json::Value GetContactAccounts();
-
-private:
-    // Helper functions for Find
-    Json::Value assembleSearchResults(const QSet<bbpim::ContactId>& results, const Json::Value& contactFields, int limit);
-    Json::Value populateContact(const bbpim::Contact& contact, const Json::Value& contactFields);
-    void populateField(const bbpim::Contact& contact, bbpim::AttributeKind::Type kind, Json::Value& contactItem, bool isContactField, bool isArray);
-    void populateDisplayNameNickName(const bbpim::Contact& contact, Json::Value& contactItem, const std::string& field);
-    void populateOrganizations(const bbpim::Contact& contact, Json::Value& contactOrgs);
-    void populateAddresses(const bbpim::Contact& contact, Json::Value& contactAddrs);
-    void populatePhotos(const bbpim::Contact& contact, Json::Value& contactPhotos);
-    void populateNews(const bbpim::Contact& contact, Json::Value& contactNews);
-    void populateActivity(const bbpim::Contact& contact, Json::Value& contactActivity);
-    static void populateAccount(const bbpimacc::Account& account, Json::Value& jsonAccount);
-
-    static QSet<bbpim::ContactId> singleFieldSearch(const Json::Value& searchFieldsJson, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
-    static QString getSortFieldValue(const bbpim::SortColumn::Type sortField, const bbpim::Contact& contact);
-    static QList<bbpim::SearchField::Type> getSearchFields(const Json::Value& searchFieldsJson);
-    static void getSortSpecs(const Json::Value& sort);
-    static QSet<bbpim::ContactId> getPartialSearchResults(const Json::Value& filter, const Json::Value& contactFields, const bool favorite, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
-    static bool lessThan(const bbpim::Contact& c1, const bbpim::Contact& c2);
-    static std::string replaceAll(const std::string& s, const std::string& souce = "\"", const std::string& target = "\\\"");
-    static std::string replaceString(const std::string& s);
-    static QList<bbpim::AttributeKind::Type> getIncludeAttributesList(const Json::Value& contactFields, bbpim::ContactListFilters* listFilters = NULL);
-    static void getAccountFilters(bbpim::ContactSearchFilters* searchFilter, bbpim::ContactListFilters* listFilter, const Json::Value& includeAccounts, const Json::Value& excludeAccounts);
-
-    // Helper functions for Save
-    void addAttributeKind(bbpim::ContactBuilder& contactBuilder, const Json::Value& jsonObj, const std::string& field);
-    void addPostalAddress(bbpim::ContactBuilder& contactBuilder, const Json::Value& addressObj);
-    void addPhoto(bbpim::ContactBuilder& contactBuilder, const Json::Value& photoObj);
-
-    void syncAttributeKind(bbpim::Contact& contact, const Json::Value& jsonObj, const std::string& field);
-    void syncConvertedList(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<bbpim::ContactAttribute>& savedList, const QList<SubkindValuePair>& convertedList, const std::string& groupKey = "");
-    void syncAttributeGroup(bbpim::ContactBuilder& contactBuilder, bbpim::AttributeKind::Type kind, QList<QList<bbpim::ContactAttribute> > savedList, const Json::Value& jsonObj);
-    void syncAttribute(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactAttribute>& savedList, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey = "");
-    void syncPostalAddresses(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPostalAddress>& savedList, const Json::Value& jsonObj);
-    void syncPhotos(bbpim::ContactBuilder& contactBuilder, QList<bbpim::ContactPhoto>& savedList, const Json::Value& jsonObj, const bbpim::ContactPhoto& primaryPhoto);
-
-    void addConvertedList(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const QList<SubkindValuePair>& convertedList, const std::string& groupKey = "");
-    void addAttribute(bbpim::ContactBuilder& contactBuilder, const bbpim::AttributeKind::Type kind, const bbpim::AttributeSubKind::Type subkind, const std::string& value, const std::string& groupKey = "");
-
-    QList<SubkindValuePair> convertGroupedAttributes(const Json::Value& fieldsObj);
-    QList<SubkindValuePair> convertFieldAttributes(const Json::Value& fieldArray);
-    QList<SubkindValuePair> convertStringArray(const Json::Value& stringArray, bbpim::AttributeSubKind::Type subkind);
-
-    // Mappings between JSON strings and attribute kinds/subkinds
-    static void createAttributeKindMap();
-    static void createAttributeSubKindMap();
-    static void createKindAttributeMap();
-    static void createSubKindAttributeMap();
-
-    static StringToKindMap _attributeKindMap;
-    static StringToSubKindMap _attributeSubKindMap;
-    static KindToStringMap _kindAttributeMap;
-    static SubKindToStringMap _subKindAttributeMap;
-    static QList<bbpim::SortSpecifier> _sortSpecs;
-
-    static std::map<bbpim::ContactId, bbpim::Contact> _contactSearchMap;
-    static ContactAccount& _contactAccount;
-};
-
-} // namespace webworks
-
-#endif // PIM_CONTACTS_QT_H_
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/simulator/libpimcontacts.so b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/simulator/libpimcontacts.so
deleted file mode 100644
index 263e8bae016741fa0a0fbf672e1b709822db3589..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 265964
zcmd3P2YeLO`u5pPfPjFZh=?emD5087BSDk^2@q;X0s;b?wvdH1vYQZ4BnkpH1Vu$f
ziDCgODk>Hf6%`c~6}_mahz%4K6&1aT-}9U~vs1F0gyQ{w`EhvWojLt2=RIX+7o?3E
z>To!O{ud^~grxd7L_BWxJ}F#2iWgC$k%$)U#i`nJJppj{?_n}D;=M>ApC9@oOdM(&
zE<+jaWwa8av3l+VM*I^dB2EsM;V@_hK4)nRTal+8+Jk1`ebz1WD}RAG|K>=@pg(Vl
z0y-gLHR3i$i0n3K@!)fpiF=yg)l1|?JFkdOJuOA#tc+?NAztslu&HpSrYv-%mZgf6
z-VcOzS)MZ384(p3-SNu2GyYf{v0uy<*QC`%Rkw<W>=IcW<s6hzowP0GtnjGZ>YRvo
zGg~dsnEgX~>*_((QE6QrC$;>eTV`ZYnkc9~O*jXM#;?Tey;F1+;b#mNVo}CaN94Nj
z2r)EDG)<`%T_Pi+9HItQ6rFQ6UcRsYB&Xxj@SH}%8D0=J${`|_pB?Uuib)X>(Ty5K
zh?f$VH)`5bbO~?O$QjwWq<YA?F{1V0cN-NfT-xHr@VhQ^R9_w)6EVmk7CD{Q#fb1O
z3$uHk;_STWl!YRtx;m;l_ocRr8l^a*#qcYKJ4B3QQY$buGD<j|Q9?A0%;|EO5SLbm
zqaPbZUWe;uJ1!K_lkaj?pVUaC4?VxgDOxwr=;?@x3Xg2w{%p}I$`#Q}yuKhJwRcoX
zZd6K>jOxgr(3JK|7v(LDEPkPB)TPeU8+wcI9C6X`r&lC&Y!_ZFoWq+IUe-*cI98;D
z3kS-N-qTe?g$vX=qIt7uv9L!?QQF?E5$$e`YBjTYb4U1=y*<Lk3NdKZspvNme#oD(
zC{je!?Ccm_jnv_VpNnQaKI$<dTr|D1I@%evu66a0ZPn=3!L6g4oOx&U@VxPZC<~nt
zx*&8#=#J0>p(jFb1pN;pFU~=TQTJTHSalr-Oh8Cfbdo|nZ8GR{5e6Wfhj2bZ3c_H7
zR0RH|Dby$-hMH(FM5H5(Q1`(7z~5+Gk3|@VkY&0*9@i5TeSzuzM0Gt0I2qwWgeeG9
z5!?v52>i<f=BsNDaJstIo(eI;M9(x`&%$+)i7qx>m*Bb-p-kN?SLjn%0jxxrgHVMq
z7hxU(|1JVvtgbHsE<mV8xD;U_!sQ73TMS%+aHXQJ0$z=94Z<>n6$sZMT#v94;Rb}8
z5pF?PjljR#6l#<ZYix84=sOYaR`>4#-m9+fQ>dpUK7e}<n(jZWt~V%r)bwm4uAe}7
zQr+7Gd<J1N!t)3(BItixas4vFHg)d}h1-E|scSv%4$$u+yr=H(1ir7X^*Fmge}u3b
z;Zuaq5cVMKMfeKgYlLqQ_95&?;NQ2v?+|`a^p6S;0)ImI8Q~DZZwQAG`1cp^Z(hR|
zharR`@UIat0->3rn=5PyJQ<<2qT2x5s_S+NPX)F|I9<^lfoCE_A#_FPhR_{>e?5S`
z5&9^)uR=bH!L<t^R^5v;J>&BP(ESjS5e6Wfhrqvqz(ML-yCcL9(5VPR)%{@#hbv51
zI1)HYU5^1~AY>tAt9uiG7a&YTn1nDHfqzqg)6}(g$M`=7_w#MfJfLUT?iGUeBFsdX
zrJfZ7OVo8Ka5h4@qAP(_>YAm^RoC+rUIe@tVLrko2n!G{Md06Mz=a5l5EdgWL0F2w
zzbk=Psq3qO%Mh+r^m5>J>iT-%N_Bk$@J5825LT&s%<E=c--2+v=^pRbfWA}RTdVMH
z;63X4Uf_CleLwI4ga;8GMtB54|9ceIk0Cs6y2ocvfqn+zIfUocvloCbA#6o>S>0pY
zS8%-z;Wc&d4d9#V`fcDl>Y8zP;`)7r4-j^#`@4akAbhIm&wzUnK1cWx;VXo%5xzm#
zhwvT30fg@nen9vUfqw^qKO_92=-+_9BOFHfL)~M%KTX&F#q|*cM;M<#e}Rn<njkbq
zI0>OS0{>b7BN19Dx(%=`LOX<05!xf1hR^}wbcBuwoe-iBx*&8#I18aWLJx#q2z?P^
z5L^hc2yqDfiw7nmBrBTt2B_;4;1G443LJ_s93frZW89Ir9*r;tAp>C?LMFoY(@q(m
z`$UrenNInOyH1(<;GwUly`S@IlJD8EtybM6Uitcxcb^!raA#WbSLfe;)3V}!wk>Jp
zzHrdKp}$8StXQ#NOxng_kyTT>=X#0;o?3Qtuact1Z(Z=gtCv4|+fBEQXwvJxkLI=L
ze$A?1-#>NP;<iI>iFok2ov%11<!^2EPlu&XUGr1R-Z=%!CM`dsYyamO_xj@cUq3on
z{nY%|p7x|Vew^xi@JQIDg`GESx?_9Z*7H99d(SgD@Bi7Z<-pQ=&o3^2tlgaa4slnU
zpXT|a=ejPxynk+sWq%yWYPIT)KazaUeelG9mv^NlKj>;RVWh`7=!ML*jkk)3p)X9h
z{HuibcYf4r$_KAL=DFpW-8a4Z^^6s(e!X$w_$}vDJv!vJrsuAG3ioq*+}5MbCmU}Z
zGBtnexUkcgzWd0fRns5(`<LW7uk4>y(kE*ES8<Pgz9Vnzg0KGG<885Qv+wdzr=OWQ
zrR&16jt{Qc(yPhdzmt3eC$?JEHU6|ym+V-)`^RRbBQJbqo2N(o!_R%3HvgsT^WS=N
z@wtb->61BlzIVZx9~YkTRENLMO36QRPWLAtZocfAbvLZ~b<MszKl(T?wXN&<?l<1p
zw)ltsqw>FK(Pl=`tt-x~`Fv#MMQb{iZJL@nE4^siM^A2hVe_Z6nzb6-r}s5o+B|V-
z)vZ~lU;FpVzua0D_n({h9U6UG;{8pxJ=iCzIIX5-r<$pctbBQD#+uijTyx)zpX5E(
z_2~yccyQRd8xOvC-p%_L5BucZngLI2-`cCm-`V}gw{gEd>Wxm(tqa$DxB1L{pH2I9
zTlRN@)80SOc}~CCUDq@kJ$>{1FXQgnw{p(FXA2KTF1u!Z`hC&UW-Z$JOV6v$Sk~&i
z&2h88?)RB1dSt6Re_hpK$p;^`U$Qp+skP6(Q}XGRkF?6aXx*0dYX&};_tBF@G1qiy
z{7l{tP2Ss^@O4gf#rUT$ty-}uJ^!y~r+w=m*MHLY`wJ5ee==mt-rPr4Hp$Cav$_9o
z`zpf|U2i@#`<4m4cUKMk<<TjNe_l6hYUiKFCZDwT(pgI;Rd*^nIInV8$J-)?KQ!U0
zi!<hQX`FHL+&xd6*}f(^`TD^_3LD>2Iq{7LfBW>jR>QBnV8h*C<*jWrI_|zxi@uzG
z>6%5EUp)2e$)Ajhi+pC@&8MDw^7^aRpY(R-?z8Tg`_To@d_4W})aZeCzMEWiq;zi0
zjn~e)q3W!TPSG8q2g0Av?6~9B`LABG?#F3ohK;#q;LzvuesGQHS9D|23ztv(@12#u
zUDMrp|NYs$|Fb0N%pazX-@2&lYm3f7y6PcOH8H>^$M>H!Y<k9;{kPA~DSx(c|F#1@
zK5OjSLo-`GHv5*RA`)GzVs=-}e&N>Jhu)KP!)FT`J#*34-3g-_Pbldy!<lm~(w~QL
z?I-Kzj2QLMgeOOKysg)c18u*`Yd(DE&>@AB?}|>2`zQaW)90MqeBG6~+rQYb^glyy
z=#|vsz4+7m_FU3+=;HUEpK;mWn|`hQBVuyy!j`xH+@k8^)6YG5-?i&c`o8tD+b&tr
zcEb}doxbhuR@<{DZN2%H9#3`L_t0kNCF!g3rmmm${#S1<4zKLDwY*|*<~0L<e0so<
zjX7s!pY&tPtG9N4ZP7O;<xTzarn57Do78`jug&7FqdR%0#gx7Cb@9v&PcOUo(9F(#
zH{YE)@`7b!pPYTm{1Mv+eDGwa(=P1L{G+L}oH;k#_x;`D7rw9}>BW!JfBpUQt)DMG
zZBmyGZ*QpxEBL9<6*=p}Gq(NE@}@5L?LE?ez4yk)Kl}bj!2{C@Z#?Ch7e2diVUPLi
zJ1zX>q-z&^+j7ohDVaIVFS_ZI$E(gb`<72<`W_qA>EPfo6<4gzo0@c?|JH4(Jv#j-
zb4PaT!M}aHf71NI4jsSP`|5c&yLv?CO?~nK@9QIL)*YGu;QH=6&q@7n>F)HszfZpY
zj(4t){Cjn&Gv|#3-i#GDHX8if84G^9@7<rG2aL*F`}=2$hGj>2U!U`RkLos0|4=&h
zs{a%}R#G(ftgv&}54+=zs7Jmlf1=fuc_lCQnZN$W>r(fux$vCzpST(wc%yOiYyaFF
z*5lrTO^+1cGQlzOw)UO+R}5S8Ii9_9@?TdLpYdq#b{Fi(e(i(jmVASI7d?3E_tOrY
z*<;*`c|E^5vb19V7fV(TYSOv??;E_Y$1R^w&}m2I)T@#PHJST%@2hscF#fMU+r8u3
zzGmLI&n~<!%3u9T{I9<hogRDYLyz6m&HK7HapvC-yw|1OuU985NUz*q_-lF5*n%eK
zu74*#>p+h0VR6UU|E~P+EwN`cik-jyo>QA&fBC0fQ`%<tZ54O<-@l!a*yupo@PTJ!
zHfeNV)(1a6+4HVDyL7?5c@eiBIkoeGZ=0orx4Hn&ntlA-lBH*tJeIcbp{gEuo>)G4
z*5*fU{r<XF@_H_5G4r{pi1SnTzh0R7{P4Nkc6S<h^3wR%XRSSFU+-BH@9||neDZaF
z@A%<@)LD1^=13d<$vb<SCtY>_nLmvfG~tOwuf!j|IPH^GZOeDhkG|{$hkw=d^FN%l
zcKzs;)1&Ttv~c5X)d@$|4#<3bT*eJAf7E62DZO?r`QrYJB?-Tt^!Ddj|6N%yCb{!{
z8&`{q4&3za+Ot;7T`=(JW#2Dv-}u8@9IrjwXYjPa=Y3c_>%Dsqy!ZL5JzpqH>egrZ
z%8^fAJ+1hLAp;)jkb^YSW^WyI^YXbzuG@A|Nrc$jru^mMzyJ7Fr?KlMdFEW-di8s+
z=k;9k((t)Ye{tQ#5ubM&_~g*%`u#QjnO7dT_ndtfz2TlKqJR5-<HUzgo{#JI9Pj+l
zY|Xs`F2Aqiw(DvRPo0%jQJr^5W@W-tg}oL$7`OAoij%L1X*nmqb=<?=7Vd=?g}G~@
zWBT{_>9wS&yI0J*;kgYHx}ULs{OM6ccBCcW-T(HRI$!$RqJO>^`ulg|o-E&d@TPa8
z#xIZE+hfJtfg{p3=DUARKDasV{ZooAKfm8s{m;1l{6+_cHS#>;?DymQ3pzhKr|&~O
zs(Q`X*mdwjx83yi{#^@x+dX*1<e^P^UD#oEufh-JwYVGcvtHi1|H6Ws-d%Xx^0}uj
zd~QhNDMR1AANN~NFG?-DAoh$~8-=%dW!vq~?3z8XqvNvmcSq&F@yfUF{n+yGQ;mCl
zGjPwf@i%>Su)~^^#Hk~jwMl>f(LMtvKl94>_n)&brT1^&-+$=z3t!&wZt1$j)8f<q
z7~a9Zxv<xycCqWPdgjd^K4?0ywCSYck)1yNvvPLpIr*;)z25!j58b}sbMMP%zxLmZ
z@9FoL|6U(rP_1zpo?xX<DYVj$m09VCu~vG6$!}zSv(B_Wzx*;Q-EE<jehdpc`XAF*
z&DJT*2XX1*BA)sq-S%Xi(w^scu+pDjW2HY#vC=cox6*ybS?R)#R{92ml=X2oGj6ax
zA7okSs>xRR<~yu(A{Q#vAJa#b=#<u;D7lcT-Q)99xcI65NPpEsr?mKA+tRl#w>~em
z@vFxy>+_e2t#q^N4Z0OB-@eqKS$><QR(gM~m0sG-N`G*MmChY#rE5A_>4`Rej5i+3
z{^y)Q|6_fY+UWCo>QA-)nR>RBzQV?j?NhAJPxo5s2wVT`nPGjN*~Lny^|#V%PqWh9
zPcmrsZ?Y}_aW?*cXyaeBP5wU_Y2+vS!`7c=HoB8dAMfjGP5*(7zj<-i=T}Er>F;dq
zJ3rC-{QC>7bb7Lt9x&BPkB+s{O;W6MTU+{%T3Da&ooS_=Hu=1%iS>E4?fH2&dpFzG
zzP=`d!2bUIDkDGg^FN~vn$I6O)k??Dw$k_5+7rLl`n*M^mEK^p&(AD3p0oUMHh!I%
zXFO+p_S(|-!v2i@$LHoX0n+E$<mZr0Uf;CYAFki%e@y?jO`ramq(9a4^AVf8|CwZc
zJ~+op7j(ALKiKs5jBM-k=z&)H37dScu;mwN8*iSojgL__dq3IMKX2Ijb9AP)`~kM{
zr^cp_583o(h|PX&H`zP#JH?iN<05N$|JeBPsV#k?t^Ix@xwN;x+wAuSoBeyy*1uD2
z<4f66BSY5rLYuwmZ<E)NDMozC&y-PC`U_kB`8IvL)FzKjqO9p}xWY=evGMPdG1liD
zZ1&;`TmRl}@^{!iuJ7xAtpD{k|EAo=U$;%Z&OA#`t?9?ZHu@r){tmb4&-5<V^dAqh
z((CN@%*Kx;Hv1Q2)0gQsdv@4X{*F>>dEIQ~zh#sES8V=Ue;dF1*!t%iTYvtOYb~$J
z7C*t3|2wwy58Kk;NhYd4Ud9a2DUBaXZ2sE-n|^h(<$s+`f4>@M&F>f6_!VP{&+>=a
z{3(+-3bLAO`T8H_t;E*<^KJUsudyB*Yqq!?c#=Ug{bx3LFsX+uuhBGXe6G*xe@xG{
zSN)IlsOCDQ_1}dyc^YVw*TtsxGyM*mKmDhTzu~s}zMXF^FD%1K@3oCD+dS6i|JdwD
z3!A_7q7hx%$38ZF{*(tN)F12L$Ht%GHvKKI>0=w)_;H!7zgDE^xhr{GXr<@b`g_Oe
z#&h!f3fuDnTl=ptmCyLAFE!G$J^!`&E5Eg~K7YbCKbmdxj|!r!@xQZ;FDCX1Mt#a8
zuPi^uR{k3{{qWiJ)n`lJ%x2$e##-xh)i^8t9Xmn&@iNP;Q(FIbx5-!4AnWswFSF9q
zZ2iB(q|j{NOq>6lf0i}<YJ-&W_mVArw5@-J3^5Wg|FJfIX@^O{`TRUvdwLgH(;rB;
z(nC!0!t{L|*5?~-{rQ*8KK?V^8b8~X-=`*;{ogmr8vi^S|1xd-{@m7{7Pj&Sn*@&a
zzc1CA|NA!mEVaqokGA>d3uhbYS>Kav<4+@7f82eYHGa=Y2F?1+vhnv>oB!F|CLiCN
zf-@DJoPy2lg8wsa!`}Gm;qok0D{+e0GZ%ZW*u>>I0Y3j8@iK9EC0fN_+!yCAunA5#
zn$Iht-=88s+?Mnk@YnYAH|S?zU)pzf3Ql_%e-h;7{BxXwW|s6Hum_v69D>6T=`hIK
zk)BRLH6h&+`o9n7%!Y&Rj1g(@4cK#j(kbo*-5Sqxz>hscor2xU_+O&GGO)SHVWYEX
zCN@Jp4re+9-7r3n91k0Dp;K@gNP5Ol>_v~nzJQ_+jl{W`iyh)Qw4eFULq?C{APo0o
zNrwZ!MSrBI_>Z7qe{Z9`tC8-;ScjN_=ZxQUG4_M8IsKA~e-GAc&hBEwZ`up_O?QYw
z6+iKMtZ||KGy|-^2lelW4cwNB4j+NN?sJX)Tb_wCGw9DsmH$L0Y>G<YuQg81rJ{d%
zn22J+`dp2SmW_1C^GKwfcu<+>5GYnYzX<mDU<aJN1Kk<&u<;V~=MtwJx7lAm-66z3
z&p1WzFfINR==)?GTJWPtKJPq6h-WW%$g@$*|51!T{jo_;vE=jNsDECJQ=r+BZgv6q
z-NR_l9hhKLmN~`w=x4_7dO7yzvB9tR-^XCo;@J){rLk82e<5!z(I2|}jSm;%=@f_f
zQRSbF`uwmM2kBIOXU<3e;}F8v>iMPUpAnEhPFq>t7s&5Xll)FW$6R)XGax^UdsyXn
zGt!&oHyes^@g%1xQ~8zRc@y+Mhe7toDWJ{rc>TH9)5jsHhgAJ`K|Xs=bBa|e{RP9&
zKPLGcfqpj2-+3#rMhN}jutxpZ9RvO)I^|h5w&!ig+kq&fe=@GY85<mI(B=KDwy>Gd
zU&;sL|J(-cKhudTjouauAFElo)PLrGeHPAQT;P;vG8zAKv^Vxbr|6^N--PkWET2!H
zzs&ME8TN9kN&bI?5xWfKHB#xnPlHd0_9iR(6Ub{U4y&zK^j`3z2Ks?yQa`5mw8;|`
z-7HT7VJ{o!8}_Un5>7X@FAauh=0K;oQRP1g=@VgpP;J>CW4%ZZ{X#TJ4}#G)%fsz)
zR(a_U`&wYKuZtjm%dT{YCn1;Q|5vbId9NDn`}{VXQ^5fbsFln=|77U<=MM3cioa|W
z?DaUOfLhAuYx|@86oY?LTi`4O4hO;{$^8EVL-4cDDbM+kKa1nx^A|cqk+NTl(SHRk
zHG5Bfu7TVg#(~5QD*p@7-$!sb>sl3m@|}<m96TASp1*?momrmdK|UrXIR#Wi*6(u2
z*P;g@zhEfKUxfa84iBSL`aYv^9xT%-zEt#H2;P_>4sj~#&-kCApsgnUFS-Ti!QL?1
zI}!Osp#Ct6Qr>%ZggltWhbaZH?>JaDS=GNA=(qYB{M(N4_RX$NsgEqLGZ_2I`A)G`
zuTM1Ww<-Q<kk^@z*CFb8ay9s~!mx*HU?2Z7_2*sb;0NrX9{)<n$2#Z_)J)d*tyHX8
z408%3lkIH^{TTy&!fi=Ez7pr}O!*ChBF+PIb@@AGDb5G3HuSmA1mq8U9gg%IzvHH1
ze4g$U5G$EqJIKeFi4O6Fq8|qTCz|r#f$`$LVGiNJbIRw;sW`uRyF;E!CEaN<>?aOK
zUJ|A~9|OfO>%(^N`3T0lQq|vYf<LXHUs0;O>tWwp=NRoPM0*dwKHjUIPeVluFu3x}
z4*Bu?V4R^E?8L~Y(WBPlIoij+Nb%D@({F<O;NTSN%lH>%Vh#d*%~SMi{V*PYpHC`!
z2Ix;Q36D|ob@d3y!&s+iq3DITTjhJxMK~jNi6QUrF2Q(#{?1bQCAh$E)!!T+-@OBC
zI8Qs}nOFAL^qDx;__9NcMU_d<=#KFMlRVv?-H-mxL4Ttf^7*^Na7JmA@!SRbRD%A~
z?eDW_*vc7(JdMu9_=@s5%#+`b!@hk~;1qwW`lXzK{*5-|qaFBVmj8!r@;$OW>``Z@
zfZ37#xf$(QhXZ5_RR0vu!T4V36fimR`H{Xjj|Ttmd=<a-MEFbKuWldO#KV6v$$QpG
z$UoZ=7@r40e!oP2avUT7=3&Be<ZZ+LHN$<gy!S%<d5F*Pjq$I6{bOY=Q}oQ<C=dOs
z>&L^;*AdWfR8z)ZjrJYxY|yXvfqut3#UtwZlw09Xz`j6jWc-70OwNooo^LIHKk+E+
zlal}au#c~gLVFr({JS0H??8NAK0ZeMdk!%4^`>R8|L}iaQu)6$9Q7S-=;z}VLKMPY
zr>f`iHhw>hhBr2~?=Fn*FJgSx+xIc-1rPB-?c{iP`7HSBuQ|kgC=liE3fQ|U^atDu
z*}jo?0=GCt<0jhkx6ZWc&p)@|T%5_?UIO|5?G~pz`_BIF0De8a-LQWp7&r@|k9z;#
z4!K`H$Pv)r&(W}tVDEBO`I!sBzFvlZe>((u_ytCPHAcgRL%#I<z8Zxyt{5-S&9eSY
zFy6Gqcr!%N^H;!LH8;kyZ;_uxzt9iSkjIXQ&++b`D<O|K^m((A=M?bA`M6V_duIFg
zWBls)m{Xp2CO!XDj1N)9{9?#;(61jf|A7Aa!D_hMHyHM+0{T|~{e#%b`bI<kI&?Pl
zt26q)*Yi&CJD!t2n^2EO&vOLqVIdgRa|-+$r5}I7&<&Vr$ji+m(SJA?e~OaF`=MXo
z;;{cBRo<;o%$+9tFewA|J;#_Ij6?g|-Q^VbsQ5GCk3^gNk#%_ftm%0X@;@8;tLxtZ
z$b(rQhr-`@0P?Hr|BvXeE$DB3d~SpB{#o#^pDHi>YS_<voq_q@i_q7fF}_Yz&%f$!
z)#thBzYXX=J$()2p|MFGet`VdK>jeS$o?L*2K@cVDb7;-?HP^vBlJg~U(SKPZ2ZwF
zXhz7tiSZcUP4kC8ufTY@)+t_9`K<-L_)dc!aWV44_yCs3^3F%coAujg)Bkd`zwIU9
zZxfB*kF-O7L!Ky)l&{Or0S$fD`R79W&H6qThIu*qzpIi5xPl@N_62Gy(@#PBp9TN!
zSM=E!zowynP&@hj;ZtyS+vJb_0DJHy>;cd0v;3E!FJ}F_a02|VX(o9C|2IOu5><W!
z&>y?+a0dMG>GM#Z`A+eddj9Ji)TfbCERN9HdowCx*8eq8R{bA#Df$QcbGE9_gmPr`
zr$Zc3^1T@8&HmEQHwp0&4o&Or`w9Iz9WT-FJr1_#4=?QfETjHE4Tk>0pV*-4cjpw0
zhrJE^G6v&qCB|F0F*5ztpf5Jj^B}Jetb_ch{67Ta%=+D@H|*^Uhv<ms)aN(aV7`j<
z=r);OSJ<E7Ci~N@r&S;CnGAme_35SJubT#WU*nKxtC?R*WMtOAD4RY#H5KzmkKs?X
zO}F}=3otO5{mThgS@kcj1pd<34tai?<vj`h=edpk!kcOq{Y;#R@w3RVCx`OjZx$N;
z{dPFy1@`|5)t*x5S7m=={LWp4{J=lmUi=JxFDf?iGZW*>1gBgNAwR!_A?>opDbLoE
zK7@fT7X6ECW&eJ52lNLA-FGYca`cy3U%nUtdCf5DHyip;1bxu?opUql|GH6rr*@cM
z;kiD(epZJ1;zbso%VGbVkMUv4eNF)vPL}@z2BO`mP7$u`!Okd*&$$kPZjteGklzMV
zey`3KA}JE{Gvz;A(g)*b9Olm|zrIy?ccIFt&u19lCYr{#vg@#(2K(hg{<L2gp&>H|
z8~%O4dC-?ZhCg%4B)tCw`GcAxek;)g_Qfp!U!#8eS{U<_8E8-C5NBY%aND&w!-T=|
zC8THnFLGnNy3>%CCXmM~VUJlKKCkxSy$0}8=kG_*p9AZiVyAlk$=OzUKfNXR<wkyZ
z&i-AIgY}fV9pYPMFHcARbVL83S~CBi!LP00m!AI$3>>R-410V5#<Li#XM$bQKYqUk
z@%I@1t1r$fkJq66%}w@rW-*@ca)`T?{kjo+DoJpNb;ytP<3PB_G`?;Izdi-O^!j|V
z8spIpr`W3MyPyT=cAC9m`sc5Qyn}xlKbnc2r^A25U<J0y_Wd{rdt|UzV56i*LjN{*
zG1g}iSHhk_{&oAm3-xP<^*gXd*6%eiq6+i77|`VRBFJSV{EItPemA518qCM_^cB#b
zKb~@mTU7cbu%8*QpZBWxZ=+)AsBf6eubH?H_G?*;;m@6m^x<DP#bYY|JDtI=JcoSW
zj_vKy7W!<mhm~i;{y^Szd3+1{9ijNe`P2s}uiRALBglU@@_$3+f8LGYH^#e8iaxm5
zDxVj?K2PuN6c?-KpCG?cru>r8pAVrw_4&>k@aIOzA6!z|e{+#O5&oO5|DDc-zNZ-a
z^fc^C$ppi`we-V&mKf_TU!Y^n@;ns%T?T$YawI<zAfI7RYW9=;GjKY_M>rFes=n;^
zo|x}PE4u%9%r~&UM*dR2wlBx}8vM^zpsD|Vf-&nbIO+c4&+sQ=U@w@S{Qou?_Qy1T
zxbF=3qgZeKLgjZ~Hs+U;4g1K23A4POz6RszhfV>pkmXl-5Z`Oa$I3+*|86qoKck03
ze?~dQC>6gM`a9nwzZsARv-}ppQ0|&x<hKd^cXdyv^dH&Y-(i1p@WR)6m0x%8D-tin
zHgahEDnUn><@tIvys)pa9vOx9G=~y!-<kQHkN%5<yhR{C%3HxTSRQ}CDdwvD&jG)-
zK|Ub{vj4iG{#Bs${;XU98vPrko+syHzKH(N`RAVo8tu{P4#-a+y;fc;@j3Ztvd4Ep
zzBfU>yCE9u_e31*G2{i^B+EYs<*h<_?G?Qr_QEXRpF_|yFE!RTe?|TeKt3X6{AQvv
z%8xOXzoH!d0s9O$O_p~U8E2dHVLckY7y1LSkk3Dcyq}5n>p`l&6H%WHruqzmoo?38
zA+A7t%JWp@SKissA0Gr^2mEV@jm$5%2IJGGhQ2gA74czzb$wgk3)5NH7kxZ@9)>IB
zeW%=qV*jiy!FUh;rl|Z@T?La2|7@_L=Rlv{ecT};(c!GmbF&d2FQ4uL|4C1nf%a{7
zh)$?C>2_Vv|FGxbNYC|@)4*u6zW5;@TOc1>RsIiPylRV=Uq4m(zliq5n&u;;AV}Tj
z8spKUU_=4<t@A$u`ft{c(U9kO(|Fal8SFXsBRC$iy;V!GK6SfO{G#Z4K!=;`<;{?X
zU(UvSM?HU}2>tyY#xFF8?c1>m{szX&;p+L+B+L(HIplf{pRcdB>er+TV4v|q^v{UT
z=eG~RJE!n(7OM33G{yLDT8}&%^tYIgz^u#qc0v1gKY{msRQj7Ck3}YVAF%}f%`Hwb
zMa6fb{neQNzp3a8z{tx68|z_dYw>`>fIqz3FP>NcdvT4S&sC|IFAX!+H|~bL95B@x
z*#B7pMfwusPdd`GKVwE>KdQ>GA1`!9`(bY&cJlf6S@35jI%WGAzi>3hg8|0;zws%c
z;m`F^@m+0j#u)iSoMiguQ=xw*|KL8fe<}14&4fNT6F%r;d+4{OpRGg=#;?oZU!ho;
z{!j4JtbhHXPdz&u^ItdmBNhDTAJ;=aPPFRR=NQ<cS2@H^rLWy%P#?@M_3`cu=v%5u
z-?pOv1`IdW<E}(``%s=9f5z=r{reg57pEKXz0p>EoQQ^WxxiSjc|H^R1b-f4E!#If
z0^<kl#f@Q_eEo*`<2F-&%|XYsH_6Kk)c+aOU+>@hTfyIg{}QkA+lBFI>2AaRMdQH$
z(|q0uec6Qm?uPgr58p=rFNZ(C_K_clL9fH}=IZ%0C*%?GJX7T#j`Di%)5>T3M`8a8
zVE@nznco)Fe{f5ue7~Lg@;)*)?^k_^h98DL>-H@bhSj{k&G$<uWB=tgRo=ms@GplN
z@-|~Q<`WoCA6L)M1Ygbi_tgN{=Rt<QI1lwV>tim;?`SIjL-5o80rVN=Qoa{dz@HON
zQ2~)+{hN(}eq}l3d&Yd;7vo=zY5a>ue<guNv9kSpV0bQt^Yn|VUjjPXynhx0d8>iE
z>Gt8RlVBgA@8k#b?}`2`0zca+x)AeW^M3j^^v6LHzjC1;d9Zh2gG_%v1jD@Felqf#
zi2T~B=R>cx?!PaDeD4DPqVb&a;7f!5Hqz+7WoKIL!Eewnv;JSY9P(-MAI`;ikcq`?
zm_*rssmMRV)L&O;z`wZGA@)LG*uPCzqu$${;wDwU>(Rf_kUxmItdAoO@&ftS>z4(6
zH}8KuI0*hU_<f~He>pOm{F-4uPz_P`4TJ!HtwmF@0R3a$-~THW_F{z5-Z%)}Rq+2y
zWPDVzAI4|cyURe6KPQ24ht>E<f9c}OG2dKeloxRh$}!oO_rOTAeVKv&sOfCjlUDG@
zpM^c7K2V<$Vb51yY1s2yp+CFYVLsVd>#t5%<2wQv-x;6v8IJNgo9w|-7ao|#!-6)@
zZ`fm)X&L|fW!CcpkKBs!;0>ewv-2?@eb6B`qsz#jlz7O4$$m72plyS^==R}k=*z}(
zW4^N)^~o{qzi+q``|+p``9Oa{xTkwdyu$4+@RWOIczu3PxqEtfZn4MhEty`5`$6xH
zsB~wl*h7kPeLjy*6nXP1{N5s8UmsFU9uu3F7gy#j?w6aNUs_S(?>9)pR99LhA193)
zom-Zg>(6y1=9iZEy(JZ%q2(SA@1&tNlM9M67%yQq@5;+Du7q)ebA8_YLH^QWZ+?1-
zKd#&}UFH@SZ+qgN?(ydr4k{@aR8TOsoGmNJnBZl;wR1_}V=bRCu9$Iy=lVT^%FA=-
zrp9VD?KdvVU+yiLVW;D#qh@ItW3t@wvewKzo~=r+3f1_uG(D4qaih@H>Gel+#ScOE
z<mUVJ{!_KGb+0R4J<sx#S9<e3dN<c!j^aoCHJ1^`m(1~&6oB`>iee9hV@6e#yUbJW
zD=o<_^7`kxD`VIVS-yC8TB$E>rbZ;Vv%Lj#)AB&Ni#^5pWpmy6g|oD0dWU5B5<KO(
zK2O?AnP_B|-xcfDI^La!`w8xe<+&x`2r?)xtwh<A$JE=n<dV_?k2}A#Y%ci}?~We>
zIxQ>Fjep3XWR5J$)|I-X4soSrj?9WhM0b8wuG@oV=jTGI6rBh0FR|Py_xKCTOXoDG
zX0Esb54c+BF7y<k|D?!|NtQxEVM^4VYPaicW<q|EC%2r^>h>YiS?pc+jEday0@lUI
z)#dUP=0X+RB^5>Z$X7#p(3NDVr+Wq(n5HR`IbRh?KF!b`*IVnv+_ExsDmyuj+%Q#C
ze<UqMy^@&>(VJ0H>?!eU3R`aimrIk2a!;-w8XPc184!{LB_x?6s{$1ZM6e~4x-Uga
zHkl?1r)$v?dx8Q_k%uLj5@fk#%=+tU6BL{AjLDac2$;<=c6$*UBTb>zi1@UQvI)N3
zh9oJ|?MoYj+V)eHB|dv@nMVqbsg-uQ8fnW~*Qr=<LC~W0=eb$B&cRUIET1c8m`AsQ
zX;pdb=Mbepb7eQx${`6k*n2`|WRE$dVOF-zf|Nl{FM&>$<a<~pX-K4Ex^weqS9r^%
z8LL&etiCC3Im8DhkS(^y)$F{C3t6u6`mKfJm6qcU4RV5e2+g3fuKJkfa`{WM`~{kw
z)jDmY{;Z$BbdWFK>s7ad7~~=k4KizG9yUXDeyr+{*bx{lz~)fgld=`hNC^{iiz+<m
zWQ?)N^4gHSIi9>ZrRB4H3FGN=Bza5x*=UI}q}J5XV;^g2y6de<%NUt&yQv9ZjHZ`H
z`T9_r<<qZ1Nw>>Y;PsUi<<1=g_ephI2oX&xD=)3|!t)3oEh$4ijxPyhrSnCvg)Qem
z68(9|TE=>PX(e#;%F4YMZzTgwU4!nHDv>ZEE3L|}hUe@F8p$5hu9CCM=ca0AO%nlE
zhPPPhmM?ioZi)G!$}2_|=87#XfgX;{n@JaliL?Bk+3EQZFjqdtC%3;m*X#GC=ci@m
z;=i;!@Gmbt+npWb&UU%MHx3tcBZ|vd9hbS_Ky@v5Ye&;+VoR$8SN4S~W@xU@e?hqy
z{S?SllOXdWLsk<lacjp+RYlg$-CS&9rY9FdVK_zo+^`>z6J1=X$ip}W&y-Bc@+HFg
z#^^`0>C==u%clvllzB@(VEp&zmiw~{F=iB`Wemk|6@v~nD~8b^P5E50<sQ0QqdmoW
z5LTr$BTe#>l<Nzak1{ww$l9Ij_m^Y(0BdBq<Ma46M*-FFdjik2AuK@3#04Iozr1uV
zIhW;wHP&_5(jL=&M3U|r8|{iOEg2$*MaY;Z-_NvYXe}u)QlJdo<uLc7eowX9Qnt%A
zrqu79J~yqBeupdqBYGAbnv9|fc!u(Rts-5qnX)@|7D&}e(ruY5&ZI-*{HR}@&s}kv
zjw!99Nj34s;G|h#^*n2dVZt2BI`hbKYpj<UgsPivWUPG>la*WPX;9nZ88cXoZ5a;5
zY@=ZrGG?$0rT7HpU~GCxW$7%4w!g4cx}iR4Rtn3>HrYW+9W9-v?j@Avmcx3I@tH=K
zNu@L=)%z(_KT4;j4hDuyrz)S}&7TFm48nS;5vtuGa|z}UNtw&?CwWVKa^@AE4n@|x
zz<ytEUzR`7eE~Jzh^TI;7};4C&Z3L6(`((C08fHWQdMrAx6&1hYoFJh&-DejA6}<i
zk)T*+r`v}ktrY18l~t5`+?C#Pe?@K)<61Ly^+N$ca?CPv<lNI$R64_(@Aj0JmzKxR
zDa=(<3p`57gMrJ(;9$Cq))$rL=N5Sqrsw8+j6rjZ?SWJ&<Q|hRo5OjnZt9V9g1n0%
z&lOWp>h_lwmCgZc;iY8b(w{43D`d2ceBCzJ&Zq(tEtOG4S?G+kXhAbdLWSmF7%E|P
zCXX@KA{mcLa?ww7((>iQgmJ@jeTC^>EZ6WNwW7Fqu5{kg;2%kkfm5bfj62C%1k87}
zi8-@YsdeWtDPLRt@VVj!VNl@`lV>C}U7Lj*R}sM~7*|kHR^-Jr-y^4WwX3MDM1h3~
zU>*bnqm(DNIIm)QF#jbj-Z!@-Uo+yz+pY%Ii~?FxQCwD0lJBP^B~p?KODlZ2B?UgW
z&r_z=rlAc;!q8tn9fGK>L<Gydz?1JS&Mk76mBI(tbMJ>bxXUU~1(cLr8t5fA{i$4k
zX?f7@3apM<s)wbw5dEw9hskAmSo4^k>n+kMX-QlMbCP|9rE`jNOXeyLH8fp9h3pVz
zCL1OQiEw?;h_sA+xdz$bqP!3-ImqY+hAPs~)W_U06(#UN&5b-(b}FA26*gPEz+J1+
zRJTLe7Fai|#pP$zvOk7t(xPZFOm;fpzMJl8-I(mD%J-D{y`?3(6*fiD9d`3A<&ZU$
z0sY+LOE50X(zPPdJsRe#%6_|HB9!1BRXZ!|&1B6cVc-s`UZ#$yC#Kdt0S`b=SQ+Ck
z!K&<-tkS@+uU}<P$l|Jhwke9v=2F#@#xrjqxqgM@R19+zJ-OFlL_M``ctnklMrj4Q
zlTuicgy!j_ag{wJt02j(H4&FFZd-K=^fu}l=(Sf5$U5I#AB90Ep$L#v=)lmgcl89*
zJ;99z^iDypKKdBZ^>R!($i_)e2p&n1yQ0KXRfbuRM=l1dMT5Yw+E4kOI!El!U5P3}
zVDt?YGd4!W%z(MiEyBi2xyKh+GO3kstRB0t)UOMX)w0!V_pN5CBv;#QsI`g^udV;n
zKhk3ugLi#}*apCcYJOssZ-&QTa<ujy$uMXl*~q{+VOtW3=VTn&8jVp#6f3Lwl`{jD
z29gGM6gRPe0CyE5v!>H3wqfrYW_(Oy*{}rG(gJo<SwLNe8rq$PW;d+#p!wIw>fmjx
zFO}9%Q?=?#5VS4zCJOXmK=u2%v4{pw6}t+Uv+MqWHUUx0PU4WkU0h7cATUCvz|2EU
z0Wh-Z5%dmIn>GpKGIG7;f!)b~wQ$8`VL^FFX;DRSiROWi!D3u8Z^~U(?VhpAsV`Y#
zp+=TJd5nI?l{me;v{<e$>sw&D(Cbl<NcvbhU3>Rxq_G7R@AJ-6Ynd*W+OXyFqAuv6
zX2AOM_;Fbtf4Vo|ff`d2my6~%P|2Z{#wL#JX3JWb*B5%B%vf_aCrR-7u#>H|)N()9
zxL?b7>N_K9ONQ+2H%?pZqCDy=zXsoI30$y=a#J}Kn~+#OSKht79DQ);=k;L%r*GZV
zpF6g!xZkBLyq38=@4!ZeZNu8Mf`w*DZ&~9_!)Am528Lp|s~-$A1$L;{Q&gbMOKWFc
zOU}727U$MGL}R?YN%~V)oKNOo?(^5)2ng^b5IdH!M`1ysA(0apc}Qt-8RjiUd|gHK
z#g|ZxPb$KYoLz{0bhIZ_^|?PzDGHSdmS|XsEI1W7n}mpZ>DschOdHrl^33KEne|?g
zTraJ=jM&_Qf`H4BmRYN^0r44J;Vt4e3fU8MjX*v~4CIwnk!P$Q$YtBXvL^Q4sO|XZ
zom+p*cu#>>skA+EY@E`HK!sET`eBC1ipjm!pbcSHH#j@<Mrwl-xnfWW)j?W4LiC%N
z>oh*vR$B5nY(smpy~Q3^46VD`7RU?;gFH+D^JGM{T9yV^Gzs<8R5#O<*->?nISXBY
znSoI^eN1d{tuR1&{MekSC>!aS3$Zt6YtO_kzb>1=!`!&swPjH1n?0|PGNoFO<xj5g
zdE9boGTk(<KozsyPyyX{VDk~zJ(O#hW&UzY+(dVVk4yGiq<|N~4Sn7+a!IC_A<N?N
zA8lv4i0-K0;||QXkt7@02i8(mL~I{v=Vt<S()^j^z+p3Opwvfe-9<2u*7l<awsR=8
z>~C6{o=g2Pb#Eb5%%FN37?RNS?riuHXgFrk*~PhK`c`L_ua;&9%__?uPYa%&<>THc
zs4}`~+}=uXr=^X`i%CmMlViKjA6RKCE7STcWSw1EI6RbJD91zPz}ebqxJ4sF<`Qgq
zHZ4IO{o@D_FO95r+QnO|vHDnOc#b1=7Gve86elPK^R!hx4XHI%HL?p??O<t?udUK#
zxr6w@L6Qa79IC9~6XXWe(K1zTKzx@PV#avp_>AawtKl+7(`{X-y1NqeVJqM7t;9jU
zI`XwgwdJi#Z7m^ig&1rg>;V<k<?om>fdfu|(&d`%ck{?<x!+xdp$l8X_$NKhkS<Rm
z+!6Eu7Q?ZQ!g<AUxg?pjnnCBKj^@)(p_L8Eo*+70$H~2;$wuD;59n~nK1!ftZI}`t
z)V|h!^wE^8%S~vrS%)FfEv46DD7~;lx}8jPr^)lCn9gC$qg{66RA746V0T)ATkig_
z$N#0mjT4)7Fg2)2Jr=eG&8QY*LpSv(R8{YH4oH?ED#1-XRznnaSFyF}&cnfQY`kYB
z%faD)SAINByqn4`P{W<E9_)9)Gf~@nSentcuY#?qYdcU%QnR(i-(yP*NjtVeu~K|=
z3F&)fA4{UZ+Wt`%Xk8mWw!}x@J=)5+&G$XVjjRTE%Ey|s)vrFrT$C4%T@?Q@=AhZS
zdNx=%XOc&^Fgb)Tn_lY6!;)DNFL<C!J2wcgUOzdatX!Ruk4|<m*)->t>>i6F<i$MH
zPpKYqv{J3_;~aHDwHJiC7>&hAJ$=@X>5I12r>_|V<}=0(%MlaZ0#TXGM^7}i;KXEw
z-(5Q0jW-}>c+7Dv4}wMxY!KNp2`nhPVsVUjhQCld>te~={6Np#e9yF$ZOz2U+}s#b
zbjxiOJCtLQ1m7!zyF?A~xq|o{wH#lIKdm#Q?pUT39qR(6TKX`r+{VEV;*tnFChgFn
z`5}&L4lXS%(q=NX%1l;Xwrs9i7;^FKz}Rvx=0CYbsvqiJS_qm;0&>YH$4QOyxmqUj
zI8m({=nKWFa8uuFD-xEz(-gkGJnCACas{ia?)WKZ@tAylCC5<E#7b;_;=l<e$(S;m
zCPeaJpxj|l1s(6MhxKivWc_WU!EX4JRG$-6O#L3<@ixTd8YY=*?oF$|Y;T&8y6!m@
z7vj|`0Ykk-I2Yu@kubY31t!h<%tDXI8B>x{7f#6ZENliqb-h^y6FkLbn7~TTo9|;S
zQoi?B`w1qFa_2Z;q0~zU@C&m`xqG9}&&=7GcBC5CC|5jG6es3XpK$)9B*q(b*)Lf0
z>&qjMp{`>MtQtrDw5t4~iUQAZRj&d0V5-|MpBo(Id>0UQRBhV-Pu9+ka$<5K*X^v6
zl7Oh$&V<LtLu=AYG*0LTB7NG5gmt=ITbF_fjFhZUh2gAhu3iTBCh%@+gC#LG4kDu}
zYB>=SV$cYp%W~w?v!DauQ*WkN-<=Jt=muRfP17Yk^z<?q7eg(^G-Ltx1PIY_6yGp8
za&bk=%9jRgve}F)2eps}#FBX^FDqc)EwN4BRw&WL+3<j9svWCP(iy9-E?dgby{n_y
z@~YL=x^gzVJ?3#CIoF5j245%-?gZ9ZUE0r4-VzVrb*XE6sX>|Wt(s%bg!`34xDb3C
zc_bqbenmjO4tUHpk-L^d_>F<`<Ejm|?cpMq^6=Ua&M50{Sgj4bAPOa2=HMb8)Q;B4
zHQkQEDF}7GK8fpEa_KU2q&I`(W^!PuTU+Rs9$9Ehcw7srN&4CD;$ls*|Lt=0ovr$J
zm4d$^UPo*3ssa{+@#z5h8d=C!#JzC*w0GC-ra`w1Fnox^j|k`=hp4mEATN6-%+8vF
zZ%WiMw0a3?X_cATZmhQkv&MQPvoUfdjT=-nqZF@u6&Cw2C9K5K4faH`aHeCp{1`#H
zK2xcq%mA~~P;$mlzN3j1-ejz<r&XdhL$I%`y|2kyWtH+<4tP(le6D<>C@?uIO_*L(
z;VV?)Qi_=_<6u8FQy#TNLUl`};Q9{UY{;#cQRp`|leLrhrTQ_ZKqB_NJs*8#g0cUH
zj%A>`>er1E?2Y_?P_nM4q3uB}K?~~2VFs_eUv=#+97T)&opO(*y`dbw|3Q;aP|-%K
zEi0H*X6x?dF|FrV*H-%JYb(jLIW#e9VtY(^2mKby@nopAxu2|<K8HW1n#C34c#Y+A
zD#w(KHVA3;F^<gk!`Q}yIocu1<7uz%njB9a`V8TC@~D4x>X^FESkS8PWF)7eJR_j_
z_u6WbZO&BN<b=>aN_EKDPpm3P9@+^UB@DXdZe6d2E^3R?A+zSuV75UXWb+t@FoR}p
zp4hm!G@%`T=E+p`jTv(ctfT3+AlSOBJ~juwX`nCu*k3zz@ukM{3QtMk+Zgs3v4}A}
zw+Q}3$SBMN-z%yp3(UmihZ9hybXoY(0lj?vRch%lps1tUvx>tqq4IF}kpk(hgz9}c
zEf4Tho(DbpX}R9VcAvD?l!fONhvrt&71THHe6R}mf(brXGjk^M(LN~=vbr%U_8@#u
ziqYZeDrYxjk~oz_&4KmGhK!$BR$5k31Rr&fe)I?$WpA49=VFV<B=2&PRqMFA9@iCv
zud4AdlQ$r%_H1h%d*U0+zWj2pd}&Z)Wv%>cB}y*9hkj5Lrn%apbG^kR72^=C{MJna
z6Sxw%16$$a;oB^KZm~M^XF43~it(4qr#QBqHYRqQKPf;_-pw)b;h)i2INY7(<!6h^
zO7oS2uFudD@p3Oe22v$wlcxSQ8A{E_C}UoWUA4Lh$I0r`j96U`<gvCBBm?m!JR>LD
zQJatE19I_srTBtf2yU1oCiuPnBK0Op-C4Tg@GTZEKHZj8T2ZcjA1c_Z8|KX8`PqPm
z)WYQ|tH>+z`U+{l8<HTdqFn#bQ~bE`<wZ&SE|grPN*p(|D0hZ09Ur-HB@QhuFUGnX
zOy*ck1*D3}6gmUzZgjF-+Aj&Hob_cLB?BSF#@rW%$b?=HfjQ-;;l@svA0dz{Ba(%6
zqzEztH+`qT6>s?*9)<|>`#>3$q;YUN;IoBVsnNghCu^f0b=BNPU2{Sv)jr4rb1TKx
zIQpE#_mpHCwbw+ACyC{rLVStA{5Fj@Eg7%tW6uqSiI!U{HBb||YN6dTvT?<hm3u0^
z_?UoJ3M9h#ZiAjw7XzKvRvz?5aigNHr3|Z^U+aU7x|?6ipy)Oo$DeHsl${hxpp0Y|
zhSVQj9VKl*eYEy#$DixZw|)<{j;5Q;ueK<qFBR5G6LflA`(qmB^+cSUlq-rMeNtBf
zKD256QmHfzs>#Q@BV89)k2miiXEBdAOI-;<IyJFymAT-iy+mc3B1r!;<hufOtRG@_
zBVP{)edrZ0e3s)=GI00)PmaANxikMSi<ci$!_+1%FLdi+3+0LeUr(_fjZ*KZ$hSew
zFS5u3X~Ey?I4)i#dP{gl9S7cqxC3iiwAK1?**LsGl70+D#Br6DbFnOKNx<%o>Q=Gd
z$x1&T9DyQ_oP=uUGf+K?0}iW^hk$<+YJE)5Gqx8T*ebCc_RwS3Z$0&x4a*lkbFBmG
zdKrBAD#)37Hll%<^Du|j4E;ql-F-gFOwxUvqQO1W=V%SA05|Be@P(VeY*Ou>H!OK9
z_eE=+Ge|S{Pta54Y+P**P(M|s-u2}v6~1ybM19+dQiC23&VKVSQmgZIQ8k>wT7~OT
zct%#bTV{twE`Y%tN{2?e3L#B)KYe)9xEgY|S^o@%MTYAe5Mp^~FoW}f+#)R@zp!28
zueIo6RVbYucAf@#aWJhu*Q)+JpkA;(+FsVtlw8-~U5lf^s;+xmA$b$W?`#DGy+P+h
z^#;f{Z<HV!Il$;1>+8frwPoM>yR)B9dlgxe%8+gA$F`w@C+gj!dKwN6<3M*{om6&D
zpkLHU3+*jIo~1-=`C?M7*6JFsAG5$m_W4PGKu${KgK(P`BxGmA>5Bkz%wZ<>l67?t
z%|YuDQJ(f$y-?Y>-~;o>p=BXdzMC7&{MA)=oLEr|4|IZVLu%Qq+TD^+$xk7Nn#tFC
z9nq!5ALP^D$W|$hx0~Y&=mlyE8VT~nZDY!BJ^5f-;4v-W>SAQ?xY|{hZ|^}+EOVd+
zzg1~9Tl&}8;khX1<*4c*4cM{Oqb?)X;KtNv$YNc(e2*=kkz3-Om&;W{ISAPMIUwg&
zaSl5E>TzR(2=m~%fj8Fc6l>Mb4Q^_^BVIqfsj0>{v&Z0Trt+&6bt$&B!MX(sX)=;5
zV}opLLk5VD1AyKUu#(!RC29{Iv`Z$f(Uzf2H*_%wCA$Gf$Z}#W?Wl+F;Q2IU7!RKE
zC|6fPWuiAfB+HV?GE3XBLf?>m5WPb&YK1C12y5)BRcoIlSsT18HBtjuh+^s*2wVZl
zAEbRFjg6~gAhXJQoeJ(sD3j;cjEpq{Z*O7nT3a2GT7y#XL<vRmIO5TiBa^6)J2kKr
zoCw#>_Z>|+@%cQTcr+<oF<Sr0^M6N^5G$<m7^6(1OJT!$-I%(BO6Rh^baT{Zz?!}x
z>TgYPlxlBJT(7#vNOji^cps&f+sm?PHwK5`OB}USTz#2Xf4@o&h1PBls(9A&U2)h-
zHNB@5T!O4=0@Kov)=*9W0zPAiJz;%_w+}t~@MxDsJ-+FvbuCrY<0O`8yb0bMJr;Kd
zOs|*KsR`CDFf_nkOFNtDb1Gc%x>F$;dE9o@T2EI@QEvGRk0v9*JHwv9hc6?mm-b|W
zkW7Z*)^@p-H&OS95X8N(cU^!ji9Wf#s9xJiFVN3rgiPS_npT`-t%JBOp&AnF;+Hjw
z^RTNamw1e241Mv>rlR&uEPSohA9Q;Olcl;AI|CcY<^v~*Uf&r0)Ro38Q#0_Oj@K}Q
zyo<u4>RhlN%p>N?Q0uz{Tr8~h!8lrw+8;)w5wUlCu-9@zEWZVc4(X~(U$Y@4$T!96
zU0V!RH|-sSV!Z1tc~{G91e8{-_66S0p-i){f^=_#tF2prhBQ%M4h|)&P}ZW-lE7yQ
zYY#oT4%v-rP%he6JmT?!%}{&=&7{z1d?3r<!-<}WzEB#c9Y7C}hqiVRvU#pFe1<NN
zw3gfjs$$c~2G*>ij4KF%>?LahSu&51^@`JeoW+#Xq?y`e>6pJ`fUgovFUITF{6MbU
zm{A`oz*o(R{nL4nK^74DC~~ml*TI&0^u0E$f?2+EV*V6Y=-sv<4gAQ=iLFhj&A0!H
z+JxSVGin3pWsqD={ok<5*l<g=Zn)`{kQ;8t&k}xvNZWtY-mVU%D6z4c_FH^Et{KYV
z?CAO=#39rFJ1IV{3jG^`d>j?}7iIZ4YE_Rohm^Vmo79<JudGM#Y7H?#&zUszHI9%+
z6$}HxVJ5U5oZ#vluh5;)>YN~vJE3)|N8qyj(taLwkuaB*5f;Y@u=8{@29$H=fDsKC
z&`=71x87&j6CACeg;LuFzRvS6i2m``=)_C^@zv;GQ-I^E*0Jh9{iPm<8Yqjd40*#f
z0S8j+vG~XD3>hD;Rlol|Cd=%7LGiScSmrNa)vb-e>J+Mb_4f(uaN<K%>wh)yoRIQE
zwZCEZ=oqSS49C)pPjd#!Gar1@n0{Pm-t_m5kN3CO>ONK8umP_2X<OZNVAd1Q&vFOe
z=uX0~4d&x#VSW9|<gY#AxA4^5S^M=ztaDg?{sC(v^(Eoqu+jX;0T*Nf8#`Gzqaoi@
z;Un#k2YbB%`N`EJ4ztE*n6&jioDq*J^A-ozfP#92+MM6C2$1B3U|K$rQD1|&D3vYW
zys#c#Xh7X#`5F{Dbh@{^cyNW^Us^IMH_yZOnQSNa>Z?P1DLzK1SxnXVTB}sSRuTd$
zmkp?^zWf#1=?!N6f|c5knO~?+<k}tZ6FD!|b@b?37|Omiz`h@MBagalIsdP}oei@i
z4V+CKRV$CW<Pg5ev9vK%Z#HbCI?iU+UwFMOZTPQU;>{5K#|)40qpdENJEOucUt;wX
zq~Xv5Us%;%U$y)SC_bI$)!$yj7fVgQ52`rC567BsYh$hXj`8hI%U%7IT}$eEewhlt
zNrj&#LlL%b^O`e;@vZNtDJ;>gU(q!`GW|fsG4?W+l<}i%?A}b%=U(wkl=|zy$CxjF
znl)&~BjI$reb`Mc@lSW>7vdKK<?m~p;9}%&tK((n6P#_;zf)WOk~4o~<OJ8Y_}|G^
zo+-r$I~~VK(v#hz^W^uD{rnjNHUv-HL(Ar|>>!b_zTuyzb}3xOFBR7DOSbUlJhM<#
zT9DkVn;_=TC8IOlg9oLK9Xd2bMc`M;ZpVu-4X;M&^yz6u=0fqQWYi9?K*QIJcU!;M
zjCiK3@iIxBKlCe`S!ezU$DjXEcjK5We6IjMu#GRu8{Z2^b`QZDmp;6EiudT%2L<$4
z0b0G^qaqx;a3?^Rf*B|b2KW>B{6N01tmNO3blUNMK`-TRm8u29<M(Jahbu5vg>+X#
z4gVp%$Y2?tFz3ly-`d%Rs;%KEg>qJ`IUmDRUA{r4<|4x;K#PyjEUUp;W)Wo2=E@H~
zNnhZWujxS2va{?r7{mNB9%I;F+tXH%%%2=rSy?_*#CuwK{NV?D!amsVJ<u#877soE
z<S!l{^|#~k(RqqD(knR1?}@02nha+hLqqMz^;ub_U?&<T|L9ZHQz2%5R6nr6I!zdZ
zA0EWdiB;w1c`IG9F1Nd~*z3+Of|+&mvj}ef(5d84me#RZ8k@2-HffSmKWmK-`m@k%
zEstz1j|p1F*?Ruw-!B6{p$C><G*@G|<(^U+I^5>pMAzA5`k8dx;_zs?qo;+G27Z5y
z3DGn=ZB8bm1gjgx{TLNjtK2ar*4u%4A7c(|5-M*t8LA_K+_L`gfvmaxdxQalXt4;|
zNm;(%)Nh8{SLE@O%@h?9MHW7XU5Sqs4#n39@!S=Q2>$Ze8AYXexkd8K<qUV3Z(gSS
znL;@Nmq~v+^r}WiWkz7U%SafJl~#qXNQL^fH#zQLfiNAbcXD$KyCEZSjW>n$-`EMf
zF>HL7E%X<(>n$)gbiVLgYJFng^zC!JAf|nhn9fl>UtB!VeL!xSe`hGIp2H+3x_tdp
z%zC-C`pG&mKOy`HwE}`qb2jK_t+ISaBMc!oD*vV8LhV8}w73(^;ZVIjyn(%aqU#g-
z#M%E{jY9G4|Exw0|4#8yDTCeGXuqNy+TtHo=DI04p_vB8h`?8A&7a<rBW1|XkQ`O*
z0~>mSOb6@!?flhGf1Dr&s3v4;pMZ2F&2U$g@TDIgUJllNd7Z;PzPvO;ekTB@*kf_h
zr0zDJXzdSlb9#fj`F~P{tPyhHbtMgx{!vyTe%qq}dyExD`j1(`J(aU^RtH{9!^R*k
z$)@AWRnh~3GsLf0;lL=)1{oU<wT9ee{7e@=tKu%fYMCq1Jwg6DP~g{c`7=StQGWYS
zV_xkX%J9i*e8)O}7FMaX*WW|S*op4n(8pd3bBbDNA0hbPRZHKy9+PDjy#`dIfvnbk
zH!^hNjqx94YOj2SZv0V|X|&92yG*61)uej8CV1-V(3;%X$JbK%L)lq#eQD+8qkS{D
z=8tcH@K@MMurJ^*=d1xlX}P;x3Zk!Ulp${<;81H1OrPvjE0BpZ@O@Noai)?^U$P;x
zOoKQ5XL;~;xd+YgVN;`)h*OdDe~9mjL4Kwrcor;`NH3{GEY6Ae+PbXViB)UP(=gLA
z*$);H)UGgUkvA_d52p|M`bzt{G)g~8p-xf+o{Yl@fN~GXct-RV&j>uqFDnb&&*xPf
zw`cs&e{Rm;GqYZ-lIQth@rB!icOr7}I1h^wh*Hj5B?Zh8)yP+$yU}v)dk$8O&ndwh
z{*|6{%8DxR-k|TCnSA|8h{H|8MT8LIFNLC+MsGSz!}g#ZUkFj8@M?vt6i#feo-5p@
z@UIry{fR9#EKs;k;ckV0DeTDn`a47v@dKwArLZ@#X_$y1Mmt12v0a!*BEIJk1BmB4
zL<;dkr^r#5LG0@g*~Bx$#6;p8A*LuSAU1c10@fE;#(Dq?dB1g-C?o#n6n^3~A!-zc
zGal%RCG8Z?qMsU1bBb!x<HAG^Y2YH#EyBc7VxKUvN#S9p2fdv1txmC$_@q-jpfLPo
zjb2T9vr}v!4t0u+#7L*uO3Vxs>sW8#7KPh*f0{#VC-!rQUBsuI;()@Xj0bv;!b1wz
zkx#h)tis)l-^?k#<a6Kyybs*N`)@hKKHdjz;C<jh-X9t!4)Z>63-1FD@xCKW{Kfmg
zt-KEuCjnn_ina=u^Ev29J_mMFSgmlS!f?j_6X{3;7b%S3{g<7hJ!#-lh3$F&H;0HO
z4P2$LBkyl<h~A`us})A`{$oxtKw*YLKkJA4DU1iqR#>R8H{)IB5UHerF{EcW#BkEU
z6w>!N#YED;RMPXDVhU+sHt8)+QA8Rzk@U4rQAQeANcw<7T&!@p!XjdO#3O#}5Y@zy
zkUL_tFtL)D8YWf|k2u9$#5Rymwg<S5^b6oGaRuaz__ISCR=AOPHu$G-6EW8zo+X~?
z6kCWn4iUlpfLlp-a)@ojU%*e^2W}@_1-_96?jYSOOtdEr+(~*wnAk<!?i9O;6%Nsj
z&w+bLA99Ll(!eiCk9CUPq=5%WPj-rf#9tla5OK3Z2tM!R6yd}loT54LQ-|nCjCG1A
z;&i8oA!dh(429VWhf|MnKc4gy@KfO^g-OIb*dK)x86R{C>EtkxsxXT8K~Et)EKC#<
ze}TOrUg#86#14>8g&P!JOuWn~Ruiv){u7s>KZ$)DVh6D+3^(QEoG=ltuz3fR2Repy
z0_v|YiuXZpBi%Jj>{hr(;dWw|FtJ17U#vIiounUiid_n;c^~uv(o4WE(!hhH|AD<E
z4Ln48n^PPnMnmsu_mUl=Iq^owyTT0$zf>4W%yfvh#BSghae+hRD2$Q_J3*WPIUufq
z-Vr05BA)oBLnILwgFnQR!bA%3Zs;j-q*DwhmO8{J;;BxNL3|411+fhJNt^@yBc2>4
z{KQ$%Lt<o@s3u+nJ474@yF>iZA+9F=;}FY<4%l~ME2mgRYz=-A4?08*@h6A4i`W%<
zNIV&Kn0T{8Y$3i5y&~QUy&^6K|A`6EBjUFXv6HwH{2`tMJ5B5vCJqo+V!R|jfCovB
zgWV$yJVg2|=n2Q0-3}2R34B6`w#2WUq9fzQg^6y&_%IPo%z?fTFGl|o=fhqS3nBN!
z;pkstvJj()jnJ>ezF{Jp_%QmFcooK7VjlXJI060z@p9NR;+QZ|C7)xQB@T3mMZ_5N
zGjW$wTut;j#d6{^4zZGWHS~yh8~T|zALBOhM)Wgrhf}O0UMj=`#PMNb1Mvfg*hpL|
z#1`TY=y&4F=y&3cLTo4Ygx(RKa*CbAzcJ1d9}{8^F(OQSNqk0#eZ<W|93U=*eh?F(
z7sMCfcM%^$|5Gow3K33h873l#_rZP=_kbV7(Xf}qeL{33_6A>w-w6>-i~?VYuY*6t
zV(0;JHTXol40=F3Bt!~v5cot)3KPSLgTurq;;-Nr(S>n|c#=a*B#wgpB7O}2ig+sQ
zGvuTRsvk{!8+u5*1?3ZWqkN)Mh$JG^e*ke4<b?Pg$|r^kF`W1#{5|3}hsYo{5+a-U
z2FfQkhTlePh4G7c81h4GB19n(4r~!|4(uv%A?y(GPuN%D<4$ogv8fQ%#AZS)B5rqx
zrNonjxSH5ph~-2t^p@B{h*d=B%W7gv$P@8oA?_lc4tXL*LY|0A;1>}wE^j2Z5@Hjv
zwGht|_d>6UZG_lLY%9bzVn&$QPCP}39mIA*>?GzxzKEv^v76W)az;E&h%bpR!XG1k
z;SdLi-5_Vg=8!Yu*BH-<9pK*+Pse!C3fK|yMy$m6O*{j`CGkulB8jQ6zr;>Lv?oSE
z?uZ@3L=<r__)i=F|BBdIh~C65Lc|ce2@y{`3;ZWefcy~;!jB@JEkr7@JNQqGhP@!}
zgZvSDfd9mvLQEv~0{@A<g~%cH5u$*Yh4GZw7yKulBSaZ7MhHLAB}5f57IuVK13#U3
z2=;^+C&W@>Joryc0RM@JLaZdho~<JG6Jj+n3H&GC34e;13;q-Pga5>H!GB^`*b_;E
z|HJ{{Kk+=+7h)s$!^HE!f8u!f?ZkoLKk*{ib>b-4bz%zmPkaIPoj3^mC%VCZ;!^OR
z_&)4B@f+};H~@Y*F~ceTBJPC3wgx^6zlb<khzMdi{3GHJ@Sm6pyF(o75bcRqVLTwF
z2@ypcDnvKp82DwxS<rvtFz}za2>MSP4*nCPFisG!1OJKX;6HIF{3_zT7>9{b@WY5B
zz<=T=@P~;b!GGdt_yNRKPEkNC!+ed1`Bo88VEiDC0{@Al!G9v=FBcQf!njRbk8zur
zi1``u7L41(WQ-@oG2lNj2L3Z~Ecj0xf^nO88^#mj9}cmOm;wG1#|g24SOonie(n&P
zi1)y6CT4>F#4PAPF&q3Rj>q^yT#Ip?cqjNzd=303UI6|RCqn;;8y(_HVn?UgN1TLl
zh8Pb0Cw9X8i#QqM4DoaDpLikkzYTB-^q-jO6cNO!(0}3qj61}?p#Q|N7<Y&%;6L$v
z=s(d7{u6Ux|B1QKe<J+87-Bo{pO_E+6ANJfi66oK6FuNRaXR#$xDfm&?tuL#UV`z5
zI0O1mECm0FH)H%EdZGWsnXv!F;qWJkm%{!NmpO!=I1BtIVqS1DaW(XxSOoh|d>i(k
z*c<)?u^9SKoC*6+EP?$ePJur`{LU$Ah%w+lu~dk4#J=#~h-KhEakdZ}i5U1c5zC?f
z#6g%J6Z0{TC-#FsPV|BQ#Jj<Nq9693_$=%{u>$-jreQurtc3m(zl8o1)8UU3yF>qp
zJ-~lr75Gn_3;QqcV?b^T`Ud!W#CgzvVpy1HPV5Z+6E8wE;>EE4#0TMrOLU4T;w9ie
zaRK;GtOoxj!Vf17gWpN~1pWu{F6cjTD)>*l4E!hl1V5a(5cZ##0sa%4!(Svmit(R#
zG5kiN7y3_p3FAL;5%^EM9sDO=4*O611LHrjw?kAB7sLJ&{op@w3HVP;2mgs*g8#%T
zz<=VE(0}4p;6L$d=s)oq=s&SD_%CVjpSTSAPrMfVCoTv7iO)O5CgT0jf8q-0Kd~+B
zKk+)~Kk<6-pO_8)6aR$%6Gwvo#2Sa#O<W26C*A=56VCzviEo1cM9dcs5@X@t6K?|l
zB|5}kM63^qQ-GJk{u5V$|HLksml1D<{U;_t|A}v4U4?iH#(&}%hlnCB$NY<UEBH^m
z7XByk0_Z<+HO7D9ZP0(>?a+T>=P;2%Tm$|SYoPzcPvQR&{{#LL?|}U$-U<CDu7&;+
z@51;`yc_yYya)UzKJE}j#Qm`U#7W>k@m}aZaUJ+i+=X=#;(G9(cpt`p;t=qk*bVD)
z#QVX2;#ADrh!24O#5=%$;)C%2h!27P#D~Fu;v*RUiTA_)6Dz@g;s)qH@nQIX#Fo&1
z;v?Wc@lo)fcm?Jc#POJ45H||3i?|8%Y~thKKk;X*gAkpt|HLO@|A}$nKk<5u|HMt;
zKd}_{pZFB)e>>pQu>Zto!GGdr*neV)LqrnK!g>wyIp{y}dGMcjCG?-T1^Q1c!1zxb
zf$^U>1nUmO7r}qxOW;3oEBH@*S%?(kE8suz4Cp`cRp>u49pgW78~9Ir4g4p*4*nD0
z0RM^G!GGd8m_HIfg8mcVg#Ht+0so0_f&av(VgHG5!~Z9~3jdF|1N<kx1OJcsF7%)H
z9{5iz1pkRU!GGdL*ni^t;6HIW#(&}m;6L#{(0}4X@c)Rr;QtX{fc_Krga5?u!GGfI
zm|qe<1pkTefd9mgVE>69ga5>Hv0g)b3;rLm0{kaNfd9nzq5s6a82^d8g*Zff0RBJm
z6WD*^r{Mpoz|X*c;wA9^iJyc2L>Kr^JPiI5_k#b#*%<$cpMn3xFTsD}SI~drR`8$r
zHT*x~eAs{DH{d_<)G#rC_yp`faS`T!L`)Ee6T4&nN!%|)2C)mqf8w{`KXD!GKXEeb
zKXDc8Kk;4gpEwu#PkaUXPdotsk2nzP2*f_{|A^m%|HL)$|A>RIo<RHt{vYu@_<zJI
ztS1mVfd9m~82^daL;s0Cfd51f{D0y^jQ_+R!GGd9@Sk`P{3red{U`nm`%nA@{vYvI
z=s&Ry)^&)#!T%@z4*nAlga5>G*nfE+<3I5a*neUg_)q*3`cM3?5C@5Wf&aw6q5s6o
zVgHFMVE@|#kAVNgf1v+F0sBuJit(Sg68tAR;Qtfv!uU^g!u}Iqg#9OmVg5%<0{@BO
z82^a_;QtXDVf-hy2mgsJoFau7jdgJ15%~Ya_3;0QjbZ<Z8^C|!B#i&W;aGnl{ulfw
zUJ3pao524ko(ugaM#KLjM!^3gHpTc)YzF-&mSFrR#)JRFEbyOr9r#adfpt6LR`8$L
z67xTz2otM`e?$L??_&HXPK5pwGr@o2$*}*#0`Q+03ICti3+sBsub}_LR#;ymzUma)
zh^;aIBYuJLpV$WDKk<8v|HQW7Kk*dspV%1dOvH!4e_}h#|A@U{|B3A}{u57w{u56J
z|B0uB34wK|CLQ7b5zm1B6X${d#9`n+@l1^W#IwPFVuvuXZ&oxGwa)(3Az<9`_s?VD
z{C{nPq<GaFSB0eZ@A(IRYa>bX@%|l>ZcCas_ivGOd(!-G{{~5SBppS%M$)`2M4@8;
za!Ge19YeZW(tK2yM7m7Uy-BB#&XF{u77iz!A?bM18KhGr&7_4BNykWf0O=gkQIbv}
zT}V1o(y64&NDE0b>%uD12an*!+EJvdN$-&~iz-}7dWWR5NiQe8Mba#~a24qdlAc1k
zhIEajb4afvy<E}-q&JYRmNctYxQTR`q>D&zA)O;>R<&>&=?qExN$((?B578=a2M$q
zNncEQ59ugLSCigHI#SY$NFO9EB)ydMVbTZxX8W%u4NHRdOL{qJXd>D#>6N6R5oo`p
zSCNLKqWzLyO*)EnjihTxL!;4tN#8{}hIF;0*O5*lT_))VNT-m_k@N=A!%1gIdL!u!
z(kYVOL>d~5_DlL%(mAA~B)x@nA?Zj-ZzWwuT1c8*TUbT<;9qS2cGA_P_eh#uUAUC=
z4oUAMy`1zGNwez<SCQTz>D{DjNY_Yu59xKJmrMFf(i=!uOPZ`H+(f!e(g#RyA)O;>
zvZ`<!=?qC9BE5rjiloW9!d;|eB>flZJ*1-~EpS=5k94G@Vcfxg(n8V^qz{um_+Pfa
zIcebpy+_iKq~W2U{gQ?e1OG{Hk#u{~?MZKtG>j7XPr63ZQKT_ap#75WMmmOcwWOm-
zW8^{mC5_1*_)j`V(lMlmlg^NIJn0P5DUwbijgcGem-GPAIi#Z`okF^hbflzHNtclp
zk{(XFiuA!hrT&wyCcQ_}8Kjqz-XZC1(#uJ2k@Q5;t4ME<^c2!Hq-!LdLwX(Q<&wsr
z0{)Y(mUJQMO{B{tT|{~d=^ROyk={l+L(+cIJ4mNUx{CBJ(lL_0nDidfQIf7Ey^nOH
zq!*DsNLomGDe1$c5B?$bpEO2Fv|rN8Nn=L@?U(dQ(%3me`z5`KG&}>eU(%~dN0F|P
zbPZ|l9PVE(>AOf{MGozk^g7bm!9e>Z4QChpC!Hhd4W!{Yp#75GNE$2cXuqU4k)B98
zM$*rc&LJHo=`ExSNk>Y0E9o-QLekqvSCKw=Sn5CNYSMcoy@T{p(mN!*lk{@ZTO_@U
z^eWODB)yw-4e1(5?;*X8^m0jmNqPh6YDw=Sy@_<0qz{nZLOMs%2T5-uogwK%q<4@`
zk@R8GyGX}K`Y+OZNJmLpfVGADNJsuZ%Dx7?$?AMRg#gu66ScCcsGUQt%CtD9?O?7d
zf$BhCDoF|=bkj}5k5z1>DwSdyZG8J~Rp{&-V%_TK6kRu4L<J2}+v;#uhuUpS<5u;=
z@Y^aPbdHh#eLv@Y)3mT%`|rAjxzES*b)NH_kN2EY!EWL~Vwd1-;vwR}{nG!5U2fpG
zU@vhtai8E^Vtj>w{(|#}F)M-of+rE@6SoM?CoUjv6g-)@khoTG0dWy=rC@C0q5X*~
z1Q!yQ5*vas=|lSymk2H*E+;M&j7clnpEzG|3Gq^5ui%-)mBcQ=rNq_5gZrfa6W0>Q
z1slZm#C?M26E_ma1eX&x6SoUqMBGB$BDjLMjkr<pb;Rw&wSt!tZzir3j7?{>KXHZN
zO5$E(LvR&wA90D`YT|z4LcuGE<HY%bYl#)HS8yHiAhAnuJ@F9n;OEl+iCyD><ANKB
zvx)lzuO;>p#{@SM=MlFHUPqiy+#<MzxPZ7(a4T^kajoDs;v(Wo!5fK7h${rQ6PFSj
zf;)%};u67|iOY!#1#cm)AkG&YBVJ1E72HK!N$e8bOI%GnxL5i=aV>FNa366!ai8Fw
z#Erx;!TrR|#O;E25w{Sx2#yoC5jP4RAZ{nF6|9Ii6ITk}O&lYx5IjiSOKb?<OWa3X
zB6x_npSV!)0pd7uzF-%+_EJUc73?M+Bz6hTCLSUl{7m{kv1>eVT(Floo48LfHa*e)
z#4*8n#CgQ+g7I+??N8hyIG?zHxKS`R=g|JdwSo(Xi-;=)<D)p*pSVJBA#o|OAsB}k
z(Eh|Ff{TdDi3<heV;S0?IA3rH@ls;1;F-jg#4f?5#MQ)ud!+vp*AmAC8^ra*eS+r`
zHxkDLmlHP=w+miG+(O(UxPrKixKZ$R#O=hjf|n9+Cax5G6LE~VLU1K<FR>xGinx!s
zL~u26KXIYpmBex4e8IKEir6c-j(CvRCAgk=h<NZ*>Hox7D?@+5jl|i+eS+5#dx>L$
zn~C#?+Xb&9&L?gW+(KMH+$gw}xRAJ3a2s(Eai!pm#3jTPg4>Bpi4DOW#0GJR;LXJ4
z#D#*l5LXcA3yu*lCH4yLBCaHM3GOAXCLSD={!d&>92eY2Tu<C5cqefqaZGSOaWiqd
z;9bNm#4Up3#BIclf(MA(iE9Nb;?2aBf_D?gh${pS6891tg7*^l5tj%aBJL+H6nua<
zPMj~;h0wlK5qkx@i3f>Yg0qQ-hzI{6{hyd;i4$?bUgB)xKEe0^f%Yek3C<(VBW@Qw
zi8!CQMQ}cG0db??$;5@kwSo(Xi-;=)Pa!TLt`J;ETuN*Ro<?jCmk2H*E+;M&JcGD`
zIA3rHF*h(0UcoboD~Vl#ONpzA2mdbppSYGdF4!QhC+-tGpSY1YCb*oqnYdl>BH|X}
z7Qq$7ZN!a&uOn_Jt`)qLcr$UO;G2kJ#1(=oiF=6+!Bxb4#3h2OiTjBQ1+OHI6Xy%A
zC04{<!F9xg#4f@0#6!e`|0n&Q*mVSOTyP_CHgTWewZvZHnBZpOJmPl2>xlD-TLiZd
z7Z5iJZY3@xt`*!yTtr+ccq4HMafRS^;!<Kma0jtLTq1ZgaXE3J;4Q=z#QB0_#7l|2
zg1d+-iCuzwiK~eRcT4{#t|g8O?jx=z?i0L|xRE#}xSzP0xLxor;uhi-!Exd?;zq#(
z#O=hjf)(**;!450iDSeSf(MCvi4DPfiTj941P>AS6Bi0TKpZE|7wp2&zElx=1-pp{
ziCu!TiHC>>lhXf*T}J}P1$&9JiTecS5_^ebg7b*;h}#8EBF-mn5u8t4K-?&JGI1es
zt>6OUBH~KHQ;185D+Cu3ml7L-rx6>(C4!5H%ZUpG&mgWK&KF!lyp-50cqVZru}g3%
zaW(PaC({3kYl-864dQy@KEd;e8;N6r%ZZzb+XXKoZXs?FTtVDM+$i`u;&$R%!AprZ
z6ITkpi8w}FA-Iybm)H<oMchYRBDk8kpSV!)O5!+izTjG7MeG$^M?6UE5?oI_L_C;~
z{!i@s5^!8_BXKrypWwB`UgDVGX5u{JcERh2^NCvow-6T)HwtbgE+noM+(ukPTq$@X
zaS3sS;CA9tVnc8Tu|ZrScr$T1aiQQX#1+K(f@8!>iM@imh%1R*f_sUpi3gSRf8tu=
zxZpnGdg4C8JBb^KV}kpMn~B>6?;>s?ZV?<OZX<3KJV4w|Tq{@+Zzir3yqh>iTp@Un
zxR=-vyqCC-xJ2*}aX)dP-~+^Q;(Wm_OzoB`Vy|E~@gT8Fa5nJ}@!-eO|A}2Wz;VG|
z;%wqR!MVg<;+Wt(;ymJZ!IOydiCYBc6BiIS3Z6_{NL(wpfVhabQt%Yw65<NMg~X-A
zhTv($262htBI0u5LcueLD~R(2mk=){_6nX!TuJN_TuNL`Jou6Hf8tu=xL||0p14o&
zeBwspnBa2aX5x0ii-=o@TLf1Sw-GlAzK*z^xK{8|;?2aBf^Q;@5myMVB<>|P1XmIF
z5tj(AChjLL6ugo+PMj~emRJ#c1=kS|61xP~6Auv&eklE)*mV?eTyP_CHgTWewZvZH
znBZpOJmPl2>xlD-TLiZd7Z5iJZY3@xt`*!yTtr+ccq4HMafRS^;!<Kma0jtLTq1Zg
zaXE3J;4Q=z#QB0_#7l|2g1d+-iCuzwiK~eR2c-WK*AmAC_Yv0<_X*xf+(;Y~+)vz0
z+%9+*aSL&a;5cy`aiib?;&$R%!HRe@ai!qh#4+Lu!GpxT#D?I##C^mif`^Fvi3<fE
zAdVB~3wB{@zf=)>1-pp{iCu!TiHC>>|0eyP*mX2;T(Floo48MKF0q$5COD5ckGNg%
zB;tJH7Qy+%1;mYlClePE*9tBmE+VcJJcYP~xI%CtaVfDOcp9-mTq3xLxSY69@C@P#
z;(Wm+#7l|2f@cy}61xPK5?2!s{#E)vaV>FNut8i;+$VTGaU*d|a5-@^al7C}#4W@v
zf-8vIh#Li8N8C<aD|jjKX5vc0Hxb8(D+E^(_Yxa|tBCuEO9WRF_Y)TiUP&A$&KF!u
ztcbmW>xc)5U4rY0hlmG1kp55X@&LyLHxg$P_X%E0>?Mu~ZYItnZWp|cIG?yha0_t(
zaiic?;zHtD!EMAv#Fc_K5|<EH2yQ1XB{l?i5F5lLf;SVF6Bi2JLR>+dFE~cLl-Mh{
zi@1{5CAgQkns_iS{hzp&I4-!4xSqIA@J`}J;+Wum;%4G@!MliCh+725iQ9-91rHFn
z6W0n>#G8pL1@9(~5myKvB<>|P1n(v8BQ6m<MBGnYDEI(zoH$>w3roADir6dIO*}~K
z5}ZvuL_GLD_0J)8d4c1Cy~NqXeS&j|y~HuWdBl0d?Sdx}=M%RG&L=J)ZWKJ3xRAJ3
zZ~<`<ai!oX#3jTPf(waDi4DQihz;Tr!9~R7#D#)q5LXcA3oaq%frW%u@J!-LVwd1j
z;%ef-_fpV*4sk7UT(Ci0PuwSXK5-*)OmI1IGjY4%MZ_({ErKhE+lU(lUq{?dTq}4f
z@n+&m!8Z}dh${qF6891tf~$!8h)V=l6ZaDr3SLPZC(ajKORR{!g6oI}iCu#0iHC>>
z|3dv6h+W43#|1YMXA}1cUQ6sHjtOoi&LeIYypA}ZxJ7UaaRG6o;8x;7;#$FN#6`rF
zf;SSE5LXCpCoUy61a}Y{#3h0^6PFVg3f@9oL7Xo*M!b~RE4YielGr7<m$;gEa2NI8
zL0n557u-i&PuwSXCvhWjOmIJOGjY4%UBoTKErR33ZN!a&2Z-B=YXvLf&BT?0cN52m
zD+CV`_Yxa|_Y(IJmk1sr?k6r3e1JGkoG;jgrTtPx>;?8mKMV%0QiFLe*Xr#@;h<7@
zcb@e^1D1b56~p%+^BHbkgu8MA!PGMq_-VahAyduAxAN$W$!g_+RLahs!SoqO4|jR3
z@9({O@sew{+vFb*@=xO&qmX}F$ba|n<liBg&+#dm<WC+&{x3-HaZfJ9nFjS3rt4r8
ziB*m70fv-A2dXCYlwiMuzlZo6y1QKFnkoq1T{0!ByX0$G(M#OX61RzeUHqpcyXO)q
zWu!#aveYx&yivDhaJuk+=d|Vji&Hr{9g)H5bxgtkN1eC@^uOy=L{5+51Gi(nYyWpn
z)&B#hp!otFB?$A)A**R%Wj@n@pJtewW6|+Z_hj`WVVV;Rq@F2YsiU<(@D7)H3$yS4
zQT1tXk?xXQH0SaEu{ptl0zn?`ZK+m#+Xi(t1K;?}HIqOfI>rpoKvr#$E9B{RWtrg;
zq-swx!|o9|JArgghGV1KJa;_1%{w?h8{VC>EKeQ%zw6+&b<iE`ziBcr044HKT)mGE
z)M!5!zUZmHVYAX)lZRw<zvvjKyB0#Gp2=mwO(+O$t?v(Az4)5#jT!$#hYVa5-tATF
z7+0^}eiCG_eZfE_S7@Obo{t~aGkei2)|x^5d)7PK4vx8^c<{DUt&THTr6ek4QftG^
z))k5emn$>OElBjmqpk3i4-Tf-+T5S-4wH5kgrOuqXas+-&vn?Z!xaJ3<Zfi-)v7!z
zT#mxgnUmeaM1BV%=9(cei@a5Jycy0x39$K+C27&z$*I0@SMJr+Qi4si8}xHb!>uOe
zvT=&RA(?C5=|*b!6L*<95>XH0M87EB6H<n;ET>Fu(EU53ZG+Kw143z%diyw%*@HW4
z$*+e0;Wj6L`-vcCM12El>z^T=Z-CmC{ZZ%^9}NA`Aw-Et#w^KEKN2!ef{Zo)-duB5
zwl(wKT=f7(7|;r+o$$-y786aNM}b+Bt>#P3TUm2<wqdPss}0zwicXuXR$;(mlw1K{
zkjgsfk|2fScnRUCY<F@@v>WL`^&OOD-D~l&M_cSFwdYu>=mCdtSFIV!w(fSD;W{*m
z>5cjaroLqbvX_mqd~Ich+KoNJXiZ~KjYU^B!@E!@>T3_jrqKky#sb2uX$QmNi>juB
zoi%%!p?=EL@ph3J5FPn-vCsr_yt@1#s9m&g_RKM%95KT+Sb`y&RekM-T8|xR)7OR+
z(|dX7_~c|!LbAfhO5lQ-D;P{wx*?pQTC@#O!8Ee1`Hi_z|JuZtP{gcR3yP@=)fMa)
zgKp3}qR&&e8~&`*FOc-{b~;b=&6}6HFcoT4yI{leg{ccI-$rb=VS!u@G80fd>T7{g
zFs;AUESXkXrR9GFx>DMSCbDZ<&C83TzJ_RDw5C4#Zt|>XPjYNDRA<iovAejh>R2;W
zUtBq~GO;S#3^f#2?p^-A8LEq}v^p+}yn4sGQlfgO7*yuAtU7Jwxap;PZ#zjWv(d18
zE%<+jQ5H}O@zpxqm7hFzURb&3S^kY^rF-!u7h>3j)t9wvhJ9<@G>-T3s$<H^9IGwE
zSAU93tL0cT8*__&Ydw)y(K1pUcFm)cYk%+$eBE1B2u<irVv`s8rMm53(hllR+Qs-i
zNj>?SELUcKz-%MDdy?t%s+E{yuHODrT=Fn$a%yYxTxKX2ZY!1ys;fjTuleQhoikij
zm(r4bu;Ew5hW<EhINcYo^3Z}wSkOOEZ0ueBf$5LadVhiSJku+OR(*LTv!)w+Z#xPS
zr$X6kAsjz>bQz3QW)PnZmot6YFo7-R%Wjv`|8me7)K090R&W3GkG7m%mo4FMw2{r(
z3@y>|hH8Ib9KFlCuf&@bIvOri=?<tPwIU!M9psz{<eh$Zr%-+flyz6P`_lyU6+?ZG
z)b!Xn+s)oJ4+++aY<AvR7-!h=&($J0_JthM@$W<SsE%*Vb{pzS?FZ>t@NGMe1kslq
znLfhGfA#jUB2!N73zZ1BuF!Yb+RyMe{7v^VM8R(`HC&BULv=6|L9*TO6%0sv@U=5>
zrW|F|S3VU_fv`GVCWtg$Pe476MxjEl;}eV{$s&>D4xFc1y}K1sppi^}PBd~IVrI0d
z0{_}hnH`-wF!j}Cu2d(p)T`*FOH!RIpss=O7c90y8;yW^>@C<YauaJ$n{23`Bj}ee
zw89nd9!wc_)q@CXi<elPEEF)*w_#o?b>Z8n>D$OgScwj9`PMC5pcxqI1+n!y=p3%j
zc7^5}phebJs3oB8hJme`R?rBlze2U-m}Hsd>xHI<Iv=a8<dH8SJh>8hNQA?<fbPf=
zRCgt3>#RScz%b3WfVvzENrO849ac|Hn3_uPP$CFSP3hWM$s?xjLozPxpfXAuR%9ip
z8fqgoEVsg6^bc#DjkJXetWK7I)|a83sP)A=H6v(!?+4O!wOd8BsysG4BktYW|B@4;
z2NOJ}8y%{PRZWuIRzp=F7lDdq`w)UAenBBwbDg1PB5$$XNJa00f9V3x+L&ik4AM3j
z>h!myA;Q;YG|qRSIK&J!Kt}Nw$oR+~;00?qR565!YnXEfzJ8>q?ou#I6x$q|*q~+6
zNICwaZeShxi8@J<2tm`%To;F+yiZ3#n`jXy=lnyeMGsp3UMKrnR1_J=!!eYEYk!+l
z=1N#L%{jWK?yV|apw%gG?uY{atb4WUR9nCnr^wIr^hJ}gGuJtpe@8b;Gf3uA2Y-W;
zc`Iz1`~Yd%*=>cdMyjsDcAAS%K+q!LNBCERxZgS=CSIlZ-EsBy4{_!Vbe3f?e!iwB
zPv$iTUM=x7#kl0VO0`J2t#-K-%dx-FKqyygmkS`gUZtv}>;t-N>H>9wb~a2ABxGNp
zHX}TtrahbGoJ#6(y}5e(f^@wPbPEjE<9Ud~)MGGOz5OewXO2e{%ZDZsa3344Z;sc@
z62C&Q8_l;1-nM%C2e?#5TV9}UI842<SlbTQ(~&D&o#(Mi-M5c5OWjc;x7&S;%UK|E
zM1+Z!3FZ4h*{t!_*5tUV&I{k2=ehl?NXiVjt0pe<2Ft8jZUd7t^;JYUjBL;kQk1Ek
zzZYG5X60c_ag~(?1L|U(<O~jMm+<avHBOkE1}4i~x&?=Jq+7;buxoitUygbgYva}1
z_u@ug@vPk2js-7_FuT;_81+rxF1BYN7s8(Pa`C&jkBPn;NmcpHEAr0zB04v2UEvPb
z#68iu{kM-duW;kPR?Y;3YIAP?*tr8bYXF5{5R}~Q&gv~og$4|@0OFLJvvL=nHH4^r
z*Xwp8+QVmtgf%&;NW}9)yyWSSZJAq{2qp`n-Q}h)H&qx=b2uLPayjLTUKs9iPp|QY
z-bpUhdJL#XKwXcNNlcQ}!8cHv({UeS4SpEvCOsido?@;z5ZPD7E)`HcD8>l6M9YR%
zL2*q^=r3vs3OnYuN3rnk$!u9}ny=pe)SL7<Oiojw9L`SzY{(}-OgCh-#~feANf@&5
zU#t)sb76rSeg|$C8?!KAKn?hJF_=WLv|Dmb;$aMM5Zvbo-T=1{!JolERSxgGOHa6?
z7pZL=y6k-!XN={?qSf1vhg{AKBxBmIXCGMS#MRsHK*&%W?29jyaX+A5MiM8(%MjYN
zSQE?%GTVt>xNjCGKp3`ecL&uGSTdjhq_TW*L%r4qQW>+!lamvX744SHr;tg@z5+|C
z$_?rGlWz5VTJsW-dI?VA+Sc^aWR@?-5Q`RRf2KLb)&n#orVdtaV;Ssu!fOx!4hY}%
z=b)$OK2T<s=HT~Ozt@^mpF7Vih3V^aEq5bICtuap59_$gg-diueHFu(P<KevuBd=5
zFSN$9@QdVW(hO4&%-9Tjb@W3sd=n`svxdGyXZjPD40N?DWXO`jZh9@Tx`opw2{i3#
z8v77(oH^<w)1R#h@sWS^_PKAsB4bQfY1OxlWm!ux5Unax4`cFzO#|+VMSIju7}VK4
z;DG^k9(r-|o0Njf#Rq5?SuQ3GGK8VugUb!qEks>ZT_|-wLq9{0O3#|NJ7g{&CUZXY
zd=ib3WQ;Wwzdt}&8h%WwG)M9K1WH8NT(m?V13wGye}81b2~?Nox?Ir@vC!9=s~Jc@
z{Kw^Kge&z7{2Yt<RLBeQ)Z-9>J~xEfW!2G$1=tWUUD4oBboSop!SLVRRrJnKUO=4#
zJ+v0OM{S=sFCgY98(!L94|z~Vt-^mHa6dYv2z;eZ52o23tpkDz=z_m?3J$lIx);YW
zS8xBt>y&yCmiKm7&<kz#e;j{lf;!ALz%trxP6$_H0dz_26*IHU5_dGz5%sku3rv42
z%9*}a?rDToj;sa)K{bcdQRH>yn`LgUO?|D?CxqUt{lUzGpk$A9&+2smeHmT$6%3PF
zis*$1L|EXRmn?vqpVEeGmm-*7gj%8_P;^i|fI5obC)DpSs~Z(nWc0{U>oBQZz5Tfz
zV_ea}aIXh0R#J67+W#e3z-3;ZH}$P(@0$wI1x~krKNfSheR=c2R4R3jFJ8QD#h1p;
zjbpIjf_Z>mxjU!CP*1-pRteW&5q1J10llf)9ljG|<XCgL+nno-_I%bFum?5{RFk@)
zoNpHjMlZqQcOZI6-V!*!w@jVZGaL?~?O1554x+P*%09L%+u<gOZaL0S`T8p&fC@30
z`E&5Ynw7=5(=l2&a@_<v;0n>@lB(mexZezmZ1^49ei|kPQQyuH&5sZW=Y{`cLT<t?
zrP*d>PA~}Ou2g7ebZ(!T3;t%!PB!oCyyzF<m)+qZ>K=3#zq9-+rhliMGTxlK)12o<
zQS-{&tk;U)@!T^AtA}g)QlW~Zfr92G?&NsWw=*1bpVeLb>1{_t9WYV9Lj;E7vHr!m
z^OmK~8l3Ly0|#GU)*yP!PW7-9$bpfG8i11Dwd=l*g+J>;t+{>0rFpka#4bbbJVSNc
z-La<66*@Zk4T#|ijmO@b3*#yZL!p>Eyh>VeHd?Wdt;qffX?LnSw9UaohKMf^F7%XN
z_+YYMbxv|Ja_u4HPsryGau1tm$m6-s1D{G9i+|Lqc<96SRjk6zNs|#v+Orr_)EnGn
z+m`d%7_R-Vu~rYFd^*x#ikw=#{U5J#CE7;k^<lWcrj0imsX&(9hW0Xaa<pj?nT_F)
z+(pkp+_g%w4ZU(z_islHDT3VS3bz$uppJgoT5}5)J7odG3iU=KLc#-&GUX@yE1<kx
zqM5x`-Gkl-J@v9p4Ip0Fl(=4l*V6`nM}sUVUzQb6lNnpPyg_?$8mR_PtfMR#i3K0W
zf79!z@K)x!FiDrSRMq*(b7<b4K=hzmspFEf-6OIaYNE~WXbh6-xkuAh77Oax`j61H
zS8sn3w`<IB8`o>GZ0wn!jdQG7*@hZm&r8qo%{Bcjf^hY6c66elHX#<<QGb@uxfXP=
zjckQi$N~{V)n~f*+3U|`Xn(}w^l0_DJ&hYPbsy(WvJt}(i+c}0MT2mDH4jXjo*Mr*
zrTsT9@`ra{hs`R+nwlI$-jV$kl5=s5y+HL<D1b?4%R*~SnC)n&i$QPU0u<P2sBy^U
zq8)AXO?VSDU6xwr3QArv{Cf$O<o_4Pl3Y?Ipl0$&dylO*>9>ogLamaW%^(o2q=hiV
z)pU6<e>T0AubthrJrI~@q~1b7GJBmKG;*>vymi-(Og4TwyhM#%KeE;MRq#&-XodZF
zeq;6Sdis4$wiWut2onU<iI@k%lT+|yUn5-Vd3cDq0u%0>^n7_gEeuBIy)3H3?v@Yx
z1BSFYmZ*(o7FFv-?E|0|Q1@z@vT?B@JAhecD`qhyaRBj#jWw_>ZBV{L0M=CZM_^?6
ze!-t(F~(_+o@%@CHOT-tV{ETeXMldvLpivBN5bQvVfyM|PkTw-D9IOr-iYL1Nb&|*
z{nU}oB(PCExZ^r%3{>m?Mccjb%73-pdzevW+U{vg7)IId1=x&=e-;~IyWC!>Il^`^
z*a-VW_!l%YY`2v2Hjs!RBGGnjAZ0t_Q%JIHR|ZD5?RqdL`j58z1k^^@?gr2pVI*z4
zF`zdhS=;VL()Nk%;`ph|pB-wu?|nhrt-{T`|KfK)mq;}1cYEN)qinYdPC~_>eQAX4
z`Vp;Yp-jK4gH{1`v~G_K+f4x%lBmOCnzp+Mq-@*WiX_{16U7_F?@YMXf3)4xpf<vG
zUjvO1M$)$HMhlHd*0wv3w6*P8@l##-@S(Ol<DazMrQ2ycUj5a34_Ko2MBJQR;eXKx
zUwVi(9YBz?J99AC)Wa7(vQ=SfVO?oYEUt8Cy@^pYYOylDJ>7m0Y@95{^1}1t_-NA*
zNEl`6m*R6?Q!w^aCUP*hW^-vj8`FzuCu=89nw1=Htznp(E(yz@8<vT4HkZ|z5Ag!(
z`YqBxk`$SNBty-YByV`DDB-F5KZK)sx=y*&`MNHU63Pgz0mc0;Z16^erlDSjx1lAi
z&MK5w9h^nX&V?J0NFW-aChG4mAXR=M5*Vgfti%8<?nf?IVu>(_Qnzbb>K0JJ`UoE~
z@L(h6lhK~?h2X7b(KRA7Xl2BRYAxEbte_@fSe?uYs1%wRBGqf=^AJ_;cbH>teiC+W
z!wncq5<kRD+MpN*(dv+FYAO)0!jE(4b4<2Z&#*B39XSstHLk<pki4j@%nCojQuw|&
zoNpjMhxw<F!LN0GM>;=``FY4sb<#o9Cx~#)Msj$QE`6_4+Ecdyx-*bQrb8t|<sgv4
zs6nfV*otK1UyOyXKyWM4Aw?D-sIvPtNuJfoR6TU0P&uHYjOS93#(QBa5s49fO**|7
z+f3Yv393hs%WnBL8jekd$x~w>)k*(W57@o`RS26XLRX-=+q43&=;=mXOe-*No)yVM
zouHwflzBu>n!|LP!)=;_sEWOFsQQ46X3&E*%dAeOV%UXyTqt^MLtNwshToGVLyGe3
z(wbvNfJq+Y6a&8sXJLr>3gonh?TP#;5>e^R+JBPQ27^|3P%Gee6sVeOMGC+ff*I;u
z#6T-@K*ZYv^=W3wg`Y6hG0jgPT0rG9_)9jqlz~e!7nTTj{}BS)MqKn~mYIPr!!mbs
z8Y3Nws1itrI#VKwz4QJMOr5}!iY^&Sovw8$3McSj6P+b!cehiYM;ac-VwzL#I|wC-
zzm7~>0ShI$_sEcK*Zm9wV7ja7L0dbNogYSfjjr?3Vd~Jc9GY*S-I6!hd=i&J=?ua4
za8qYWM#8O!Qj_lp5=rJCnyLN77H<Hm4~suFgY5m_Gn^xRtBDQl2>AqRCc7wP6Pv|J
z{u`IGO^kIo6QSM)(nQ!$E1;J;4G(n;FMiZ}+(X-T(pFjUn5#M8wv22pO1-ixt@l~3
zQt#~Hc=Fj6&V;eD%eJTHn3sDEwRkgqO!oA*`=`dDABJB|$p_vX%$Bi4Qq5Ak6Sem|
zZ7$D^?A!mQbw{e|jN<*#e`3G*Q!d@DOE^wk;x3yfi{IDuL_Wgp|K3#b!R6zz5W$C`
zNDLo{GG|$OU2%bMxJu;9$yi#*s^a$;>CLdLB`{Owio@QN=R9B6-}fo?J5JXRs3{0k
zGTuKcnho#a>(aea`okA!4RD(Rt7)>>l~)z^D#+eXA6>UW>i$aC4XB@UTNmB_#L=9@
zfCb#=TqreGpoTT8+)ysiw`LWvML*YT;^Z_lkZ;ZOriy!3j5%w_4DidG>Aoi%Loj%g
z%Y<2z(LSY-SajCp(1e~@`RG_KB${_mf`MPQ+*=R8W0Lu(d8L^<2BSZ_878>{>Yh!g
zF57|lR31r%b|E8md!AZ`bkOXXHHozF!GZrtdW46UJaBb{Ja8~C^oe<Qb_NgkXdb5=
zmWNx7cX(iXpFFtr=QyvdDdAf|b8b$+T%Kp)XwO0Jf!yhy8Y}+i^5cLUml}IXZt*tH
zgR$YGi1ywTuR5>Ze)98Jjn-t}@AHNarb5&_SP#wf5Pk0#&5Kv$-FB3bT9J#LwK42>
z=gRu>pl3yaVFq)fgT?Q_i~BGe3aZ~egZ!f-`$9)?V<V_u?hrdg_Q8D}x7BM{%7E?>
z@~S)jK{0;v9KNos$hEg%vQ_Czx>wD{rgiRFgT*g{$IHbv*`ZU6tUb$8_)3zka;1#k
zg~?Xqfs&VlE%W$M;d6{y?3n%m2s|xwHkQ?G&Sf{}j>{dg<8rY(+7o?~8!kfmNG&&t
zWJrBg*)nYP{hiV(Jg~vNAK4&2ibDXt=y88u_mE#oq3tLHaWJz|5C2v~;d&R9u-}cy
z2+@XnhkYVMTjYAFUWe*vVj4yJqd%_Be-W(w`~-n{n>m+;*#^UGGcU>A-&fqbg05c{
z^<&d;mkKcY&Xvzo{y0vSEkYrDVZu&~Kc3ZVl%Wh={0$6wVx>3=!%*KCX{gNL1W)3o
z6zbzxM`)l-{S9hqabTuspB!dr91#O2qmk7^|3{m3;4eWzpFK~*0#X02vi)yfhP_R7
zB|^RMC-bjnvNLJkfwQ^;Wo7DwPAP>mT(^p@(|rRgY^&^2H!;xrscE=oz!iO`YA*UL
zgvHz#YWksOTq!+uK{3oKFHD}pt-rD8A}9tv7`2`4wm4-|M~G%58GVPk*_$PZ)GJ;|
z_BuNxFYcydf8NAMm=E1RiS1n$-47e7$J<k>sWFTOd!8;|2r~tsF|0nI7GcJ$O%9b$
z%2YY6?{f%q$qTXTi4@Q(Qw5Ivan$)rW*u90yGe}S2yMr0%^dFU!7p(FPkBV#DIzWe
zRXgdpJiiqlN>z<5iH?W&AlZ7(CZP{b+O^Fw>Ww7T-HpFEfub?DYGv3w{*tOAP!IcG
zpe8>ac@rV}`$M#u{<b@Oj?fYcPk_Q<&Jjj*AY^DiQfu*_&JoTMGS`C4Vb2jZXqU?D
zUHTj&&mbNtb<bqomFY8x=m<$KK4C(B?6WkW;b4{Gnt@OfDFHRzA((NXdzj+pPiU66
zI}V{Z`lw`FJxI6m#i`<%!%X^x$vfIBoR-r*Hq50=xcu-?F2i!~{Pifg!y`#b<h3c{
zOeL>6BmRRT)Q6KLc@P6%kLRNOapVkc(c?Ccje618-R|k3cqpE{03Qk7W82Uwr=#29
z2loFl$R=g){PqL*tfc1Ha)bs#pQtO5`JZ&+(V*4afA-8FmK)Z|HCiY6o;3W$ZIn(^
zgyLnOI8vuOFiHC_I*Gqgr+MgiqEj{YnKN~&ep=gBbh-<fhtWw++&-bGQ_pWlow#ko
z$Ox0BPuymgsc-1W>k!J+1b+HGp|c8fM)~QXUe)mXv{$|Plok`NtG%lBHA!%ojP|Mn
zA5+>B{ueH@u$HoY_r}p&PW<m&ej;3+`OW{JOXbEimvN)HbTGmUH@(&cbHw8ADjdED
ze=+v%Bcg9cd%_<a_^efCJBYo!+5wkG9L7fX{yk5tBSn@oA<O<ZSL3l^*D6fLZy$@I
zC^1hp>Ul@><>Z9>kG^tN{gIc1adKyGru{g^TcuguuG9B-yD%%On$TU6b&gd!1`unz
zDtC9*S1+!6t2^u5?u)a|4vh<M8<QMgKW|KU+t}3~xiD4y?GIKTbYZ`w>L~mdvpY}I
z%hvp3zh8e0%DZ&T9R9+)@FTX+3cUCg-d)9Sr6KQ#&1X)t{tQpzD*Fs9zp>A;P7jt`
z*yD9<S@PRCr=c4#_<W&z6-&G@vV_Yn(S{O>qrSD}mTxD9QMFkb0|W9}Bv_$1*t~)X
zMnHM=z=TohI~;<TZK!4N2MFYAU6y62Yo5fu(PArHNa=!VJ?1cr7h<y;n*@JFi*o+|
zC$u^~Y*DmTh>OV+&=&Hc>sBC8WX42BnWJoQ1i`g%hIts|c?ekTe?r^9=28SMJoMNB
zE-P&=Rp3IYx+v8IP^MJHTB>YYsxFkDW0#*vUvv)EMThLAeFO$e-c14hIJ4$!R40qe
zHbNMC-#jkKn_xlHmyx_vlCNZ7$(QOKlJFkPWABG{Ny6($$fy`3kLPq6?eH}Ep;~}v
zuWg^S&(h+gL;xRYuHu^Mi~;)0rFcR){6!XaiM|+9bz<bL(Bv{6{aBB+7WX*tb33NF
z$s;6nsrXDzQXk=726ocZ^eCP_4Xk$jjg%8l(HrrlM-HR<wnY7#ZJ*Q|sAgC$y%eIc
zu=p|5Ng!wW`YFBFro8gSTyugI+GTq2K_7kt8eLIe3}?A7;$|0`oM$`B&>LlaC_NwE
zw>cH+g7*bfo|NjBQd8_wd*P65-+t^g!3jUttl*g^nkEI}c$VcH@b2+M?!x>fToZ%;
z?6my-A#WgnUAk3R;^6ZT8uOTW^MHTo;PAdI@ydQfnP5Z_p-(M-Y9EOXii1=wO!D#t
zKCyJDYmuofO5|rzU&pYY^rN{u)J3C{=_eiPOr1;~TcDr19_RcsqmZl^mhyO7(O=mn
ze!LNA;_yzW*R08l`ZnUcN7UbL`X@zks9nB(Mg1MlT?StlzSp&?YvJ^0#ny%Jg?BOP
zFGz*j1L`Tv!xk{9PWnqKgafz5FgL#A1r*~mGzizUAL)s7qbqQ;>>~CdvH4UzOlGbj
z;9i!m5A#FGLa*70FI|0>ZwGqXX$V{aH3Jg~+niJ7=MHN91N;OhG~dbC^YiTh6>J|4
zwz1pl-vemiWYK6|q5gn+0?`Uv)$%p%Tx?M;S*UCL7B%QkuW=W_Cv4sTn~_A&HQ<;5
z^?eYbJMoiT0-bKb5>4c0n@9vibbE%Yb6r&znf?wgDD^=MY~?_2dg>_|viuf(&ynQ}
zo6JR=a&*D@5SZ{Oc%#}1fx(qFV0k3-=LT{c{)*|T+Xmw&@YgZW6X|WOvL9jxk{xiN
zR<&0I#5ouzFwwJG70+)Z&yWa24{TLikib(k>2kVy=WunN<Fc?WV(A~T`p1&MK-a2j
znDCAy@Izv&Iv^AI40?=ft?EO~hRS?`c2`Zcqdj_fwtL<C^y$^V`X6QtFAmR3{?IC>
z<iuUie(pgY)Ee1urtXv57d5%+;Ctk961XJ4VHnuoxa1e`58puf!oaMc`Ub!PEZhcg
zMhZtt%2I{;U=_C>^m>$GJgDZPA;F}$d*urbBbm!xrPd4m7upytOA(m4<Dr{SA9ZrB
z1sduObPo7hc$*%L?!@3kJDmn^2kG!ow&%WIqN&Zg@U*`iOl9?_umrb!u^wLxsjlQL
z_{!ny>hbX%UstjMoBY1s9v{vJ0F@E#=<)5~k)z~HqP`v<U+{7zFCg04<Kz21u4DmG
ze~*u^ces)#67A~o@$SAWi6b}|kb8W*x$8n4sMo`O@;I1)2MEf44vFy*!i)5g@o=2l
zcz3#?her|~O<BGD(GC1Y*9@9+o&@1*OEkidQ_-eM{5!&00ksCP7+Nn}fF8M_1;1sR
zUZ4JexdQ4mcpmJ94@1ABAyb_sV%0PRRj=Kt4njzrzkCeeIn;G<7kwvywhjQ{-a}{|
zH*9_dbu^(}nS?e5)hZAQ;t<HQn9yU-2*KoJlJTu0jbpU~@?0-$&Z7uBB${*u)R%vy
zqe%?1zktD(H7^CN#pTf<&!$1Bg^Wvdj6^8d0^w-~^(ZD}h`cs>U;}wcY}f}MK`pYq
z3vnD(__Gk2jR+H;!nTQz@edjb-xqEo%^Ts__ICmFSe>>3<V^Vqz3p!aD^b|VzmRqG
znPFYw3?z)I;O8NH;cx^?^KgN~vYfqiBzd_vAf?Yal(#?TkXnzSXLQXiPUgk%0-Z_a
z*T7clqLpcHlM}PUyAPf})8(c-j_!U27W;CG@npzo8Eyoq0o5uqwgFO#f-dZU4G3=k
z$i^1>v~!QK`%fhFw^l@_jC+hfhP9}%%7MhFoVovSm3mO>{2Fz_yQ}rgiBtI+T=!~>
z`Wr@h`U!eN924}&cDwCVCuX=H%SrpM*<s{f6c}PCU#E(6W{+<zvRuhad8%k_K&}4e
z@cEm!*TYNjbw+JO^j)|B2X=5V1$`VhQBFiL`?K4ldIV4T)`~8bk84Bt)-K-|u4%;I
zo@7{92kMP#Cb}a83fDAbBsZv|?4ZRdJZS%3Rt`M+jQFbiC)MJeL`i!O9m7@&e;a04
zEzD$OlCoImJDPn{Gz+Q?5KLwy2Or@aq91XGI<@gmj-0HSg#zqkHh-;9P(7-<C@%Od
z@6-x$<ZTs&j)VWC6=Hy8a)a7|KE-4zgd;ou)>EM593=3(-A1f;w2sb+Fsl77N+rKy
z7s143_NXEt)PW+Da2LWsMxU)3r|!gG{mJw@d^WmD8U6ISn|}_kyWE*(;0HVom+W%6
zNIPyFno;gMZ&Ro0lY96~ewCUiHNTFUt9K94#xil|Nm2bBvuP4sS4$AJ^7z~0M>Ko3
zXpd4@GyMV42Zl&sG3pB7F@#RmllX@_N%AEQ=OAvO5aACHHt~rc`RGmowLnjH>LXs(
zm=4A7m!G=fBa8LNeVgD81P?6DI?GWOL(Rz`h_Nv;84y>z`Hq31dJ&*aofOqXKLQK=
z$^nR)k~aMkchzL865|>^`cfnH7$Oa_@f|Jl2^<g^3H)K33}p=PrZSAZQ0B3pp%up^
zCP6+c{0Ve|HkJ%fhKe}-u{-i*l+Fs>ijw#<P#M(5XlnjOkP2v0`1^z)wU6cr@w`?*
zeG7C@6Jg5*Z>SeyDo;-;l8jG?p<*_-PSd(2=Ab+>9cez+($sFHEUv0K=%$frR6=Xs
zBY>Z!)FTLUwhcZ4X2Bv9?2&(2!mgs~5ET+JBn-FpRG1y+@o$7ek%!sPDba)n?E>mH
zbX8G7#Pvg>j8?{l@vZbNSJiF!IFyy@Bv2I)Cb?voK_B`W8Q=qjnk)>Cz?XQ$0%36M
z2nKtBG8vrYFgP}Y!4e&EX2Vprdp%;u_8!kY7ycXEuS-r&o|c?JTS~KIY!UgJbl}nE
zPVz>d(-3zdM<>IMxX(Bs#OYvm)w2;~bODI14q(UBIU^wbinsI7%h!g|y?l6Hv}`AP
z`F-ozR}0X@&b+8C8rgLa44QCs$cYwu78y`a>hQf}A*K*N{wZ6<3!{N`s*|Oa2{(kK
zSV~p$&<r!t#**cg0fMnMpgNl65N2cmbpqxye8vL=Uqoj$B@HJjrq6O$og4_HDhnj;
zl_AeL-nq}7`!Gr(-Uan2z~dTnmcr^(B&$}T3S@y8#}A8PZ5={pP@RTFXi&{SPvPE8
zJ7kJKs;5mnQgR)JCWl)+xG{FRP=oW%X8KBmENJojfq0yhoUP7mGz>_MOLP8eCTF@~
zP_=F5zb~Vn>>8o?4>CAkj=<+|KHBDdFKUqUDZ-gN$k{uBbAje;>W&MY&&%XoB%IF`
z&ZRcz&EULy{jkpM`0a3Bi)N(GIX353Hg$wN$oVHg!#bC0&c~!V7iDrT7tS4+WCYdk
zQI9%r0q5lzoV&#{FqUF`JJII+AZk$OvxPHxkn^MwoR@0O59xRWoxh#Qxmq}XQ#jAJ
zImf_x2%|U`+id4uhzX9)EeJT&InU<Y-b|gzgPea3l-4;^4?6j2wzD(X)-(rIHv&OW
z#ZiOWcA;!t2G4?@4D*~~^K3;8YCD5Gef4BGRaeIxBh|_7s0tAZu%fro9(XQvV96Eu
z)PuPQf961@jPc!5_k9c}iL3DsV~$LN5kymJGG;6ZF7qV09dSsKPlgz#{A9F|%qDgh
zC;yR$4$WsraPn)ApDYua*m2Y}U*(iz6wN#s)yco?Ff_9>^3Tf5Ph4dWMgGlB{TmKL
zzbK=A0_GmgzaS(3Rpckvi_Dzsiye+X49)V4I!%Y6S(=d_LVjX45`-+*7ee;MjzdMM
z&Zu_LVaU?|ocgDb>>%tdWU<wu$zFdbS%0&W`AO3uJpJ`f=Ih8zJn9hK=p>(ksmmyn
z$*pQp;#UYzI+G5^c%v@(VS04Y>!2RY1ap4R(dDdWu0jfy<@1=tV)O!Ra^RNL80>OH
z$Cod_^;&Fv2GBc4UvA?{|CTknS8)Hz-sjl#I;sBQAyUPbBvv)p7{<b;#hz38*V!j)
z(f{<|+v976pSzL)&gNTFp%(S71OtQ{j2-7ZNRifAb9>pDawZ#5f1B!V))AtOFBt^Y
z^?(cv|G<R7UJ(!Id3p+4S-i*7qMkt+^qFE`>+*-3JATb-t1f2xnx!*w3J;zebZYut
zh%?cwr2lPpUik=Me*wV2{pXw0rnPt9u^X$}chCy2|AZsAf^ss;#uR%BoF&>s@3w=0
z-Xu?TGDE%bsL0q8DFmWT5?7-);X#*9CZsx9PdyJsxa(;j1Wv+3xLc%$w>c<*Xm$po
zhaOmEeAi{It&5n8{SVARXiR(mqmi-jI<%w}VRbr900{dZHqo0j(Kq#=jwt>d!>L1b
zr6zit5bd>zhJ>g`h_X6~W&!a4CYGHknNZl1QneI>%{822AlsD5DQD}`%#wn6^YC5_
z+XM$<4fO`vfdfMWrppMkQ$SeVXt&L0kBZ9dcx=J}Ks);Wkw4Q%Ht&KzrNqE65Pd^i
zbuGxyJtW6-Pd&O^;;TB8VWu}3b=1YEY44P<BT8BgXzQg1D%<gxMs)IzLY>5q(30Tf
z(D~;BX*%3-5jx*E3?16d$$y1)?8BB)!Ho)Fsd;P0GI&Vl$LkM~N={-*=4*#$ItM2u
ze<4_nR7qRfmh>dFqRwWUevPq4dW0#ytv`E=Q?D#LT(5ZeRrZQ!*RWS`Z$gI$y-j5I
z2R)6|J8>y_cf?Rd7=v-13`;*~+!LvUU8Hk7iGObtI0;kP(8jEn@yY1PwJer{#UUNa
zSrLr`3Db03Om@?z-|DUka$&y_u0&g_K}5d=3-x-V!$Jj|EfnvArs98Bf_B>ff@%<^
zU|6U|Jv;2&jGquvybyCG##6wQ2x<Cjah~u*Tv#}(Z`;tA8)DDi{O3)@lI6K)8U$c1
z`&p9CHpi|`q^XpHxbPv4H)@<FYzoQ@UAwiF(z_23;*TSef@%R87(zKkY>t<LBbB)t
zp+k+oA+!1H$iAzGt@qCd*m{MSus9o6eD44Yl7FLqQ$PM4(UNAEYjmq=02u+Cz>4g^
z4>eJoh(Arqi8k%TZ>}i}x2JA9_M^>93QEI66Fv8>!d5l5y36gY?lJ^Jva%x0=%QBV
z4*YAV@m%zTUqV<yQw7ws*k92FppjulNF2+QR42vL_0``VA;a8&dY<z%p|&`2CVD)+
zB9FD222rw1-A%f)vap#H=|ciy9uG6)Jt+)O_%IMuU(+#-b3SBPP3s^|nOXrG>NSog
zgcHaC^;Z)Xup%t+A4D=9u|+ylL}E$yv0q^`F-=E32{LFsvy%cPaeoh96I5^OHZAV<
z+%p3zCf>m&{<4eHwrT+>tJ94f>~}};TOzyI%G?MTVS)c_t7pZ7V5=X=`i6xU8|oOy
zmEd0onrAN%tq89PV$%N5dNwRUw25M}VFPH`5=e!w6SC2Ss|CjWl#23Z$n!5uB`}Sb
zGN!mi0OleUw&3!Sjkq3$l1BU-4WjETPMk-Nk>NxOg!clCXp{II_Xkb+X?9XP3bq`A
zZGgu~?`wr>*q_4?Ysrf^3l>7oHdu_YAhHp;I-L<A(k_L+iJ=ZbL1%VKnibJ>-hhSJ
zr-GDDOwPxYs@Mzxbu1Ls1^=_*FLLxdUi2$RO?t!xLFBO@QH6hpJ4G8M#Neo=p*v?-
z^>NNz#F|!wWyo^0G2cYviZR=uK3ag~6362o><Y=&4ut0V0^T?EEu5UZEV)=dl$`|w
zaETVFW?8imkrQ^cnh48A^tn|cH`8ZPjX|`(4n+K77*t-E3%Iy@`Gy4lgfsba#|L~*
zKMddBpg6bZI96ka=&uc$Z$$72zCD~5O1W9Q3{X9aZ}X3a`96ZcM!wv$1mCChw1E5U
zVZBBRs#l@K!UcSqNi$KKVSvR;9P|bBPy7Z$6UlI!5M+MfkO`g0Z{*zZL#pAVdg{&q
z@v_m~$Uy6x(x;*l!sxBD;I02el;YkE;~l;$_XboqTidsB;R1N;7xy|%jYh_(7(hGY
zL59rO$N93f^ox)HBi91#KWkYMkLWp%zTEt%PE3y!&C<XpAOa<e(PFyLoudj#fKz+Z
zHkOz1B7^8{c%KWhu|w=z4*?tk#iIx?ycp^k5J>(ZT_|@{A?}?eK7^G~0)wLT?m<k2
z85#v8`6i{4^Ny^sScv{6UA>8&$r+C}9VVaM%gH|j!f3Ma+r+m}GcDL%nrYfb>@_%V
zf{-D1?Dg$pyKAKGL+Sw(VC`=0k!32u)Q{{`xm14UNSd6_<{~Mv4TbE{Ro<l-r>^;K
zdZ5nO<3B&fk^0K}xd!8NJ95taK|OFJPc;n8yY%t%Tzo9RHM;w_g7@R{U;fxTb2%yV
z<0MWlSAaM^?i)Y~-)h3EMFvxNusSqu`rWy=-)YXuE$;Dze}#59YpB>a;JNo6{7n25
z|CqCQsCt$=YX}cOB+tjv4&Tn>LG`co(g?T=;pJOSD1lF-v)pI(B&S4&W}kycB5HQ+
z@5}P_<CHYc0`+@d9D};M)Kz*GgPR*Yq2FQwmr8je=c6H#=jo<UdpH}z4$Z?T_&mJW
zb&h`^>t*tY`ujciafX-RKlqlCet6KH*^GIK_Bu7nnN0_(%F()!pXaS`pY%4FWY0%C
zs4@)l<z|Gxd7=aptrDaxz)s^fDQSNhIETfsK6^zc((7>k#V)CLLuIVPdpCB;9$iw8
z*1KCZ%~y4zp6<MhMACd+C+czNWxM1XI<XpZ8R{v!q!vE1ND`Zoh<;#4Xsd~-7?s!J
zKN!5fkSL7!O<rYI6RG1r%+;H!*bjKeDZ_4vOt=1zk}@37QRcT!8IE@-BmGT(8Ny^5
z1s<>q$m)(a02?u(T8TugU$JZ&Ub5v0B5{ryM+%}iL<cbOu|zMTzYC)3L~%ispXe<?
zREnre5alM?B#6oowF#oUL=Ow15=0F|dRK3?{FLwSx8vuCjR8;Hh47=q*D|B&JQQO1
z(J#+x^$azAR4UcPdw-)+sV?qIj!M<d`A-Z#nRIo_|7}#Nc9PderD}hAc2p|OVyMSP
zrP4e&?=~t`J2cn(nKH;6M=cqd%04n@R1!j4F_Jhae9(+u)vzcX(1yQ*eD4MJ&s7oj
zPdEFg4+{<##2K;FfEyqQvCdE*fuw#Y1aC)iGQ#Ju!f&BxM8#L5awjyg0HZFSld&Q>
zqT8deuPFtvEiA8Arp^zj=kBJ9i39K);{AxD0kyV8x}YR;!iD$0P&uR6wU|v&tE=JA
zoX?6ytjHu`birEmYCQLN0L|(!e-QC&$wEuMqoN!BVZE;ZyVX>MEwVUOsJ`_mq79}V
zoNi4KQeUbS`r-F<x7Uiy0xhb*BA|7jO=}fs;rfYaXvyQC)bF35VAX7dutD_{20FXr
z@odbGK!>kms!ZYubU@6zWa19uXWPV2198URWtdG_`cYE!mzyB4%}~~=(E5DDKg?`6
zXXaW~zb=YnxB>N#duZAd^iaR-$TDkdC3Os{Gf<x2{bpbtb)<+m2N{sqP)SHb5kJio
zah5G2OHuzvv@KUrQ+;Bl3$rvzy93hOkDx-@-#<!3so2+JK(L~A4&47mvN}LXv@^IT
zhoxQIY6XbtVyt!oxS%gM{-@s%mXe;xk2nS4GM}!B`^oEIoy>!L9Jmtvi|#0d$;;3|
zusjPQCaxHnHjb0bS`2a|CZFsvRguy^TZJ)E?(8<P^_}E8Cd<aZv)Lo1Z$>ii#exlc
zuTax>cFDM<;gHOx>oRCI!mR1aiH96%Xmp3|QHP<=O)p_yav1t-a3{YolfFG`yD1|-
zABIWuxAWO{PJI^*cQq2kNbG=4PB;4S=$bhh`GLC+&1Z`_^>0V#*7e!o1?bJ{55aWc
z(lasa0za{dajU16am$NXBXR2hTwqk(YKFC!jg!c=3;t!wZbW9}`j?JeD5kGVC&pkU
zts_@95)JhsOi5SGBPAS(cpDfG({*yY!rpUGkD+&=E24ze$vHOO{X*}*5iV#&WLRW(
z+K3r?Ky88)B*$dEk%8X%0cd8FyazK<2Dm%XAK8~>D6wzXD?g$hH;~8wiAxlDya4Y(
zBQh{>6o4vv<)>Ijkw9W4WzmmISe=}9^P$SW-AQgTKvS+<k?Ry&E+*@j9w66cB3HWP
zCuj|l{VS&6l#3Y<p$K#hwG|>zt}kWEm1oPvB9Lo=E!RBA<=CqYS=wH|L#iDiDc8yf
z?R78wf%cjqa><YwP``nbWt1$l<+|LKi)A5KsmOIYMBvBEV>0EcMJET<P8NY&+b}*-
zvFGlBVve~sB5xt>^#?SEwUtheGC?&^N9N_oMU=yP6ClMXX@3sL7N+?~WP7j_=zrIy
zzX0?Z8Xv1C2{NFQ{{mLAtsxs9I*^}?Iy5q87y9K23FK$g&?*K-VT2V4<eSMcsIH-u
zIP1bdezAzSl=NxI(`*q>%``y`+Lj`+6hwRx3l*AR6P-gpar7^&o+#~D$fsY_ptR%A
zAX+M-{TZ@v0i^|tdm=IX7ZJ<F;pjfFrWQ=IwszrPGz<$u;=3@cVHGVB{}`(dz0DyK
zS3)=%^_)zJe}`75#MP({iF0g;-6FAk4Zh5lcphx0*-*wca3sgRy{Nl*2_<_SHZmi`
zoW<1i@+nNrWui?kBqe9zmW{ma5mbB8xvkE6q>7|(Lken?hXhD5%kHap-=U4wjoyTo
z3ClATZq2~C3?XTu$9Y)eyiCRRpr6AV^{Wkr`Z`8wa>xb;Y<)1QsrTXHmX=nYig8o1
zBjE*hHvpOg&X(@hKo<#O<Y37{LF;UEJ}fu<=0{gG5t*^%CLkGNn~{(foT1GV`S1(m
zafoG}p}vEnBZk;-VrMB)h=24DyO)A@Lz%=Ah|o++tkgd&=a~s9aw+IIr&uN7LDVrL
z{0T`C<xb_(oytXEkMTmvjvrmwKcaG$UD+;O09Q!dsRw+ksWgMmiz|>*;pCKO<g_9u
zEsZ@EG8i}#>=Z|`rM2_fwVnJfct~QrLwRXN&gF+vmRCnav6{n>-JDVRW{@2%R!2tu
zHJNs>#bPXR#QGNUlgnlNuFgo_bo(J>W!fS#CD2Pp^JJfPX#NpiIy#@7-N`?K<D}ED
z$tyD4<lBc~%h`;uU49t0y%}W3Ajl*)h$;;IPPOT%miUxj#F?BsBj+p3dDzKeCvoab
zI1DRx8z+B1rtN7B(tqnjcP88~2#L$4*P-lGhPrlCYO|ysg;WMyAL5A`#3VH1Br3mi
z_ddlL&W9_w({vrTO){@E@H*lgI0#<iTd<h3l5YbbW`v6wSAwbq{T&en_l)qp7ON*R
z+6AZ8e~$<OkJtI)41)m%Ve^XqgA9ZAd4cHM7F@lnX?5Lk%F@5Uaq*Gg3jY*Eu<g2$
z|4|h%1EYj5p7|#};)wTpU_yrFj|I%Rt%0$n*{Q1f+%mQ3Zg3I-5odzx-{^{n<{=))
z&q6JVSj>JUS7g{^e8M@1unI;vTi|I}hD;tglzUFMEY~B1eG&23Hnl!b`^=`6yp0Bu
z>y9zH*Qh&&RTW7*Pb`euG5(=&a;lAEc>k67XdB~R)p}qE;xsK~yAec(lQ5p42(`Ek
z(-3va+;odNt8LtfQG1?bt9ou{s}_xJ)s*}dD|H(NKaRWSU_NB7kt=n$((K=f4+D24
z?#I9?-v*9C;Di0vT!I!agS<7Ug!p|gx|nBEU-^QlzYm)}A0xz|l*t<}cpbIgE>);q
z@;NjvuCw)phsLbP_H1exd((Sp-C5Xk+l8G$JOjH6o0975XgKHzO9fSr)|p?!@GCR?
z<G{w*I4nETi&yWiBL`o$`sWi=d}4^#=knw&2wa(4dq1zwHSjCv-1>T7;|L$eDR4Aq
z0MlKZu~$b!a(#OWZ`Br;=6LF+Ahhdysm-`g2zRj0fz?&=r_2YQ)3Xm8C+B%}bw7Ir
zW))Ynli<B~*cVr1<q+(tKctR1hg>OX52!9Eimv5rgEUJy!9WuaLMnT?`?j`DEl=&^
zRWQ0ISiPZFs>2w(bhit2U|X2qV<;|XXEW_Uut>XlDpZft@K&ge7i4-dQA9Nyoo}{k
zHlt%d#2I<|fC+b9=_%Xb{b(Wl8IJeFJ;34VRoWl+-3ldPz^HGFI#PTX9jgoW*n$>b
ztAbF-^sj}Vqc^*zj|p94mgd2{E6<oW&-0Qo@e;V!aoRSS)$&m-f%`^iTHGgXRE5w7
zH}Op0TI{5J21QIiujHC@*GBOg_C&sJU}mLCa^}s`50QE)9p3kbD)_E4#+LPR$jaLV
zF<iL8-^iPWzn-9eiP@dpMEc8(q9acj^V5s^mUdxmk~e$_E`nt2CrL<@(}0T+N?<j1
ziA%+Z>5B!qH$yyqu)??2zHR(6%$C@Ue@KR}bb7FA81XD31|uXZG^73b1Lz5KF6ZKD
zotgpWBdXvi3ksc{P97dE=pkE21r#{(!>}r>X2%#dPtk}JxfkJQo5KZ<LYqsoC8{x=
zsHaQQeb0$ExPMn_;^ykz8`$-JcB|Z6HRq!D$#c-YNm2if`*DD5Zg14rrMq6ezt28H
zhWqVk#&WwAya+aU%X+8!7~`X76Cwt^tuBTjQ*~FOLpvSwS3oQL#hOr8D%2~FD(|rT
zaeP92gM*I`PwGqxSLbl-2~7+J(FY%r&MGmQ^VcN){zT|Ya%;K<IrgpT@5u~b3Z02U
z;5|Dzj)uAj%|)(L(ffhn3-@pYk!zQD37J89pY9s4X^*(bM>HF{%<nnS>jP)@jpA`?
z+3Z7XD7P3FA%NlHxBA8}X~?ol7_w#(t^q=A{z)?KJ@_}uQM@gtFOS!>{rR|DtW6sA
z$DI4Xa)TF_XA-!Qi6Aak+M?!TTtg7T!Lu^88BtEc&}Q8GrBkvLF5BRq^|!Q+nfGu5
zc)^)>eovDu9RJF=^Ls7=P(YPpa$(>3{g(XP!49z;KVdH3`Q<4c`_AtHIM!nO2Jaxc
z{9&%^;?D0T^ilR(Uf2C58beMHW2^Z^)Sz3wb3Zu>n?HjM<`Eh1b2@i^Z_Oa`IU2+v
za)(Xi0T40$F~}Ic6L)^U746Hs@+(wu<@cNnDlcJW?NIr;P31eFLK3@kUgS6jnGMy0
za!5=0y2N$1sC{rVBozC)YNkX7d1WeTn;kB^MLmmMFPiLq?MBmm9ii=si_ziuH+4Lb
zmr$1PF~owYP>0-`--yfI>br1QeDX`QAe&ytd%0UND;RNacng)xybrAJ4L7meg{Xzg
z@(3WUstySw%ISN<HK=aW(>I0}4VODcs_T2hKGOSG5*Wi;RTqQ<J!<tToWve;?XRBK
z&rElL;jf<I-E-_7@bzD?2N*Z=;g=5ad-ytzprQ}J@3+W3csrB~`+ee6ad((#i@N@L
zZO<PgDza^cPOidNQ^}fRXH_{_r+Ok&F~;-ON~lX6#cT{20$czKqAw#P#rRihQs?vU
zBH-164)qZt6;1yHOfL?Bu5%h9{^D|}*z*I;w|bHXZxG`9sF98L2Q1!Z-*t<4wtr`!
zOjRH{IJF1tfP3IR80)_~C9bpoL{stYME^J&5fqaz|4#Jm^){7FprV~pdi8~R(C4T|
z^DISedSg!w|Hcf}4mc?ui&H7Q2$186oCt#^o`4tXLbw30&P|tVcogLl=V+S;)aT#V
z7C#v(*%qHJFTC!uGu%$bsa2;*#&%>tc^Fjn%ZMyLYoGw?&rXgtLtDT%pk9DkMc9=;
zNo)bnWht5%`-^BCG)w?J!ETf{F;L=E#O#2&aG91uD|bhl!uDj1J=ey=4-X=)r03qd
z40R7M7^UalXwnoYBHYN^K|C(~{tdtg>-!Nv#bLIn1J?~(zXD!?Y#Q_xNlq1t`Fjx#
z5^w)|bT9ZWUWjofvikj-t5)ykA3lT2tMgje2j(o}aGD#9OhYr=5ASa(;Sc|$`pDPu
z!yZnX&gXCE<RzEFsZLgq4e67heUCid3*+&CZsK_ymg1S@87PAHuplWnDY<usp>hUf
zWrUrN6`M5Vsh+xJs32|eZ71<$Ph=dfk|zx2@T`!m&r{D-<E&sbLSRK^lAzjx&}Ob-
zx+y79*~mp5oDlZZU5ss<+O1T@<*EA|@|A^SUc9wnf9QS#2IX$Az3VwgD4vZ(_<QFf
zAh`dHa4ZUZE&3e4)5#uSCl~I}<`%e<eUpfj;2$Gq<9&Q|eP}EfjI2&K?1YkCnCNAc
z{QljV>NS{YU?7sR5bGw9pa>Fhv)4XGt;JdcU!fgY1Y+&P3W;LvfSZ$m6iRin`BXK`
z2uT%wO9ZLi$_9i5cpw)0cD4>XkO;}1xRH|OLrl;!)bG#*1L|#PO&yr5zvQ8$OLRz=
zd<<TSD!5WlrfV>KQxImOY!$^_qUD0Pr`zJ5d>C;Vzag$vRCDwMAu$s%GrW~vhB-vP
zmOISP9I#R!1y_5}Stz1zkeynYqrldZOBJHbdvHDq#TwSuT`Z$>u?Q){ib&rZMW4d{
zIQ-a(G@yvo>_F~f?4lPT0X~BrOfl`rXmC0Q%R#LxU}+Rrv%n{P@K4nv-mn`tLTM{P
z$v8|s2$O0_h^mm6I1aWNZjU$$!g41fxMX}Mo({S2_q9-*%5q|;KPTS?&&ep3i#a_d
z$<fmZ=X3Hp(o`R#;j}7?mt-hopyjCy3qhIHXa|zG<63DCvP#^DEZq#pcp~j1+-E?G
zdn1~GYdP_MSO@+Oqd->QMtxK8HMFQx;1;|0{{Zt9v<p7?>kkNe{m8EP1FmXqW4AyA
z%C}L=_rWSH-ygrH3Brn}aN;e#Pn*V=A^t%0bBG~F;_c3%9z!-m4kjg12<vSWK}t%(
zm!6ED!tBm1<fvLO1R%RuvONt2{{m!X<{D}_+&^R5;i<a|E}Ovmgt5#%G=mErD67r{
z=foOBUgY4bt)$%sYbREXOuG{CBYC`3zX|oQT_;7=ciDXW32E$2Q0d(FjI5qdlKiuh
z8Eg)qJ3HIbLhNUUA;zwk_=c`%H8o_gzWFev%Td}9?Gcb4E!wV(`WD)3bUr(TQ@;ix
zkIrXjb@Jz;esWQUJ~No`os5K&sGznP{n)A4QE@0?Syj!;sQZt*GYk1La$Z5Nv#D;(
zpt|@_s<N*vmVJPA+Cju>nv+rI?94jDt7qE<4?qOAs&nW^`_@FepZpyi7rQSm$AwRU
zgA9AP7jxjmUxwgdx8o0YIzzpEX6=e*4)8aAkKdMC&~fG4G6qY>XYJwK*SyRl<M=ON
zo#DF^9LI4dOvZ8aF?5Ep5JetS!g~eRqb$Q}HFCIbdmq{WN?_+^FF48cYvv;9yP+0D
zv{HmB29^q$CSpm@iVHq6l>1tB2s6}PTFD;A*-rY>hck{_LKaU@U`GiA_cPquG3O-c
zg!8}Xj2SV9^G&C~7l`EKz6a6Hjyb-1oS%VO`ZbURiy0HOHaKsEah^}k)gvPQ&~Aq7
z7i)5eDjPuss<M@REm+TjFQDGfSr<?@BX$CFKj(A!02Zd5G!mW^py}0numEM5C<Nsh
zm~)V%?|;~2L(MqfW|PsEKN@ZaDLSY6J%k$(bGl%d#Pj$^`!4K~QYUbGrz9g`2qTJp
zF{vK?Lkg|EhU)Vt*y@-fo-CO?s4zOS#i@BY$fq+i{F!<hY6j?%qV3Oo-QqIjWF}#c
zXgu_w9gc=)sOK&ic3yj)sv4W<y-zK{4s%y6TvsNkV4RBjYi$EK4!n-5CY<T|D@MNb
zy9=pMtvUuH6Zp=^GJWe#NQFN>816Y0E2Uxs+pd$~+X4Iy4S98>03(#FlhB|Ipn^(0
zzB(Aym3STh;0k-FPFnki3$#<W!Uu1I|4;=J?u81)c>T^3`7w%PKo=)1vxg}TjJIRj
z6HvA2uNhAI8&14zFZRRdNo_7<cAT^U=YQbGi<dx|l>D(_wH|(f5mEl6?^`e{tGsq~
z+BrR_jqNp#eyy^2_a@I2zxfGJO8#6Apyh8VQ(fq96x&zlX*h{qU_10Wt&Tvn-8Jxs
z5f1k>t<s8rNH;1GK()bz9fzYAsQcjTw!<~RZ6xih5Yv>OV4LA^k{LjS(V4AI%|C*C
zI&;|J*!>tENiM_No`i{LmS@mDYVovT*OIu1oiO~F7l_Z@{BzdO$x5%`8VC>YV;PhK
z=@}@SviZZG7nLv3+5pj}TqbI_OWuXhgn0@pFrKMadLO1da@Go$2n=;>xd?*$00`QQ
zC>v1_S55F2S5PS>FAZn{>Oxpq&f8ys8He3~e_*r9aX>cb+d;7I^r9Zrh3QkB6h<A?
zy{)*rhC^ad{T*?It=e5PU0+k0gi>YdT?(hKDUk$X-DLhpor>8qt|{5XvQR2<Ix>XR
zFC0=UuSwp8Z#8xy&L?n<V78&Y7m!|~6;W02b}qL?Ej7`J0#h-3IaRlzDs{Qcrrfi#
z4S(P!x|Ny?t8`A9@AkwjJtfhst*ul>eaTVT)6hg;JPl>2YfycP7PkUfxRWgEMVqKA
zcK(au(!*Mwgi@Jp*H)$!M^*du;38;+4;8$#e@HX+$$SvkoHn34^TP*}nX(W{VXi+7
z^$ycO*DSId#M6KlOeI%9QTrXB?}13B@3tE1eZ-fHB>OPvAN{C!0V~Sk|FcKc!!G=W
z!`6EY_1F`Bg?ULvAI2xH*;9wRMS5od2WzEQ9N)-ZasEQ-6+Lot2X@A?yX7G0uyeHX
z2X_rPHF7#f8-MH0k$4=-ZYz8vrt<m%9t;&wzeOL1a=4dbFSj|>u@_}QH6J~h-=g%L
z<G_60=p2Mi?E_`7^k0F{aC`&7xx3i`3K(A)Jch3aGm+PWGoBuK7Y!!?9tVu?(t(f1
zSM0Y&cB4W-9hVkQ-Wt)fd~53gvIr_($_lDCAOZroJT`J0`lm!{%oFw_?mF~O0)1M2
z4QkLa&JiWZgYI%N5SRA)Ha4RNhLUEz&VXg)u@Q$g-5spIDXiz)tUFMC2tMbq-lh8;
zLXV+ZmT1;_HtTjc!0@rtp92lEo}yWwoMtVrjX11lXx1-bcn&K1AGPLlBQ+VUFUD_2
z>(g!4k8r97t-m3x$%I;;IfC^Z&HCq<189Gc=SCdX=rGiJrm$XYv*vpvV=`C=GPHhT
zvDW%DoAvYasWq99^+up!t#8t-&rGwH_eLDnD>ds^F&zl1zo8<v=7S^mp?^6Bzfl&=
z_+$ZtpJ%h)fEv{L+rpYm$a-of>reye{91QiG_*W8V)Lz82Yu%Y(_3t&d~xL145pjr
z4V(IT1VB32`8Lznu42z=Ajg;Fr`$MjW8uch1yWDoWLOrhL_b3rm^~#OTf#1TvFgBR
zh2&yM_E<0I^G~Txc5C$zVpm4ydSv30j@)ImOT2;^BYnYM8{dw0TfD?6Aq@Ti8d%`V
zYfxW?I*C933k_`qW~F3(ubx3ZC<N7!2+;E5O}IR`CUZ>TWNu~L8J2jAEphkC=Mv|R
z5LfAnT9=h)CA`SRUn#~jou@!d9sEfvCC6OV5ir#VKGYd}@cx@ksC#8Bfj>fP&w04a
zRP)QyQyiY~k+jAo2t@Le<XGCiBxC32qfTO?y+PpTn=Ml91}Hqb8pDp0pMbSS=QEx-
z`LEKN^Yu_^`T1;%kUjP=WEoPN{09$1HYX#0Im!MTk)L|VYb`?d1q_y>rD3>m$WA{D
z*(n+MCy{LW;Tk^JB4n>S3|WQ(Cx5^=l<l01{4V6%57+Ru7NO}q3{CcNC%^G9G}(Eb
z{K^seJm_Wl`DTj{e+Ip3lpW+rOUb-oL``i$&V(iN1d6&rsHI)Uk4`<B8os>i3gxmK
zW8GoD+LGY_y;nMw*}<P@kl_qby4@~B6x6c&b;EBC!1{0DpOF)S3(gvz5ZL<%N7r*2
za84Qb57x@m0Dsgq2g`CWwkz8!FqtEB8z2Tb7@10;AbXi5IhH)$hJdyWYS=Scu8H<w
z07WV6Ie;Q(7>NhaPx;}13HW<Y2vibMyl4_bU5Ys};zy(onPhg{Vp3xsl|Egw)PK;+
z*<H}P*O4mJFw`29NN+G81*|zsxOg5G|9He%Znxn)14eH|dS{A4W`@c`B3O5>1;S{*
z03!g^oOgwo7HfPF!`dp7>Y%#pa!4k(Uoa*F)SU=ymR$HoB|}|pbFgO_n!~0gGT6xB
zcFreYDRTJ7TvnZ7>o^q#<0w-MABBuI(*jy2sB&SRjNR;U!jw}XVfqp1^CYr8ztBuC
zMk2RYSqe<=v6<c}Oc7kguv;+dl4%!|#&BpeWrqgSE8(^JzPf1Ih;V7i*BN1YE9ldf
z_86;~?pUlf?b1w-vYCz(rd2l6**4QF!E{*DLe2DSc(ijw{1oB1(@_&=ghWkyE~7av
zL?YE>DX94~%++YyHHaSe5%GSEwA3*UVTN^_rrAvwcKUqxuQ9Ay^1PiW*a*s0&>qY+
zyCiG^BAo-8-4vVMWML=c@eMY+TfuHvyCThQ1`T1aMM{L-UJw#?UjaKdqCH*G>{fyu
zwPPu0w-vKkYS;N4Y9}*+FVK|KZVcFACe+D#Sdy_HE3P+L{9YDMccyyK#Fi8aAaXEH
z={skN@ls+5vpfy+5Jr%T_f!#aaCj7z*cCrPx6nPGr~%9Ij9BBT>)<ZAeUw_?8bz2}
zN@21fM1t3A$x;>>PR_@dgNPIw4uI?xPX3pn;^=&KMkjv)8X>XJq1*vxPL6dL${?1`
z-->=TnlgKwQ~xR0JHfx?Au@MmQ2zR1DAT{4n%5qNGP{+Ne-$Y^<75+^*U9;R?7a(k
zR7KK1oWMW^3{1d?sGxC01;Le@LJVR+CqXni3CskPi|cI_Z-_I1NFXplIUGk(Kyeq9
zU2k|<#RU`v*KjdGWHl%%Dk^H!jz?EeL|~Eme!uEIlbIx->wf?D`+v{#`aFg?=Tui$
zS65Y6Ro~t}uMthM;98iN*#ufDj$3#?dfe>us!hT<s|lPOe+1`BXjwxhP&?f3OMtWf
z`*2|e<<b4#wF%@L`2_hTO(5@|g#3IG{1?GV$#siu8In|IeNsqdIH0OvKqxA1R=pDt
z22@YTV)9!`EY|-(Gn3zX<n0!iX==uGV<4GFBFW&U*AwwFCncFh`l6fzWwY}oUbbeP
zi{dt;WT4eiG7JdbU~V1igS<8cH)Q~guONi#4b8`vPXVe@v=^W%w`%&~I$G?7qU1~6
zk=lXOkZM1a25|PvtPXtWqFrjim<B^5o^(H;mLJnJG`MLhWihE{YPEBpKGKv?!@H8f
zszF;qSWiZMzJlnX&!g}J^X9MM82qfC77QaciB@aCD&UF*D@tPXcoaHTq|C>-e+$e*
zNG(G@&z^-|6Sf{fr21y&)`Ag8gysvNeRAUq3RV^nXoDEPzNi92Hm`0=Ixrm#K|&47
zXJoRGBn>!+aM?&r=98wMB_fiHXfygnuxBsxLt6MEtl~6vZiUWZ%~*T|d8k_BFPLSX
zE`S=39OE|eV^~H|VLrxJu(Oqgm(ESXQ}(U826gH+KDtS_06ke(jQ76h7mx+Qa^HMj
z)0w;0l2_s0^#m0PK{}1>3<3f16)Y7}7lI3v%I6`SY|A&9g%XH%0BZegn)C(8W+m0W
z*wxxPnNHdST{Isq!UyEGS5T_-Zr_k<gPQAm^t(|49E#235&2v<5e6*sO;Dt|H-6^)
zMk$uVY!I*pT)A17bz0gY9UwKNE^;fMT2=S8jx2Oet0e>}u~r6wbpawJP?^wQN?$;2
z2fNYwy1R8z^l@LjSFho<J{68dw6k3SJ0TyR#z*HY)^1)n5})u}Jv39z0{t=a3hr#F
zyeJym7&q;rd|aGB#qJ$Un?uDCWw-(zrulrwzhSnLhCt-ssyjEbC+fkeG$X4D=x^^p
z&&XOexZF5B3to38;6MVp9+URH^%>U4cjAMbVw8y=YAZAfN3gMoZ1BQ4di>3Oexph9
z0z%pHNqfP*ib>cnisSTRfp~Nu4%NCA>u&7%^Oo~atq<a#!9QNWg%G7BYAW<|B+L{^
z!5PW;3kMZ{1M076zgaH<J(YPDeFROoh}WAK2YUcGOgEnBsIN~0AN`m4#I%5z&<;%-
z4-OW}p>C{5Wx<R&eX-&;CJ6!T2j}dxY&g?I&{F6kIMc>0b+pJ5vbH-Bo)|cE*Ub<N
z__L&=ZX;UHHgbsv+PDx(V9(-10QQ_Uw}joa<tO@dcYaoSBpZRsc#pdZ={7Cc=zc@G
z@F%u{h2;R`ly+=@P)WK!4lM-@tf{WR&@coKpkY1w5S=q_P%5i0z}J8}c_3P1a)_Jo
z2I7bF!(bDzP1dl3fLK_ow~vAwshq5maR5B|NSrkSQ-sIDcp`gF66!E3l62xwj-XQ?
zgO~O!K2UH9JUGG{zkL<=P+m;U0lX<jjaU*NrvVo_fjuVCAjVtJ$*sqfAhYmET{TdA
zQ$5?F@yHR-kOWph7D^k4+w`#8z1>lVFtdG%-|3Mj!jGxD2kOM`9gZik_8L+pTVDgJ
z494DGWzPM>>1%8n2;WULS>d*Gk|%r>cT#GKb0GLQ59usG@XW6;O6bK)(#FYng#ChW
z(Y2S4vegq*kC0Cvg2y!BmqVBn<x~()5G@`FWwO!(Pz~%cL<LT}lx26a2?tY;og#$j
zRIi|Bb?nqR7(gIoELk@jmXn+qg$HnAEX?l62FiRXYfwkPdb<(^4b>7>K8CGw`<Z|w
ziMV)HSgM3w;SzHzI2@ZrU=s6lK2W&J?|Q;w)D4H6vDrKu9%KF}?V(^*cYnNHaRtg@
zABdJ$&U)clR}^vu;7@2R8Cn8wr>-Ti@dPb%ELhtFwu^bL934*d?g*%zUPvcl>op*Q
zb5w$wAPpoe7j{D=EDe34k+3Pf(ZafWAzGYD_*7H>pdNO49GF?!qw%U0AksaTqc5va
z4?{%ia3+8>-W&rq)-9fL3>fnXkPRX|1@QI9fKfgX^PMN@A3nHB*%7~e70lfgkHdPU
z@pweD*NF1+0dOe>`bN2TYcBSOq1&;I-S8qTlD_dw>O4`}lhMg6U+w7v+_2vN65EQj
z*xVAG2MCppW8O!aXsq^}!G?V|k?sDuW1M2Hedjv%(@<T)6fmJahIMKE_ix~?YMKoq
z(}$F~U0&^)uVaC7grLeMav^Rk{1eDEI0kcUNKrwQNE(BE75|2y)a}F{0?FY;C63&W
zfk|N0r`Dr)ZTSgACYL(^A29aI_r3!gfA634y$eXFyIkXk>mg;b@U9`w{G>8FC=#co
zmKo3l9W>W29Z%B^HK3FB+x@-?Zg<^>5F519r9;6tX;{XCzIMxOXyQ99sr!90ao(Pa
zbH4U>G+M(iTFO+e-p~Z*5lNUohK4nyY<SZ51IUQfwMnh{=q7N|+_==vX#yv0mizrl
z;(QU}oW!A)eD`STyJql{8`4H=;o|unde;eyI8kxj*SCr@#{N$TQgE(Z>gaaI$R;2d
z9*fKjX#8;jRnYyu8rs#6Dk_ZoeN=)wv{?_rRH*X~Z|r^MOrZC9)&P2+T*HM3R<gZW
zXh}-2s!zY6=k`{vw!0TYXJJsF^;ZKpaeU?5!>N#y@rquVs)cNu`?L7?BfrYUTPRvR
zD;r>_6_d=F_*M5kdYFk|zQ%omP;DlH{pA65Jq9z5haK^SM6^Nk7><_5$|{hMyc2!o
z<_4RAGv>wv*7!M11>6o+pvz;wG2Ss(*Om1IR5^N`Bgtf9(Wghej80|p>{W<726Wal
z8}&Sfw!4Qu{0St%j|2*7=&iuXEZt39$m&+~F0`0lE}>A-k)|S_R3u5k;ie+4KR^Rn
z(H*GhWvNIXY}89CLW6Zh?KSby>B$vckBSgJ>u?eKX~AZ;=&^omk)#71bOc-U18Atf
z(2S8R*CmuwN|xZ^;@ql{IzUAuMxaiNAEyKN*jQ9<IdfaKAM~(g1VPKrG8LYV3YjwR
z$k%aMxS~GAU_oMz5@MvLXZqs1^u96IdbON72|9~6x$?<(2M>p&Vwt0eC!-V*Eft1@
zfr3;|fE;QW<Wn{W#pIKdcxY1HW7>4!<OURiig@vlvd*9i@n@2Tx*u1=U2FJ}!KIXZ
z7Oi!!RYZi8g!A+!a58R`VplhTbGG~O65w>M5;HO+31Kam-;fR(2|;*d6A15cKei@9
zy+D?o<i4KQ7~ul;miztY<nQ$fHY(ws-kMczc5Nz(Vf|f$x0B^<CLBJp)rDnmAwLIR
zCBMB|-d<`vxjm3<^>Ew9R%*)iv{Lu=qm{xIFIXuggyaT+BCJNKf!V`3zWA#<-ilT7
zw~mx~*1&eK3AI+s6a~#qofmNnXR_A=FfLnE)UD7s*aX}g5K?dU60Mgd{E6G7rhs;R
zYBk-c*cKGc8{)BI8}P$d5yBjnJtz@K%kJX&^Rloboq@Do%ex(rxUUw}z)-;L!F?ln
zT8sDvTJ)1i^L*E*9^_#Gu@|tKacQu9aJl6`4vlk%;5-1E=i;1TaPkXqK5TIQ88~S%
zS?xstq3MpxG1>7I<e=J!M%TRuFQlY|^^^u=1E8)YP5NnJQZ1RL7Ji}rn_5m!qPz}@
zdGSbF7&I=Ol;70Vxkw}A_=5A4lMt>F=$M!cAp8b;OkJ;qbh#~CC?Fs%9ib5U!SFD-
z2`BetyK?HX(Fz`fE3t(n%6=XwB7pE>r0lvkyH2WLNod~5lrw>yg95!55OA#_;BpY)
zf*c8uMtp1kd+_ZcNF{5O_(N*68`cQg(B$DsHEz%%w}M|#<6eZWZ1PSmeL~cu0BKZX
z07gcRkYtT983q8Xj%rvVR1h_OhJV}!giMY6f*Nl(HBL{eu}@PqKFAt*3pi`MCsE_$
za6+M2j8Oi9kD9Xqsr9;~TDL=U$XR|tt?f*$t&(beSqwu1iR=o-I71jDN}MEY?dw(<
zIf}H%iOKTe823Z?DCy4>!5FAnL+eUTeWGFGVi54sn1CgHr8&9s+BcI6Rdkasl_uSP
zwlFgK0NY=x_Ms=)Dt<((@{AGd1ER&)P^rY&425iz;J|BIDA@$R<232i=*t2!`A8w_
zk$~z7(~F|HV$r7lPEIe0MR~djSdemp$%9}aAnnK_cFQ5*tL%^$)@-7OOGstQ9L^sD
z8I~vscFXc4qzmR|Ble4(i+=<p7QQ#z+DLhOzZ@zSm#uB;Rab^0+=XjiUJAR++T_j@
zdjY9#9`M>>oSn(L4%^Yuwmadx18c|qCPc(4$&ygKS3rejbjXecmmo?5r?4)w9V9F!
zT*QEl`x_uB^d$Hdd|ZagNR{(@a!b})mV;k$VG5|A*%nSl7KhYh01BxcFghrro2zER
zGHLUW;HB@5si0XJ#G>jUAVigNq1m$Ttfw611L_5kLLctZ_oRnAYRV$zAdC44k~Lh&
z5|8SBR0O^W#_ORVCeG)DBzN}Eh$KCL^@C^Y`sM=B;RexRK-BP17heS(mAXavLz$3k
z+%PV$Ce0t73Kje-1WLZ_z$^F58h&AhN4}(y$)?QX_#!hDF})_%yq?R~yr$JGn=r3$
z;p=ncHH0UD<TAeI6(h)#CcQqNueEy-NP68DuWg|i+&4-2r|V|A)Lohc+KL#sFqR9c
z4GphCHk`|)GLaVZ`eX33A=V{snLiK@PkW99%iVW>YoY+%CSm1vR8o&ETT0G#Ki-Uz
z&Zl@+YM?JmprU^{97C3hw@COXNq75fxq@EG&fn8Z$wn8_OW`F)IFoiiy305x3)n&C
zm<l>4=Rk^Jo@D})kxd^wbDUnvhpSk(+>`-sR{Ob6Ijvf<rToQXx8=l4yFIqAJH^=K
zifJ)-N9ETra$}Iw@t{79KA;{uMeAA)-a!^`ho?!Qo-R7TyMg0^T-~WXCR^?hv;C{F
zVkYtz8sd{^jLeazBcXO6i`IXlkyxC3qCV3uKnmy^uxzfv;i?Ac>;*{1iq7t$a9>E@
zY8HP2VRTPCa*cKqD2F&dyPMV~b6V02*c%!QencbIB2s1}UP9ZzIGO*0hoFW+!NAyP
zE=ev`=c5$OHDws3?m#J-W(ULkOZ8oE9ho4;ZOJqRJx<bCvw?+JDdWVt9Mlu5q2)*2
zTkg<yhN0#6pvBy~e7KBk;8M82Xd%v)!e~H|Kz>vjcozej=+hWi#3C-HVL>p*k0A9^
z%_{Xi*g*C`(8=d16no^Sxl4??g7r$Nw2d^h@gvau$)LFhXy^}=vpFXM37Y3J=_FmV
zSiErt{xZNbaC~y0>F)65QYr1+V<)F@<16h#;lOU(&t;0AV5(b8d43-9Oap8B<OOl)
zVzA@^^=}5k=*Az=2)C6>u|JfoNvu$L7atoN&C6*tN4iFnvJGVxxq1xnb>Bc$z%-;?
z<lSeGMMp1Ipai*~w*piq3=?Kfps(QTlah)zr+rAVdjdCrl(`b@$dJB({pX_ZL_8m}
z@8s5MDYFu4=Wt(QOfE8aL3e_waub=hX9D^W-;oTaTunn><Gc3qj+?XuZUx@elOZF5
zEI5^qd(KY!SRdM%wG&fN6pS|!Td5j{XLiVCup_EXdJ`7Uy_DUn-XBZTx4RqGLPRpT
zf5u;K<8Umw(gZhHTfquTWYk3F`f@Wnx{cfV{fncOeX%|ZV=~+cIW6ffaT+p3KTC0V
zN~wFEQV1@i-d99t1m}uLX2A9@w)6WA3G*&-y<ZE=##cMI*dE;9+U#_<_F}_{T;^m?
zo#DxSFWlCajaBwUPwu2WQ@7jl&AMRL@*%S-Z+XWSw7?dZyaXtKkysum5#+yv)L>cw
zSJJ7IwZn*WNkC3sOW&-E(Bnb`HfPX31Z6_U5<7oD?qE;Zad!KmaD~E$;qaRh)s-FC
z3Q6%2^)rA8iJgvROYHF;2iMca3iiWp9Zv6Rq6Z)IB8ww+&f(^y3Dhtf>LXYD+EJdf
zW@A9$F1K*dCE-5i2Y3R{5_?)EN3YxX0{34J{|7F0$ii7<u?uEr#RhqDYr;A9d7k*P
z;lN{IQH6i06<o?}J-p>L+Rk&^9JklqqZ=K?5syHO+Zu4YxVjz&4;Za#r-M9?*3WrZ
z>QOzdxm{LaHr6@$JaDEWR<xv8y{7SE-6y!l&F%XBdhC}&lOcJm?9qHJgdcSQjBI4f
zEvuNiiVch`!TGv$CH;%pv^<dI9*kA4uNxcg6ai4LG*|=#AkauRQO`+vgQf&jKcK4z
zlHRTbk<@}w;I+y)fc-7{s`sREf7>Vu|6W|x;*R?~Z%Hn{;@E5HK~(3YwB&=4GAyeC
zVCQJET!$1Huq~(`V+HO!OuW4tLl9foO;d-1^f*NpU8T#s4I`q<;QW)s+tH@X7w%VI
z#d;j9ksN$~eY|8G^+;yuISICrgJc%yhE4vX;r`eYgiHyVIcj`&k}fJ{+!S@de-@?r
zMbRFnXcrW%I}>x<Y^EW(5`zv%He+$jUWb+x#}?2ULlp)?6>z`p@ASBPDPD5q=%mAN
z7e$$ig5N_i`)!RPpi#t8c}P706dY_!twT`+Zo@qK<cLE4tR<A*%j+$5U~2%6PX%m`
zN3#DV@Jkr&tN2rDfgR|!B+Q@Ukp*6av6?NeABr(pHTc&U@XtXr2x(tW$c3qR7p4MQ
z2JauV;F9vrsRjO+T401JkcI;KUW8Oa`Wx^%O^Bua3*y~^4ojlgmkO9>@GeBqqd79`
zVH8Lb*^eQ1WAu<z-vO`TCD~-EdkK#am<8;!SfmCwflvTSuu_Vy5j-T0SxCms)Da{$
z=WT+&0&$``egv;7NuqAhxaRH9Eg6eP_P`4;uz-@GhjRPVv05U;c{6g`2k7Zdj;A0Y
zUd3p~3a-o1phh#>umbJ(VpN7*+yra2hjgm9WZc9x5<jAHyrs^okI?tHv_TxH;|<EA
zfU?eu)KtvBmDIhj{WJeu%J%>ae@P8`073!gxDC1!k1X;f6i*v_@ZHX`hkA2|W`=z-
zjf-=IPSy#8q>c!RaKUTf;cDB!&EX)1XR6W1?PzS<VrfBExomn%oC67be?*U<qUg(M
zXj43#&Dfhi<@BM8wK>wRF`^Fk9xiLyf?-0vA(Fw9A1lGD?EzJEB1#3fv*mh?;WtNX
zKCcH2wts8PCZkc86_Z#AnF@WJHIO=mte3A#)hsQe0b8#5fae(Rsrw<MhN4c+-mqmi
zz*@5xA47-ZFl!*;0E&7NXF~H`<Z;+ToOlU0^P^7aZp?8cOU6-X5hO#7p&gCBBEldL
zVwxtUuXm#B&{yL1o^Iey1)S+-=Euo#bl>B!$|fwhj?_w2!4C&I^NAef(+)oAQ|Nv~
zk0u;mecgvS^l=yjsqQ@d;aKQ~_e=|@=TN-vi3aYle7TQb?sC86qdNGF@}-PlMz~)t
zP5N><zZ|Q-z=am*v7pLb$d~Y4<;&@WuF(#+c3<W7v3y-W*DCK$fk?P(?&JmSr7abp
zuN)pB=GONKddI0{L&cdD=-2tKM&8jQmUl1UT|EZv{o)up{qf=y^!g(Xt<xXdz{oc&
z$^Arvwvw)e{3KzT;ejL;<u|TY+cHx=r}6jTCKvhPjgV^-V#?MY<JL{dco%J8lW7WH
zf-RtNV>i-*?1QS;-Mc3quaYq*t<KuZlRYTt{I9P0J{UMT`k)f?ry$7)<=P|h@tS`_
zaJu58ta|rG?+2RkO)WDGSnvGfFuFPIkCpY#xC-7bg8L2Pp}shG9v*kxiirfv1vJLf
z*OM?No3RjWp%PWXh(n3WDsjZ`dK83VWkH<Jiy;;Za&g~0)W^J4?EyUo3ugKLDgelW
z=Dz`83^p2KB!c3Q1p(C!4_c)X>r}qf=A!=MWE_?6Tzjo(TBqV-Tnt;P?g1+BQKD@u
zIa&rRIA&K=6XQV_=qYI)1$!k6WLcy7SX)f2NaRVhGLNjzM1L?&o~gg-yM*lp=K>zr
zyLPr^4Rp#4uWYn$<_-AEr9=nx@FDmg<cN*_o(THUbhHNwn8qvxE2PE3c~R&$E>Gec
zRd$3X^GYZh&(y|2ZKU%{a2MZ+%GPATx4g_X*$LXs=%+FuUTCZ-e2r=PAC3|R>4d>@
z)S6@{rIsC#JQ_;oN&BLZbD8*=Oc2ZhIPImes{+0T;I6%FVe0s~qpm};1al#rEM(kE
zDRhS^#8g2I%n$oy0}9pK(3j+iqQK_ffu<N!Ta1<)CKQO+FC~Bj?wfc)OL0+cpVq#L
z-e7cH*Mzx4Kg89gz?^#XF*l=|dynVQjNPh@l|X+6DR;&ty*M7llj3;+YQuN+@w~j-
z3tlC~^YZQsyi2WGcaEvNs?lfdPr1ZBmi#>_;@1juHCRB4=ANPfyKo|eIQbPst3BG2
z{0gJxvl#K%0fn%d>iZpsvKp@-B%ZNu+fiaQ4sJ5o*ajw}5+{B?hWA)&i;qaO69)SM
zDblls<99;K(=^f5VtAk@Y1H!Tua!qv%byng)yv(X<^QDFftC{wBx)eWXf|kK2czYz
zOYMQ>LCcYS5c_2GyaZtd_54rzYh0VV1w&9m>-h!vm7?cVY2VE2@K@`_@_>q=BFyV)
z#K<k^1mq;G#rmy!qMat{Zs^~bu?d}S4}o)S<MWyZDD@S(Eh(g$rFp6+BbbC*-(%W3
z2bIC@VMhl%<Btw+tky?CZ>ZK4V9;n3a@Bf1)|UXhp;~{9UZ7gf2l($z9VeMO9^nA>
zB4nPXBU!Cipb+ceVd;Cd^-(*ssjthaqy?Z{H;hkP`9Y+CPfzk2vbFemBiPV{E)S$G
z_f6<>4mv>12M(-c#!t$$_5!HO@{!|D-9iYE)?RscI5pL%v%Dw)2BXeg5F+me@|{-a
z`R=<@_)e$iIK3fo9U9f{s<V9l32bdh9QSq0$1@>D4L&Xyj&``;Uus-f1|RqPl*Z*H
z6)DJ1g-~nc!cPo4>gaD9>$Tc(KGnGmHnS%j1LithS3vs#W~L)XxlbG)nvVx)bcJYi
z01pZE9fZ2!Pf-6JgROyF`70p~Pl7P0$RWq>cST<lWA{%$o-}q}%_Io0E^cqMngpre
z30`P5s&U8e8(<x%(^bcbT>M94x7KM`#TQWxmEu6sK>iK}9CGw;kgS6Z<i$Q#Y6kM<
zZ8Xh`pgBncd1sV2W7t|v;~@v~f#|?`jbCi|un-1?8ZViD2emdF$WMkIxdZvNDCBB9
z2J+QSfbT)a5uEA%0j7?=sDnKy19>&X9VQ_~<JX}OBV!Ka8KzJ?i>;Gkc{nIHT75qn
zYTA4!5Y><LH3S!@kF5PGN;IMTXH)sj*@lQC#Gv1Yf~liv(m=kEF-pDiO9ASutNijJ
z2n-F!@<DvpU@SkC@9J~&Que4uwY$nMpZ9^o4T<Af5%TdYj8_dmGCq-y<Ke+3KGu)&
z^b3P93Q2>vc(pjMRwOPl@EiYmB<i5L+=Kx}b*gJZ`@b)w_WRoN{*N%HHzQnxg)0=a
z#>Z?<oLfcnjnWr~)ah_QP(OtASOoDH8`L_CX6&}}-7mh1UFa&D78RLWs*ZpnLh0-F
z^OY`ek0~$?k|n5o6&qlp&DXH`+6iAFi@_~caQ3(~92I_t>PCk8??9PY(RMpHdsgMN
z?$K{Nfs$gS=jXNuR0R4dNRg!opA$ljAR>z{9YKHEO5k+3o|42Ek__Cz03QycB457-
z1x{y-99UnXNyTr;l$0B%iaB@p-F0|Zce}KMr_nuv{V|X~YUgr}l|`A*PS<ai&o;Dy
z%C;PO^Cl=_PgTQMK)?L!IfP$~N>N@bn-m#=A{>#|qsSstWIl=j3IlGb+5iR-O*!6y
zG$F^#E`T*hvpwz|GI(yS8<p@Dkso@TjB>A?fmhQHh!RECBOj#^CyJnz*?7e|Ghu2>
z7q)|`lRofOe0Km`@!*eEXlsv7<hM|<FO$X5JuUDuKjm?{kE78QOsuU~_%q5T-!&AA
zw)hZfIh^;63?5GdTNcI?hbjUY)!e_G24Zj&0*a~EAWCFldtG1-Q+{LJ0-dA)>d*yh
zSYV+k&{-E4nNq+(4_2pPRiG~L4Ga9y6gWi}=$caCB`JV~iMoInTu^720=;yBpBMxs
zNV22=60f>I7Zzw?3Y?(}RHYOcAq6lEpbO-)z!tbSY_wk&SddcSWGR4!J-Was7I@ec
zDAon8NGY)UFg7|-U@{9#Fa<8w1^T2EcvT7<=GHKu1qPV{`#5or^Pf@*%$EY0Zh@sN
zkYx&7scYDb0im8tmrDVkTR>Lpd;;6UM&GOpEKVuVTMA^k1r%#|#uSiKibLwglmh8e
zpq*R56GwqEQ=m-O!11`Aq?*>`QhT?6IA9l;0yA`hHYo)jk^)D%1qQH&V@!cLy1+ID
zGzrnTK?)r178t<-Uu$2<-Ej3(N`bSa0N`~`hgsl7Q^4$Tnvzl=Go?UeuCfiZ*@1OI
z3iQXV*kTub<Y_h9K+EdIkUBO6dTA>326dW&mX(KC?}fmmzO6Hpp_K=q#sJ8r5QCjO
z@$z}hzJj5lmpAuVm?_7pbG~xEa6WfFbv|)Eaz1q4ciwZ}ao%<|J8wGwbY6E}bE?%5
zpC#;$zEJ{rhN-XN%+6SsaTv$JK#IAsquf)7)0j#F7=xCoS2H*UEwv-dF{<T__k`QV
zLYdYcb^g_HTtE}<gEMnuW$Q~-8)zDAU@6RvAn-4*_HQS@u)nq?@<TwNx@kM9O=GN}
ztG10tJBMRTv8qZ{D>e_NmHA&a>eG6{&B;D}h3ewgw3fSIXJRX||D9l#Nz}>VeNeiX
z9<r<*3JqY&Q5(yUdW4?Xik>J)1)8sgZ)^e@2eoTxTFQ``D9{%GnvU`P8oE~k`Y9Kh
zW)kNG6FT}JpfGB!xEiHEN%I7BnF~!DiTsz~t}v85s&T)A5ea+*-50sgG?182gd>FO
zZ4D()YiN#N8v1w_8WU=O{s*C>&lyTqYf5fOK>q+^E<B+v4XL?;d#j;jrN(`J0{T@K
z+AGkP3G^;Q$yyEFIRSm23k^8}?!H3F>xPo7{lb&);Pz>{uW_Mib3>}7;O+q^_RiZH
z_nHKBo(oNbi}PC$uwcswpxHayH1xa#bQ>3%))w~#5IS0GD7ivYa%BSg6TA?fv=Qj3
zg1g*M@~y_*F9FT-s06yLKwl`(i|~?^e6OKfC7`1&G|hNO<p?DlfG8&`@ey+Jp-zRM
z=YuZv5d!@^{1%)7gqKO<+}{$=C%e!c1bV$d@4!n^V#ciL3Fy7(Hldrw826<RI=a_T
zk_m=^lHvsP>n?OhfxcRBcLfwFX}(Q{w-XZ354g}r3G|r)eJ-F$Nm~v5BcdnW^EbNC
zM+<bOP;xAw$dgMoCDjS&K`!($0{t;U5!~NkDEYm{eSZS_a2L9hKra<&x>lq_mR#e0
z=mfO6ShYH>vp~-zw5-@BCG@Pold}@gFYGfMJWim83vRko<Vmik#Fv1!T<9EuK1rbI
zOOcZEHT0*5jWtg$aiNbF=soanV^O*hq=XI?C|Q<(KGlWpCeRxRy@Fm8DH)@2&q_eY
z_ZqrS73f6*O&5xk$hFZSRhod_>_Y3_xj`to1~^H{C{0PX1oXo$bRWT;FSzMEk&^M6
zl7H*81>`&8LiZKu_5w}MiIjvj^gk2Og)a2z0$tmdJSjJn(0u|=9!fwT<wBn!(9aWE
zRydOqTjRbd0qyKDJn1LUvjv(C6DgUmq0dP`zwAQy7wC(Hl7)s64~7{~azq09E*JVt
zf$kx=@l|;8kjDMhac<B5!G+Ef=mYT9^-*l3<WUX%VgkC43q4SvYX}{E%1|;wQ(`Be
zTe#3?3-n(FcNkFQ$x9md=mhk8KN+6n3v`&!k+~$}pBl7x0`zGYbdZ3aCuGn8gpkNS
zq>KdU3>UOWK#vuy8%Th0Nw*#AvLfVy0um<b2Y43A4$*k$nuJ629=_2bnhww5*EvMa
ztIj%Sjq{50va`y0(RsmH;Vg5WbDnkn<~-#*;XLj<>OAcH#d*ki!1=Rtzj}9TBQNBc
ze)OGQ$JNHT8MfNb?RjbTstSyD_OcE9n_>BDd*Ngs&T&=!e1JjkJjQTXDsvwUKiW*^
zXgM7WKs*A7kr&72F=zus1Q5so`d3!_SJJ5f#7u)@E7%W+VFt%)ET^U;0f<Wt4u)lb
z=w)zJR{JaIJOE;#!NEAp!fJKg-)+#W$4z?l0swTBMq@MfLZ*}X0Ftty+P{J079f7w
zFU_$Tr~qOEAlRHu)&5P4HvsVtAkZ9}kqPHN433&=e+>f+KrAyj*ze4z8XQ}y{aYAO
z0OD?ggRuu7E;Bf`R{OUyA^^mV1_xsYK;#=7+p7KBIIaPr$l#zf0^(SMV>`T3!;<dA
zVFw=>31%>V2McWbYx`v2n49hIHtO}2r?c1JiKoN&+=42qW#epe-}7Dwx9{a6sQ6<V
zScuN$iPETMA*x||cK~z`S5M)u5rVS;M=_y03b^rr179VrRV{ywC>&|<(GdmQ5QFbr
z!N<QwAij%hv7;*rxEzCTh`{l$;XyUvNFSX~z;V1GeHREE|I(X8J03Fl=yn3G25_V=
zAaML^BxsVsN5>OzOANl@0>{7fAc5~9gO9Ez;K~g?TCQr@v<qGm?qq|HPNub>FFpgh
z#9$pI(ELl^5zu=NXz8T0i9SEYV7*k}_?KQI;5Gw}GD`OnaLo+9D+G>z=`RBA34@Q0
zCEz}Q1!t=f`G89PrKbqE83rF+OThgdaOC230>{7f5dk;S;G;7MxH$&jc!A?zqh-Ae
zKDv>ByUgID#jcivtmqd4Un_%;jwImDH25Y99RJcI1l*@aul*XXy}>tC;P{u`9pGNn
zM#82$2z+0|MpL`XtNrEl=m2q_!9>>&5E}qN3&F*)^b-IPF*xY%0pc-(V|KNFHa#~$
z3^O?B>H(s{;JBmOe+RuaK=d*==+*(^GJ|7owSR7ohVU62bhiMJZ*a`7_Rpv11RUS)
z*Rntt3lJP{*p`LW{)P1N0P#8?C<Sx}0kJ<*w`Ebae-S-9Ks;e^aPuA@J^%!9EUxx1
z?xrDbH#q2`0b-@W@d$46rk4dAR~j62#{hA!!Lg*;zr=9t9D{={7$Cw1$J5pRr|C@r
z$MFUS-7i3t7#vG6_|Ss_MEu{nEp)X2(bM4IFhj2i5FY^o7RIJ~1&Fo=2ZtGYN`P2p
zaL}~^#5YI^v2Qud&^rRe{RRi!C_rok1o^>Xh8__hCK()bodB`K;NTcTF9;ApgM)4p
zAZ{}_IL6TP0Yo2zgDw&vt}r+_#?adVL_33nZV?~`8yp;C=-~k3yM3A;bcq0wV{mYc
z$=4A71O)j(_XiLMkPTv6IL6SK0gk5(4thO+*aislgJTSR7(iGChZ$pDGB`NK1T@4S
z0bz^X8aW1*Yat+#hM8Mx>W3L-gomk;(>Ti9xHmm5P`+vl&06Fb)eOy5ZBSHg@ZitQ
zEwMr>%8%(IE*ZVf<VHG5$<tAC#y1`eOFV^*=dYokUGK?V$|TD*e}+QX(ILQM`4>ei
zy`0f_pLR#q-msJ!*Fty_P5TIOUa9JiuOObQYyXPjh-);>m*+4lvHZwA0ukMl?yFb`
z+HtRWID1xQwe0oBbDFQh#$N|hqFz+MvCk<hE#>~796Vz^CsxeDb#xco2o=MTzrl2y
zyDWPF+!p4DVz{LUpt2B(lLwvm9$*K$Gj&q*C=|sEp{#wt48p}IT6Ymh*VS|E=HXZ*
z1<NimUH~Ogm=&{mura2+Ts_Fu#OBKyj7rj8-JRgbEZ)q5uv)eo{FNy)ch6gNvNtX4
ztKafgcNZYlX`t5mn&&+kls5q77##9}4hA2V;xmL(ws(5I$7K}evK@tHvGLo}QG?BS
z03_vbGJQ;ro3L;4lt57Dp%-j(G(~3aj_@(D;8W4cuG}WJC>G0N1;uI_{zcii?3PPf
zZu=!VnN1s`yE0e4`(~D~6cONmaH?{*rU`&SkOD46UzQ&A%^DB>;@To!GwqvoxyT9o
zH(%P-A8lbEVHQ(KCxszpj426$PU6aaHt}yiNN0$P!Tvq#CopJiYX9b<DA?rgU7LcU
za`zY8BLQux>R{UQd#r<$&J3TK^mPxqn5|uk${4aNhEfkl%V`NXCww(agP3x7k0{NO
zEwnNm3!T*XMkKvmV(?XB8pzZ}u`y-ln6HCT8+(_RF@1?<;kHSs?M$d7YiqA-6LA8w
z*8v#_lAU(s#1Cjn(!94Y@ifQ{IdQ3G;&^y8&ebxnFH6U9KQsz8<ov$on)Bmzp*$2~
z^?lGuWPnVvS3xHlvVASek$$e0YiSA{*hz_yd%@0uu|<Q(S1&T#?#wpnG%J6{L!Iib
z!XGwq0aYIp!D;wMy#O?I>y0ig=$Z880e*Q>f5B|HK+|67b<|+CSqj6mO622ed~~Kt
z4f#oUg23ZkDX#-buLtrq56X9O$H+o+{HEZW$`^VU@uf)xTd<(sO-DYuwf_tJt|v|J
z&@FdAZpKI1p{oz|F$AwlE|N3}j?1iefRAjVyUq<#@i!P5_SP(n21ycqo7P(z=?jr$
zs@u6ATy3{8G0r4*{a97FpS~0Bj#3|Y<(Ttt99`u5M=;Cj5V(l@#JmA3SgVeNsM^6=
z)QyYbzm$_bGp&}^4lCqwj}^xFV+Xy_DY(&juopKv5B82;r^XEc&NYt%Cq9pk%{XT3
zf%rN#T;ATT-`X?Ih5f=U(7<YCq0AZb_2z?o?I>S^`m68xVCHChMkNr~X}(uH0T~4`
zpO2{xpERcj0PT4MaN7Ew?{D|^z0!A@wR5&NKhK{P`Sy}AV^QP!JW`pSg0l-o#6~z*
zolF*O-ASATI5<u;caA?(MrHTk(K7E+|F>5qSR(I0@T|&kE3nTl@mc{ej$Q!xF?vpZ
zJN%Arh!ZsNE^FOfl_fM6ffT-Oz(c+&@|Kbj_Dwl<2Q26NoqbDI-jNfJ!Jg!B=l+A^
z;f}ip<u{8Q=49E$Id=Qm&79__hU^#$5UWE(^{RAs%njC48H#>`a~iyM%TPSf36c=q
z7|##4u|qj_v)GVytF`a>EUU(j?0+pmJt<~eT>9OA>EVpWY{-mtF&q?2v~W`9Q4FGM
zAp?j%9kHACXdnZQVQR2Ik8K)yV?*d{f$r5b^rBQ~>}m&}I)->y*k-HRs_C}#heyZ;
z@=(5IH~DRtdImEc$p3s---4|A7Q72X3?8{H01EFgHC0O7FC}o8@ZaI(P<2~tiegvp
zxnzvg3yma8)CB^64dJnIQ<Y%cNW$qtog`4_xKN#-s>x8QrF=gjiO#<DbWTg+hJ9`q
zkL_(fXqSZ_PP+C)H*{euzxY>uE4>i>*wD=A+8hhQ>JidP(G<7RxlQ0P?H6443of+(
zEhJc_{a;IA)BYw(qyMGk*d!`;p$+v^c;UGQ)aIn7ADoKan5USr?r@iiQ82fpqM|OD
z3iQ6Fd4oWI@h#gAng_y>Cv+$UI+f;(=yhE@UWbY~OwE?^k4kwh=T{5&Gok19yxNpj
zWa8L^fI95ptw_SGsXIlm7rNBdn89ErIE(J6mnaRrAF~lN)*S_CJK6)i2&P4+Wu;jy
zr?o-j;uAB~ClCjxefV&@fEFneZ?V4+O=jOlML`iEv}}m?5y89W8^fcQFiw(3y&F;i
z16LZd2j|#cSb|xvh0n03^vv_!+`{*Kx^v3z!TFv@7kfe%`;1w;!^h;lG3l7xp#vti
zce1Ss1MI;AtPGY+^F5zN?aZApV8U09qLTVy=!&w?LTr%Ls%uu&a9oRcRZF4n1W;#(
z@^`QGhCA5>UF`m|;%MfD19IQIIn$oj*FM|w+68^B{?W2b9D;QNoD%!OE_V7X44_l_
zFs*N1hA(;(e#QdnR=YYset|_t+o8U8L6+UVd)CSvdL{eLp4i5!*{qz5UT?{p7vT*|
zx8Celo%^0IIsm0MtH=(FslBkqDxKSYFu-m_rdX}xxF6gKR$J9D*d2;XfH>Y0UrW^_
z4CngW?t=XEa0h&0kMW~={Y&?oU63E$kUr}zs~|sesvXL<rVW6nWu0k<x}@)2;^B|J
zR%?{C`r8FLkrMvXv(W1A++<&vWrqf&@9W;q3Jn0b-3ljh6m3i2*KMN}+zwQB>-4?d
zi?*ROR-lEt@ZVZs6SS=<FB+#_8Ud`%6J&BI%LZ3-2H9!pd%8Dc{W(@Md<CyjhaNWO
z1T$x6Ia$?yCfm}S4EzAcu+|{c^(@LiYv!w%i^&-0b9Be7YWx!Z)xC>fNqrsks-tr#
z;r+fwUq>>l{k4K}jEEfM?R0x^PdlyK2CSbu1-qJatEV-yssp9Pq4Wc2rD_i!+zxI>
z2c(zPb}P$5vGo29hBvUf1OV|s4)p*K7(;z=e{H-dYj(?mXjxX;^hHP+yYxaROGDyS
zfuh;Rk)lWIQYad25AI@nHAQ`!pa=vNlcI9OSE&?r0Y%3J0>0<l+RXq_ToMmtX`(O|
zgQNn`Bm_N>N)X8Ls{NQ+f&PP*cq9u~&c>k~AAN=@%s8v9#Jd9ZgMu~>OpDOd#XiV;
z_lptWn>O~mJuq8#vwW+W)lz>h{6^ad*EA%0C6nV=g<$*(FpAoh>N3oC*@fKBI3&8~
z=Sj`2LQk*V(dnMFNHgnz2HBxUC)k4%Y}N$NgYeD~gTt-xi1nWgzxbmA#@kf>tF}^W
zceVqkn!|CK*58g!rSYxw&Wc+t!}P{W)c{&_OdVBxu3Pv`X0*zKe4Tzw!l}8lvNL)3
z&R53PJ@b_w4+>mxcMR9ia|HTvK-<yfx@sygD$jCNSRJN|>StGha@-$1-5=TRk1p<y
zzWPV>s{8}h1p_GRA$0@75OAoWg>EKv9OqJf^|zYpx#;{9XvnR4w-a0V!<TH~1w8jB
zc@^R;7)MFzoQ<%aDGcy%T(-(U|5xX8(jm>NvZD$LY!#rS8D*@N%%^mL^N+j%jwk3^
zEA^@XM8GQGFoW0C1zE6;SSK_Eh7eR){hVI-VpU6#EA>l+KGkL<LPv2h3aO2s>K>el
zY>AFCS2CrfR~5BT$Gi-it<O3T&s6u!j$_!$Hqy$>_!(*eqFq#qGYQ(*MvCk5dQ+&}
z9v!AuOPTk-kiH*>ZMT`~jZdhdUX+9qS<STXJ51dpkk1MvECx8S6uoaX!~V7;hl^SQ
z{TPk?&x13&5BAdM6wA?-<JN_O<67VVdAoJLg1po1GcY>Grrwrq7vL1M+p;ls$nMkV
zcb-!9F~(jHlUr6B`3B6xecsw>bQypeO#6?P_UpDlx#&OLov5Te5@O4)1IeiRTFrUG
z2-2)EJR=xhuhsgcF<g|2p+B4qVCa^Dfe7ILOX--D<}h6^WxIO41%q=UN4#iHAQ)+<
z#g}a&`}{l9u}CwGych|SBOt<P=&VYsDsq_}*)eN(<Pwpi9Rc-(_E_>Gr{K*vj~YoE
zH&49t_3&E}V#Jq?V&j&r$KQaeLvjNsbahtGSb;}9e=7J${++5lTOvwRmqOdMgrRC{
zhh4O*PwVh84h@M_h41;s8tj4HRu8{KxvQ6+X-ARcfBu~O(lQ}g*Ji@{tF%AqTH;|U
zAkfz*LC+-%AVGOap!L0xBk*SlJmvXSH}#Yx&pbt~o+90gsw1gtkti4Y#d45XJF9%k
zscDgJ2v_+7{)pEu_Q<=#^M-mOZLKWl8*8K8y8IS=-OaGRp3;d@<GjyAZb0cVP1N{p
z6O;~=a+f5^eg3b6#)AJqG*fqbeG5xN2<^Obnv8715ANcwd2Gi=XnTZRlxa`dZ@0?z
z`R1>Qe(mu+|62Nn+~BUrmt*K)*3-+ai8I!H{wZvDOL%-as7%iJxxBvqgvI#i_sJZ_
zh9VLWvfJBJJobc+PHWqDVeaNgt7x?c^7=gjPA}>*xftCaBc!$nYSWGSS<88fU3w*@
z7F{k!%AJ)c_i7X6W?{ubJ$Fq1W0@)XKT$5$M7b4B)VEa1{d2oZXRwKKpQn_ow`^f4
zdpF9W*E%H%p4XIRI{{|R&Y-6aegrK4cI99m#`bTwkXNkvP(*;%ZYw^A)O1)4sAiJ2
ztFQF{)`rYjcZ{y}G3~H`t-rF?79S^S<ytypV|A^q8r3>X&6V2z_DQ|AyZU?U7gAhQ
zol+(g!a>PYqom9&D1%{l*6zvl@k`Z*7~WW26%NvTpYcbN2WfIX4N!JQ^YLE$+@;wr
z3lcTta7@{kO&%P{8d~CvCAfi9hnPPz5Mr8-r;cEJ<);|V*Tkv__=vT!?78ZhQ{a;0
zeI}1uVv%!aXCvxrUX+Ot1Yj}GY>c<D?7MOA76KJD4e<1;2I}Dse9pjP;SL6iKD`sA
zI4s9JbD?imm70K#b$-WgR$sv;jD&DJ3qy)lSp(INcmtRV0V6%VfFlh-SK|Z5FEm{r
zwZXu_GgJ1j#K-TCDv#ygMqm1o_W>u~z3tzYyEgI(N~4CNL=E$RD8Vg>95-PR>Wp=D
zAF)3&(fYI@;p2+OrC$y2W_n1?L%(3_ADteCZyvaDPDi2beu#9^m#;be9LZ+D?AKb&
z+^#`$rbCp>R-0WgC(@4ikW7`KTYD)bjdJ}sM^Lu*jbx}#@sLDu8R8$IxF0EwWIEk2
zicj>GD(fSn29Ys@X;7P1kYxtwcf%pGBh2cSPdg$lyxAp;IK?^y0yf6NS215UW8G)l
zpswTL8RrpO0sU|*--9331zgOLW~Je`mG3nMCPA0T-AqC85KuHJcauR#({k6k+kYl^
zA0X>XxvSE-2P1cK+KemJl-3lv+Xu-oa(5$oZUm&FpC0ugcV&2kj(Qg`(i5H0Gtv|1
z;=`|zyB_ZWuCd&`qq97y;TRxFa7*NFI3|8(th))9UNj|l*TPdxlCC>&<hGH!<DqOx
zUnbzoLF6ujP1akyros{?<nAs!ptTD9A+0@)V;to!lniwZ9!POwd_$}})B_K|$+r9D
zPRK0FuqSw}jZQPWH-@<H#YOni9qL?*mxBnLT>;g(B8%;v@d2gQTUvsI$aeJ(*^AVJ
zzt%2+tYzY0w+wqoX0ETyV|73j03UsqwS)P444;~o5C{9#$Ss_=%bt*J_4V3AJ6c2V
zH<N$)GRq2k@$3Q21b8gFtiD;uxE?fn2g@v5%aH$s;f;RNRidGu@Wbq7<@g&5WLihY
z0)3;EIaZ-JR+wp(4oChDY)80L;0csQtB0#aunUyPzK9f{Gp>$d&Nt*KAq0)bBm?AQ
zIN`6Qk}fC5Q!=uRvVT1=6*Xhsc|seE#Dp!V32OZk{*{_s-;?b~6WGoIdv%JxT`T_f
z3RV~0&bIX*5nq-M$6GxIzZi#<gwzr}1Tp&(gQ_EX-s77U#V^RlxGb?JBdzK&CIZy)
zAC9#HQ|xFCP%==<Facmlo$~I1cvWF0H|VH4X&a?l+LQjVLXXNrzRo#@VWcD+b(oid
z`|RJAW;wl4X{lPE72MiG5@3KIQR`qV6V5r$ism^O^v-1`AiVRx0)Ta13^h?Lo=uGk
z;SN%MhRq3PsV$g*#re1IrKcf9bKGG=yuRnZw>CyMdZLrNriGhX8;fzpn|hcgArWdD
z4OR=K><W~Pe$yXgk!&m7Qe7yqaea^jrrXhcVNE77n^CV8Cy}J#vBKe2DdMr?$(+*3
z5G>Xc*=`k1wRTkBUJl0dKXnn;U2}L)a4FC-%U`3eM|3d4_Sal&XN}7V#7jD&XmtA2
zwAr^;ph)Co306XcJO_{f#CIncz*+PjREzTuYot|(g-FpPx**ksBUoLkwChv~1fG3c
z2pX1yyT<saJ^1Z(wCAybxRgUr7We>M_ZARYRg~{@VHabC+(~K`c8V2tv<h=#g<Y(|
z9<jo%R$<RrVPC6oK&-I8RhX}HC)T8Ms|!1llIp^){72Vp`@!A*`gOMcr;B{uo{j}5
zM^#3*dv^P`G^;M;5-BXBk#ik|0W&wd48Sbw$<YnX0Ot*38Vn7(KzCJj;SiR>u-zvs
z+#APlR$)ktmP@}uztt;Rslg;Da;XX!3EKnVR1ZI$Dq-5+o{U-X8S56jBYv|Toh_)C
zQ-{4!Suh=x(1j^8BCu}5RKAoOE#>q)!b%p^^JNQ@TuMOen%YW<?z*Os+V!T!y-0U(
zeH<`M)wU*0=}EYsuE#x~DcpaT5^rviR$%`PG@5khH^i+esSxPDxX@>ENCkBJrlCUu
zeY1wfSp07=1yYg{0gXN_Ig$|%T1L*JrEEWxwWoQI;XegA5;s2rTiZ!J1J?)0@=SgN
zN6jl6jKQnw0#Q-p%~TgiI@-0?)NV<kzK9w48SCDCJ3Wn8OE7`@^gp%2m>jC{<}sgs
zr+_{MQ2JuW(@uHS$8@>q3nB#MnAzUK%^O)rqgHwHB3Y3SoHH=|UIW1ty<UpcK7It$
zdq|i$ZSgZcaewq*9`)WEQfY1^GxD|i03TgKL8nk4URS12(2W!{<?T1q4L6P#9etju
zk0CjGZV8P3Fa!gzp`aD-5aDLuU4j7^zncfMaN25iF+%}_0r1}eeIi2#40A<VBaGv<
z7dcp|+eMw?c+G$S7{_Zj20%Le|Im^Tx5$H5ffu7GB(!mlP!7q9*8%!#9Is{Qm?j*r
zQHdJ<3PdiyM0&Pi`V8lvZU(;+{yxstGyeYJAOHrA&Mt@SY}ha3cRisa0r$&3XoKC4
ze4Fl}!{5`I>`C$ZEim4AUk7O78NJZ!Z$~enN{wT`u*uIcP0A*3O@?ytknk6!pSuX%
zgGjgA&r?lQr#gcRAXh%1f82gRNcR+GCiuE>NGHKuW^BM+?9d8;jeu~do8k9^Q1q+_
zBHpw!nW&~cYtjhE<8~}enX&GX8k!0*TsT*GUIpw6T(zQIy<S7|v;ENUktK%D0d*_;
zw*zWI5-AryzyK?_L!C=+Hn>B-KOSs4hdMwu%|QWS({tKQQLo`&Gt>rm!Em=wM?Owl
zoa7J5niniN$y8spAblRtms^;9Gf%oGW%sUl2RQs9{iWGB9-`aY+;=B7v);vAL^r#r
zWA08o?2JzD=!=zlu-c{6Q<`3b1A((~{x^G#nMv?zLp(3iaY9Sq0$!Ayq@$=9Goh0`
z_9Tzf3Cj#(1(_-xIWO#_&7jFT0N=T#^^;XqJ`D-9kKveD{p&MDM#JTXvlznmF4BZS
zZ(_A*2%B}cD+SirWwpqXz;n)<<_TxUN;B2s9#R1&03nuMtC`b6@Zyi5%y`mG&~~LR
z`WtAQjfok|f4z~QZR+by(dPMev>8i}NeT4ase*baP}@GcCyrPs?ufb1;I?p4ueYon
zKSj1-IZCky$pAYmcVqbE=$UDe-xXgy5o-}+^Ge{n;gatM_zyXD8%AznR~B#)yj9)=
zPuOGCI6FC=7H)w~vU;cVpkzT2Hn%_))H%s+Up@s7N0?0L5owVl@>*M25ufud5}`xA
z<+tGLk8UOuJZBCSP&$W-Z*C41?;7S%@l|rD!Id1M+*L#1g*v4<xm);8Dpx198N)?j
z9J4x{nwa;R$YFGk*QySKVcB+?Rk#OJYyZOLZJt=s5&Jpx;Er}#P!6PFii<<=jcQc^
zjlT{=F404#x|vynDz#~&QM+^W`_e>(%{EDeYN!T$*aiF=LxQ%mYDzQGd*3F~JF4N_
zl4|D;caz@|Oo#z8qLT-tg$I{kcy79#@3A7w;psbFv0Ddv%9GQ-_LM}G7qd#s12_jH
zfDnP-*5@E-#P%j0W}Xq*Tz=KL2Y|`sZJ%OrD|Rfy&QRTvH`lhp>Zjej)10no<`?81
ztxFFMXf(pZwEeSosGpFDR#)Irz4F(3AI~)LKFm<eShxIjHnA^tE3%!VNy6mS_IeG;
zHvblN0_?;{xawPQv+3>Y88e~<)9{17(N*B3Yr^Pzb{4ml7u;>feX00Jpu53nHJ}j*
z(QgJozg1fyq&o;f{Z?=jB-k`GSZN2dtzeBg-NweZ-u97JaDBJ$*X+Zz@|K~#JO7MK
zqwQaB2iG%&mH~M=BR*k&Jji$fR_X{8f-BrC-qX&A_f%hLS%{Wx!BqXFQgjO-Ht&gf
zZnJPvDj@CP1{`tQJAt8t!C>C2M>GmNqORV=ngBf<FOkZUmuhOFs^-3mAH_LeAN|@3
zs!K}j3>RAnP!8_i5IkqNn0yt_p@8^WTYS++@!Q#!`#p;KZd;58w_@Buf)aLcHQEXZ
z!-)4mT{*tn!7T)dp8*VN7t>(DE%=V|0L+VQnQ&Lb3K30IdB{8A(i$nU3BXolJ3fGY
zk(zj<5*bSNEA|v%{W`~;AYq~z9;<iV*aMKy;Fh`|l8&gtH**qxIQJ#XMhn#+)F;^{
z%=Od2q+w_+*=3)b)s<^`Y=&|O2pLPtsygkPs{;oht}R{@-ywfj`i|ZC-j<PGxJn)1
zb`}csM}hpvabkOLp;`bw1L3gWVlDm7J<P(4UWX}_&k|k<v)RyYWef5p8;Bh0l@DTC
zrVt|&ry3s@$VU#h^Lvn3QMmTTv*!2c)Rx{f-~7VFa#KL?sE9jZDX0px-$nts)O*Id
zKB$x}fQSA8`~&pi(IA`**?n$SyBt%+v)W_<Fr?1WM#tqNE5K13r?LXLK_{XD(>}HQ
zXV$Q}nl+qDP6snBoN^poZ+b<ajgL(v@yI6l13GWftFpXoTUz*fbS_OoGjd~ivo0_v
zv$@Wj6nqL_7mew)8!BV+)ewYCflY@zZt(qMNKbomSG#>Yvfe6M9V>$LtPbF;jmU;#
z>Df-@Wi^O-f2u*$>on_CS!@?=Vwb^q?n>W)^%9j_o-K!V4_^mC(^kp9N#{x~b2x>n
zuNgQ|XE&VFVGG}fQIaLk0mVDKL_9Nb5gr7Xcx!N867WJy)U$+~ZH`{riu3g$BJ7^8
zfKA==K#G)d{2GS^05jIzUiIrZ`JC>dgL85q5{bge``|(+IC*h`=3mQ6EU9V8NiY&e
z4%c(i|4M?Bt<lIsaPmV03gC@!@-8slaMB}rVfJqdC%^rN=H!)xOycCDYcwYxKx5R9
zMJb##-UK|wdS3(&t}lX_+J?RezBcql{@c?3@oez_OH}{=re4bXl)aSq`_@t35mg{P
znw$WF*A`Hlph6Ir24?6sbUV$^gNQA)os$SAQ*{-LeqeNZLiESws9QGxv<lbU2eTpX
zSy-QIb-)!YNH5())c$Ow)3LY)35dM1tjO!mXle|7zL^j`9r8F?(E87*(=<!W*WyP&
z73;*ZbG$uiKjI*{8;E#EGRB0K57M%W8Qa{l%*Y375a8W*B*um=G|3b8kPmmQl~ITD
zkTNYVbC7qSS~y~)5i^k`X2u@>%A_GO4c+08krkio90)9XE-KOfYu&k6=mgqNc4@x>
z!>Q1|09Kd@hS6|riF=@W7;loPLr9^A#CLuoao?}e0|=JK22?c`9ZHzKJ3lKu(iWE>
zawhC1oj^&Q@ly9n@nurH2ZcO>qzaA~#2B%~b--%Oy=j=_Wq_OheJLC?wG%oI+H(Dy
zrt#83-1n+qSXJF4HPNyfEV=p+Zisw()xcI^K_uSc_@#Jci+UDbt8*>x<Z*@}^^rTl
zQ`U*m^<i-9alaTC=Cmp)!Ov371^Y<EJP1y#@!<a)Oz76cvgee<hA+()en+-5T>zG^
zgyX_<s!&4_YJjuC4DR<Zf!gkYX!x;u5V_nLg${TOqF_=S$G~dq(5gCLl4`0O$J8n`
zL%i9ifQHhuj^m_$C*z+EUuNyLaq7TbSV<7C!y@pwy5PQq?bGq9#DtOu>9m_2ms^>T
zs?^!-_N#T*>j~~g`L4GywfyVzUEFg@DIBdm2uL9(xL?JpCP}rpd6txX*WE9JDSCpt
zB~pBxXnaEt4iLv|yaD5`2MoA?d^!g^YTbwM3Q}+)che5_u=rhx;_m<|p=09qw8iYr
zjCI{#0XN)i*3tFZtccbgYoGcjc1y@5iXpW<@p2_!`a#b}V4CU35+MYA&0N)$^i`_V
zKgd&(+rlNcM>5pecu3YU+Q5msNY}i7xHb^VkEuZH_tn+~!NqaWX~?S-Ft5T?MP_NY
zwI!jDx<^yzoQc^AoP6C}YryQa){cs|!Y3w|DS<M8bAym-7&!u<U0>8azayCzQFb`&
z$RvFJ14&8)N%8TBibp~_T*p?+SQ6|D0=wm9!e+xiJQS=guuB9MJW6i>+pE(0BKjJv
zU1sSpHCAA!0@ix(`)2|_Z9Wf+dtoZ~!*!yCNm-NBTYxVDuv~E*QYXE@7GkvqL;sMf
zMj>=m1Ix7kdp7eZl!|_H9oo$RJUK440~hRG+blA{hL_n2Q(xEEfg!mYZ^nd|ou7lV
zU+lDE^aSjI!iXT@>Ty)_QFfpQk}Kh}?La3S_hPp%#wB4`)m#%O38|M|&|MV%UWpT1
zPJ~6J{``}<P^bJePxwVDe`G^Qje|;!9D!hX4T{h*?5#>NH1$Vm4xZPPCFsFnwJcNl
zq_I6#Bd<3td%|HH4Ux7Rntd~a3!F~^e~M-cOWSegb4|BBxofPV?Gu|L8Dtk_+k^1B
zQ+IzyzOCh3B-3iU2e<!JlUp-MWB44>r7>7F-C+^eH22qb+iMkV&0Pyie{&ngN+C5`
zd&YSf1PVHauZ-^TVcr*l9r9o$efr+?%}H+{i?#8{*7QBR&p|!Boc4$lWS~8|#uJ^=
z(T9RVJ<W?crU-j_HEdaNsVc$1U$>IMchUCTqS{FpC!t2$Q>#kf$3i9QEY=d@EFlyw
zx{ozL=Y+I1cyzT8qPVqrS#5Fpp1J^P$SvzQDVT!(&~15d8EUyuY6*Fwds$1!(>&M_
zKiwLTJgqHpuI8LSXx*2KjR)Jns!3x|jp5g})F!yxN?(h1L|8-Pc697sw7q#zZF+;Y
zpdr<za!hPJ_9hsF_4TS#(}=e<M5)<RU8<bFgOX`%E8G~g4pI}1yL_!h=b>ag(d_2_
zZKd3;y#l31j>QNYQd7_+^k`&t!@ByUpNVhJ_>NjU>_uv^Ok14El));l*5!CH&RZH^
z)&&n39@0d}xk4Du3s?9)`>Mz+MyodT7|u|4YHt&)lob_{14KQ;Ac|hK>0hjgBE`Vj
zJJbZtUu%(e*QzG`rUwN4C4hqtBpY>=chIZk49D*LPU#V?I^LDZ=1KM#$|z3VRUtuh
zGi&V-or3M-6|ZZjC!}g%<%lcO&c~!bEFH8J=O^kRnC@b3hOYuvAq|cVH%Jt1?e$uo
ze`~lEv?h0mhYLNw@luqbptFm%sks<(;JAReIoR8h!BIAIXvJ$*AT#o^J*4BBz0Gqs
zPA|C14s@`GWM7rLaoU-_SKjiy@>=xkW~I3sOUqyxu@GPiBm^j&&O^<vguOcRiSs73
z52F^YAl(q{?pQHW;|@ZmKd<_hT#mj#w)Le+#(0>#<R0-lGK4|+*mCRyytngAVkENF
z=`Y4?h&bLzh{T3?#-$ZAkz^HZQRz&z2e*N?+$?cgBU?(<HV7KtV6U)$Yamv%y;yw>
z2Mj#Ti)@cP2XvB#DgaMSq96}H^)TU@-kwf3z%dz#gjFZaeJsh*9v!0oR(M6by%Wt>
zi?CuOwZ)VU9=YvR*M7sM&wd_V-9L9=xPY}6LQF@%s}PB$oB3~q*B}@&i>o9PtJ01A
zwg&DlOo&ynuz{hIt2>FEI2aHPIIQd#R3=w4VO@CfD*7-;!De3^?`iyt2I0}W+B0H!
zbop~2N@j#4JX+6Q=SXrGJDHAJZwzUagJX4g#8u%T^}zF*7bl`LKAPC*BgOI0WlO?u
zlh`OEbl$uIOyR^Dq?`*bB{mvQTXd+{=uOs!QMFo+ZmF@+k~o{I4s!|Tcp-$}g7KBH
z(I72Xa7J&(n`G*=Jy?yY(;4gDUoQ5b^?Bj8NXkw?{MSt@Kocuk=SYdiSt4mgYb$Y9
z^orJxFq$;IqBRQNksM<n#C%SprLArp>`GH-sq9QvMrk@-O161PJK8I>(W0Mjw^R=t
z04pFm4CWwIlMu{Zq4lC(coMxLu|;Ja+y2qAM6aaA7SBH`#2#!ey&nz0ubxY91!(qS
zdOgjEE$V&-j;5zt(W|FJzD#WKBy2i^g9+L}L3ggi8^E-q3{ogZpnIj~r{jYdXA@q-
z73FH*zNiY{f#dfH9ASXE9LJQUS3QG8F4+J4cW|T`m&Ts$1{Wo2B^ux^M66a{qq|2!
z&%`r56$s_t0ZBRdo<aRurvj`HHenRhy}s--D9dDql-&utio``qazxN<_*()^Z?v=9
zQq++n4SWzm0*FN!B-;_TJcDOIWB>x+L+U~fh*aK41Hf5$PDlXGNAO~Sm|FD}o4oZo
z_~?7=UYIF#XB;m%_>5!8L1rAY89j4?7Bi0UG3~6pU~Twt%sNJ}w-Q?uyt%nD|M;bu
ze}tFX%T-CYAH-gqBt)G9q8izYd`RUX?Zu54h$(6J!P5pMsrF(3qyW775Pc-P`W+-d
zcy%7ShyvD54{s2#QoM1AGh9=5eo1CMwUpzUUO6eV{#o3+iN$YR4lnEZuZ7LBF&~0a
zs-Gw=<P)z(#QUkV1X-M_dwM^+e>b*?iPBEQcBk*OBLS);m5|2v>akN+Y^BVaeU5f;
zRJsH`t6JWkGAeOA!hY=5Tquf7E0}|AZVmF-Set`2Iz?DK>d71AiL|h=#I-Hn=A}nG
zRy(J;Rg7tL?149DGhn`i$rP+GmFeDt<M0v3ATJSmF>toC26HF9U}1zj9J8`m|NAUC
zcL5x+IYmq#Aquekt7jKgx=AEV&UG|-q#4t_KgZ+8O}q%4Knn0`=mXEO*?`S+(LzL>
z2t+ENcoMU%BEO@u!i&o?$&!T<A7{pw4WZw->=FDeRd2)k*cW+-v7;4SZWXOmIq*y=
zu)*ba(MoQ;3ZH`3`qx_*dM!i^&7x~P*v=QgxgiBvm><&PVO2qPT2;Xjm_1t`FZAY>
zdLl*6Y1nrgKuG@yM_|a`PbLQxe?lry8K@hgcj?oJXmTZ@S#RCs!ERBjC;yE1T9`E}
zTVF@du)M4?4Lgu!u2MedWnrmgPiLE5ghF1x=MC{j-f&*SA`QD)Zgpf3&L%0JoShaP
zm^aBA$qHBpm^@prO7swo_@^pAJDp)rK7S#%hTll|5#~;enNE<UBS%*iW~Zk@vJ9@g
z?w{8$3GF2uX2G<EXiH1$(Y{A}1ej@_^6A;|c#Dzgvdh++=sZ%1Mqv2p(^^xMZsR7r
zp5a~&_qWjv!_3Y*dQ3HL815I<x(R@gx(3`-*;xN+R5Xz{Q{0+>^WXnQNgKdiCB+P<
zd_dB0irO}C7aLbaZS|a1bUG&K#D~Y2S%(d7X=HB}_LvRM%x&q5t->3p6uT?1qtR=3
zz#ZPc7?$3oIRmf?JGZSb))k!zn#4m5VqeC3HHwC}tw_~+J1utzN;GGW`?q0znXH=N
z%sn!i=klKtXNZ=`dJI-krTQaAdAq1mW6AY~TT5}&Sk^;28!ITdVK{`C+>syg$hL9m
z==B;kKt}FPbq}&J7kR4uZ>HOWJXpPcJc5DT4rPbgS$t;&H(>i#z>D8$_-(C4TC#jH
z@V;MO#y8u;C+4-&tih={TgIi!G!Ly38#xK~kyGjDV&oUvqLpRb&lJKX!NE5HUIGt)
znT&-9Mlib8V0BIw;D&-5e`M+tE4&hOOf@13Sk*LWW^$LhcDKW)?9)C^u}^#GKE>=L
z=C4ws3apH=2Yak{v1H#za<I7GYwd8F!Jt%Gx@BMHzH3Fe?7ko~H=}Gg=#}PRZgK;}
z)jo18Jm(GA{-Y<ZIiHC3#e!Q)kSN}SM)96rRRj&k{59Oy8g=(m3@Rjdd>eiWH)>1<
zxiU+)3ac+rk)DJ6g9b{37FhalAzsm9-HVYy4VsZ?zwFnO7!qT3rfR>PJUH#idSCxa
zbaRrgKM`a#oC-<u^(Q?Fs_T9It&am5-KCD>fJAqpfaM$d`a9uFkholw#>a%Op9|my
zqhs_N8N0`QLOO4MqKUD)0(Bm8?2baFXgfcIvxVAH$L>YD*<5v;OZZhfPmBBdpegkA
zgE~UM*!^d`X+#}zgPCg6$E2=q38;%;%e?GI3#s#UujE!^Kia{)_gCpGK-@9sJ~Zr3
zn9Mc3-m>{*Y*Jg9*rW!3CXq!bl}f{?6pUsT0r4(1L#GguW?#<H$Wn8hW>&1dAUO?4
z+*t2Q4vAU-80%eyMjxvGA5QImcBu3}yIuNUXOvT8z2iA*vHwvzrT+okh{L-7Ka&1`
zys7@D2p%fdI{~sN{ja01)c*g|&$|Cz!lk_=JO+=6zFQC@E@))`<4q&#bpLOY{(r1N
z|LZaOm--*l*{J_>4&MLux*L*OZ$_<d-#vk1Nqx7EPT#@f^i_XJ>AOyk0GfSwIlGK3
zm}7>@lsG-em<xSZhSJG>R|eol+>yR}=0kGl^+%iNyA2edL-k!h@Q{6XoDMou`>x;z
z>ATA*MI`)5wwHu&7Pt5ebw90;^xY?T(}+6hyDXvZR8p6uyLZtZz|lUm?zYmlAys$h
z8yBSs-L3DtKYc)+yzoeU-+jxL*5_DmcoGC0yzk-<rS#pUf0dSF|0BDMEO<j3yHvgF
zhEnXiHTXBV@74gg5qG5TzJH%|`aox+m?;x=9<uMw2P4>bmurTk_T7%1(sz$jir9Dm
zLI(-qM}QXE-H&KNr0-5>iaP1L;X>U_52yCs+j>;_g}y7&dY#&LlPUT%#*OW6X$WhC
zvKjxBW$k{|Q<ZjNY<zk+qbfhWdu)8O-D}Fjo~o876wEoYeBTA(7PC7PIIXK%URPC+
zeqFQ*>CfnA<E`MXzuy=w+m#dUgunUW7IR9|opv)mO~WA^(Y@(My%qf|C%SgT><%cD
zb}<*3(o<;=abb<he;sih3df-%E*)m6ZSPSk_WlKY$7~T?;i8U+xaRl~vSPVa<!t||
z6c<VdT^VlB^#i1@VbJCKhY7k0pau<st`iX4aLO(v=o$lKjyMG(Gp;9sF7?b~y61w+
zCEPldF-;bZ4#Tz)<gFr=SU4U~_lwAi_dB>#RY4DgTc@U3yjMvgu8Wc*uIm{ELwaYy
z@=#}Di=+azfX`LxUk@VUIz#;L_15?%BCZW^lgrCirQrY@Fr~M4|362#^+`&&wb|K}
z8gBJy6mC6in#Q=OM<U$nkrHm*2)$>x)kDIq9tgLRA)5@h2GCSM)*GTt4!63Rsu^ze
z_@!_QH8u{nuA&`-|EIIwIA50jl_V=eY9Cms9-Wx*O%ZOnzWJ1QC}H<Kl!&*G>t}F}
zcnjxRC&ycmIiyLV(@eZoik(Vz`x&AXc=EiF&aq-#zGW4ym($C^c^>q+1E1^Q5~t;^
z!9i++yw*OPC#Rm=&()8<3humvSm~hCTgSz(u|b$Xsj=2-OfvvzFmZ|xuo7conxq>n
z6&h#lv$5wcQ;nzxJXs`V8{#6_<jY8{G~isoe~O&|=J;GJh-fgw0(yU@fXkdj9+ub^
ztq-@0uH`*q&0VD79w5DZGM1w;P%AAq5gTGPL~M*KRBP$sPIX-OVqb`e?RAOR{54J&
zMoxQxP%ZyA8&gvOrF}i@vD2OAz={`WFZMhN`nSu=UQffEZ@8=GDZ|=Q%$+cH%N4p2
zyMf~FoFOeTv75CIugHX9QUUlL?t~cbb+;@R*NlVBmszDws1@N}a1)}r&Zt%jtE1eK
zzKVei?cU`I-_(VeE!0)vWbx7YJ~iNNO3%m#C_MqOPl(Ewrr0DbgfGQx;#Z4EvwK_H
zO^Msu9@s}=2={bvYa0u7N6&Hv=~B6kWIK3@6LBWNPmrtHrfG*k)7QjRZDa7AW~3zs
zL-pLv38Me6wefp4lZQtv`fWDe_ov1-zB@f?uHC<kUSDcr?QAhL4Q%`rW~-BI{Km!7
z3COA)!p5&)j|P98jklI)8~+!KFzlQs?v)DEb9}B+t?&OIv++J1D;&}oKLr{5bv7Pb
zQw~U`Zn75JMrezR@ycZC=7R|kZAq#9HXA>akwcP=?@eFM*!T|UL$zjnLf(^X{Jn2d
z!j|3NgpF^IQ)|k`AD~fdVB^2qO>Gt%|2;l8w((T}ppD;xue3zM1#cZQZ(`#&xi<cR
zdQ2s$HvZK=OXFM{AFc=N)})Q+8QHM$B}q0O20mCxi<#t)6s^zA3S<4_Hf@$WyJ&yO
z%Ganzz+vRVQmlM2_F8PBmEWY%z40R%v#Ft#-^6^Ef75?t<zIznH@5QEO9f3@c@MRi
zYX@8_&zv2s{3dPX`?w{ImB&hhgq2Su@XBvU7NGyzykfO!6D7IsUP|(RG7ph(iMP*h
zY%cf1I}&r*2TI()TxLn|-N0O)4@EZf5Oj$-53x`S>#v-Lm~x+pw(A%-H4jk=(@n4V
zMl+mEx?75<>3ptITj%|sn}=xZ7(dCt{}(*i=MilDhek81qvJyw&C^WPzuhq|(zPTU
z<DYeu3~Pb?E#RiQ<Jtx?&l#`FFtdyMujeOh=KuUW#4Z|ugU>_2AN>{c5M${A9AX~A
zc(qN<L(B(rXzza0JOuFms(A?dFTXSoaTo~EhV9qRL%euRa+kWX4yVd6|9cPnbd);}
zvDhwJoZ_(l(mVuO#(9Vxn1%>t<{nwb!(%z&h1+V>AjZ8i4Y9}yF2OX!)5vc^RiQkw
z;1W(lEXMWmyn#@4cz}(11gixWsVCt|#W01F-9<e_uL`%6K-<Ivk2W<8F$F+?NK8Xu
zw(XC2MbFBIoQ!(u>O}M9)cDl7<U?g8e(hZHp>P~Jv!T4z?1dBW{>?VL(_M{icz=w2
zV#9A-2>zwIycdXVZeYW2XHV(5WY>moS)i@lubWGLUK`{?+3<PjV%qShFo>{kmf2E)
zVm=r)Jp0c7NgIBKjAV_o5Xp1NfB)5vZ(@pi`avAu<mARG6Hfeg8*U*$s2BKBm8;YC
zV#7P5C)I{46B1uPm;4}Rd}gd$b?5(wHarI&`+sf2FS#8^ewz&sNQ(CVuno`S81oBr
z$<<_pIH$kXhW~hZa+kU`eB)a7=~s8KPcLQ47HjL1cMQaWxV#7lC@fYdLh9@??6_ad
zrKC7=BEv4t%*`qb(q0EQ5XK5FQg@2MU5t4>{}OIdTLhzxCA9CwMB-?*OGB{P0T^xd
z*&PSsA>dSd?}fp}R5KQX{tG`7);d<$#H8^i4UufEU&Jd~gg?MHQJM7(HRmm>+BIxt
zy0lVOL16g;xAd;GB4$f3c7&UiHgX_`S!R<yC&@I{Zj)s;o#CyDX&jD$$d1Y(P3|(A
zUP2m7V>TAp#Fur#-%@oQ%$AI4>jP>#naHD0a0ZA@s99_4W+IQyP{ucFGJbKL%Mfqw
z4&<Y;Q3EH4_$&Dl*>n5`m4iLG<2~r5qDrKQop!nXu-?&MX=ONAeq4!D#R!AN(7hsu
zBh>R(Iv%WK5cD`=qMiA8lQ$C4Ut8d7zRt$|$hAsitic|;1FlKQ$}8}ObAS>g$hp7G
zEgW%+N_}<+YngDqzn7pzt1-S~8yZ$R4d&9RkSDh{mQLZa87z6i6IMOV3G|qAVUO8E
zddv>>D4*6N-8bu01e|pe2N$Ahq<)WL+PA8(2d-&D_`h0RGZ$<s<f1;!mrabBahyhv
z^hhgNG}0qI95Fvoc(CM+(@IK^Fkh`Y!7}T@b4q*64)g$C?2h)b3fV-rTD1mxXQI^H
zu|dtBu!Ay8#gS6Ud!p91Hdd<O-<AMRbMnno#|Ab39V4j}PO3O9sot5|a68?svPwBR
zXf+s$4$T|l2_GT&eRf9f8sDrxFm3n=14@4-%Ts(f53m^`M>&770u{;W1z7xo?ev}@
z<aW_Y%8qESm2Pd&%PsoJu2Hjw=x*&hC4BcmFlWTqjo!`<1ow3|R+*`dW0OsV$xSZ)
z2X*M>*$M0aD|P7Q+ZyZ8`><Z3Ls{(TR2};E9vXlKI@A?zt*b+w0Pw#$^ou$af&2BF
zb!ZO^-=TG=1JEBthgPxhZ`GlHAfs?79U24VP|x44LotXPWj-<k75xSsDnfY@;7$zv
z40A(#U%*pN(xKZ%HK9YJR#As;nf0IQ&@Iu%I<x@wiVkhUDB3`Wo`4~0q(ikFoETeS
z99l>&|L-{TOXE;FP0eo|hjzi`IkXP_6*132bm#>Z{;fJR6nGD%Ll<jj>^JHV7XF?G
z1eEz+(@@cG(4kg_09S`zMASoke}Pd+(xJg4o6w<-n2njS?(~`esScf9-dKl<QLpIG
zYzqxZ9fz)jS~b$4#T-D54rSkpGXJYXzobKL{u><{Pmf9zFv+D#@#UU5xDNGk-7)c>
z|3hCc^b0!lF0u{3eH?-gwZK3|ng4dmZ_}YyA+pKiPy}fi;u{TqC+X0EU=upDWjS?d
z=d@p^Ls$cC;-Q^W8|zRT)GIo4E*!lEI&{3y*ua+?#R1gl&|HpP2^~U38Hsr4h(pCg
zvVY^hiic3wq2eKYK2$s;_5bF0D0|L@*|Uda&kkjmPs?r;4`Js4;vwujD9m=_q5EOG
z+;NC}apR$EHy+A%;~~63JS5u|+<0g;W=C8d%AOs_=B@^bhqB#x=uDvJIE0!J52e&R
zorU!{gf?p(LLCwh;a|i<*(M&s6XKzinm?Ov3ePD`RE&5iQSa~cyv@PJAz*AW9?I77
z5OnDHGA;8@OhQG!VH}zPkxka2Ui9IhLr1}KB<avgB~9qi+~=r6f4h}B#BI&kX^W}o
z)YNwdwlCv+!tTyUYz>CY7h71Mf^%T*=WxR_;NXpI;fj(WG?GO)dM`7#Y<uJ_fb!tt
zw<hAP?9Kp@)hWjpV*w)$4Lm}Q3=XOH;mfie)yh{-YSPAXH`}vqDQVt2MbpfaYq%SP
z$JPwg_3+F<EIGjuhLD&c;i2m6TR_4*Uh@Q+Kzd+YW=VY6eo1UZXR_98Zi$q==Y5b@
z0~Kf(mP}&%c?niS`ZR~Ff!G#MitxN9qz1tE1Q?2?<+Y6b(GGOPE|RGy6c_tm33M2Y
zT+v}@Hd%wM%TnO5M1kOTa__0hIMWlc{uyc~1XtIHAegIv>{i&|g`5KpJIum%?+)?7
zXy6v4BU;!+TdZ`G+Hy~_X`!|U8uzTMF!!pZ&yrXFyoGBtanlAC<MF1AvpMMNn>I3;
zt~wi$I3?!f2;N6{sFCE4Qf}Ii`7gmX9oYVJX?Y4mO^URf$<VHmv^?_vu=g(TQC?-@
z|C=z-v`w3|MMXu8iWP*W(9#wPwp=pYN+4V&(3Tbg2@nWLn#=&Lgi=G=3_}!^u64yO
zTT#(sW$ndkFVc&EE-H4r+G=Z2**X|>vAQkttIYrVoacSdoS8|&rS0yzfBhJG<~`>;
z=Q+>qJm)#LC|`S$7EWIHM`3T4F{k?%K03di+%w%0CgbEqLGmv47vA>NgR3*?@|w)1
z9J+j%8H>=RNRaA*E>jG&B|tlMx?F(#Wzgk(VL}dFHa7G1<mfU?deI|YzA>#kx~%)U
z(B%uOGU@V-b|5-0vlM}|(B-uzzV|?vOANH>Ks$B1JR$?JYh8ZMh?`57sGx9ibU7pu
z^B(E)+4An_vUG>grER587jD)PJ^C<fH!fXXLz9IrFWtoV9_aEe1MLc+ojP3>H2~YC
z%QLt$xpbK)D4c*UoQszu<y8{t=#ehBPR*u^T$0Vb7O%8NUgO*{(LYSrC5hDo67P^V
zVH1;vC(a!7leX`#J-cIE9)~xN@NoA#iykU}t+FyvJcHXhxw??sI{UERy4z#psyxRd
zTdw^m-LbC;wcimF`pAwBIYC;^B_bI4U9t-`^7MvCiS{mDzAxUgqdoFn-{KcN9{z6p
zj|9ar)BD=XA6Pa-&O_d<Mtwv119Bp6ANMbZ_eT2+W@~U{Zz8fI9(y6tvX`qi5?ojr
zInWV#q4OQQD_`_@p9yT`sF<02Tns?u0g&clc^;HGz`;GaizBiFRt%2pZQsjrw8*|_
zcwNhPz37F@@)9jO;zv@khb5yUyr0XRF1w9DDEFf=w6r`6hAlhHS<t;5WyN^_iHDz_
z0)#_hIYCD+L29TB0VWXI&Zr=-g!E4S*A&YMe=nC_2DkUCLb3m7Mn0W4k?+tEH8G*D
zy{$AFeClUERp}?^gp$IH8knB~CZlGe^)SPwyk)^tmRIAk`0t*u(M-PimEoV(9bxK5
zv@Y*`;zNmI?5;OMUAnZ4Dut%(AX9d#9AP(Nn<zG0i{&NHl<XIimpot9jbqFDCqK&Q
z+0{#)7Rk()Ja23igttf!#0N3=yY1n?FaO&!!93QH7&A1v;0dtg(aP3-FR}tN)BNh&
z(fVHbRc3zm^MODQ)&tIO=jGrr!#8;C6V5ZQe=b24X@Dm|r^ojsC(|gDGdbm&)A?>b
zaKDW|uDr%LO!?$@<#*15p`Tm9S5}H=w1K>lgNNnr{y-FdH_3{E=naH?>MJ4y2W}FE
z$(1{4Lh56cs|8SNS@2lpvyej`tGtPk**sRclmQiVWP4}MW0kLiB6;?)${k{cdU&jI
zH08}>mC~F(R(a+lh8~s4bt-U>g6D4T7u7Po6UrUQd93m?<csKBgO8GYb)xi{JHYjH
zhB?u*#uy0h<a#>!<d=m2FEyeC<t6cOdqU1ctd|q%<y%?FON0j)jpew+Hs5+gHf@OX
z51hsDruN7u6BTmVt(-OlKi+fDp)MZYocuOP)(Gcbn<(F$$TM#mCn8%n<m2Uyz9`y%
z^x$Z}(L?uy?-Hqsy=TL?ywP)`MWa_o&z5JS?;^rro{heX)iIXGFf#k}Qm4qibywaR
zt&?l2BKx>PN`8B5=gIGw{EqEoadAVRj*8T}V=b%7;>U^}-!(XL*U0_NBU0gQgZ6L-
z(l+p5$I76idB-@^UN$nXA|6?n{Aw+fjjS6cyK#5tvuc&+75&q$yxpDOOhh*A32zZR
z6XUQ0YtJ4P-nO#O;P5u~og~UPCB_!F9ypg9*`q^RkLE`|oQiG1tbP)Ux+4|a-VxrJ
zT)IZA)J_0n6`?F-?Tk?&wklD+qod`~L}Ys+ww1-dMEPATO2*5#cV57A(2w`wF`6bM
zCsn?ky1Yrf-HZK}a|;{7kJ5-N{e`znQ^0dtJN7YJGuD?j4F~Vai)<Yf0p0CEKgu`5
zF1V7a;O6K;NJRZ@?5t6oQ?d0Ok)1P>7cLW$V8{ChkT&@(?ipvy09ZiJcCD4XjfVXd
z-Tr0@Va}K%SH>D&)OjIo%I(YlB;)?*0iALkroTva7y~6@yBS$eULCfon%;ridUy>-
znv&<Tip2egJmqfWSgufrmv1y@dNwCwCGkjm(c_W+ak!F@)<vH4xaVisu8!6ZVwjeV
zG3T1+BnN|F{E4~O4SQy0<&0%xmgRNCwlM1Om3!vt)A~v%vMCkYn2NQtJh?gf0||Q?
z#Y==Y2S(-2vMw-9F8iY3c*lx7@3zAmMQU0&ip9LktUtGGOthd;n-k#@AH`UE{LZM1
zW03*z@H)jaF)SWCIPBHbD$z*OqYh+99$J2(BK4q@jz=~n7elpcZ-iT^*gEj9kbYDq
z8~Li8*i<QZAV?Rqj`Sm6`eA@cKUxl6I+AhnhvU2I$36E*KfYUcn*F#Cdi(tVxf68d
z^UUV2yH>m6_hUPsy6?x8EnW1ZcbEP6`9DiPURy4P-k3l55n<N@{?TUCr+?h=#BxK#
zD7?vv%^<oV$d|9jO2B|$;^6$A*(&1N5xd*R^>s6SW$An!vXdq|w~}p6ZZaO{dLcIx
z`12t5jpJN$`(E5|gXN6V#BxX%SWe8wva$y(e<zdNau>^o$L3;r+u<D|&^)KswpECF
z&oUW2I9AsW36I|?kLuuS#yjdHQQkk^HkSljOxo|PmV~-z9djhjLotLLUY&T}y4WQ}
z51IVRM8V9W$M2MEF8h2?fTSK2n8>^UO3lDp^*@wka7fI7`WqQ~%<UyI^bCT`@Fd<=
zLBZrGeszR5$#ngQ*rGe-D@JtPV}b~m8%5v4V|}q5>?f??R=>h!sbwB}R5n#4^BC4U
z-z}MYC9`iv=0PzV*s0Mn3{RBn0Qa;RfKY{zp@?@XM($r(Flc|=d`?W%p&>syCH0_`
zD|)<5dPjfKo$F|8<Wq9|N{C{TGENwakcJ&^6Eei_lv=dWf&FgTUKH<GV7|`d-<4+~
zVDUEjkT87ch^<c;K43xO<?Y;jVM@!mlE=+4?_#)1bx2K`OPPADkI7Fj_R~b9-G7t~
zL#T*v2(Q=Hef}sy3B%u+Zf}wwi^(WpDF1e5;XpSxLy6)4GNcv5|DjItk@Y%=SD2AX
znc${5IPemmgvfV@NUF(IIr6>w_g(D@=BCKE^#K)ql{r#4D|zS(BAb1d=6M~fc^5o!
zzlT?q_{>25{nM8cXC-(>WKzF)MSpWKBK5^jG?&UHzhP?bTOy{S43X|=+1n8-{?nJ3
zZzMib!GMywq#}873wVW}_75TJUODyS8%^~Ns<S1q)s*L2f|SUj|D=N5StmYcq%e7v
zsc}6u@V-Qong%4U;*GO{k++O)X8X<PSHu1Ciq<DZ>uxED^Zd`%Jk;27plJQS^QrYO
z`9$-YxS(kC;B)i#c7BkfxkYVHkwZ1fn!*5iVDQMiqn)_7f=>c5Eo#3{z>znMii7?*
zlB<}-y<t?#+btF2!=eilQwFq-^rF|%YNBa);_AfZ@sWv{!{e89PBaMCYumS&wu@-{
zU9`<kohikpxk7H5b(&m#wKO+#H1pgajNE_gu)HVYTpz&@Taf&faM^vW$e{lD&U4zn
zU$lNY0(oeh$h41r=l5NHnfq-D112T^_<7;`xr-rYBj-u>_hPzwt{^gUk`Qy!=tRQM
z;7pzZTJdUlXkPTz#A=ATONbh6ZhL0+oJ3<WanZ)ngN~1U<<`jw&f*rngOd62bK^gW
zj>OxQJ8_3mE77P#xiT?kI0t3lYly;AMXUQJRx`~Row%CYXP>;aPu|aXE%mC(O2V22
z$^SwDvidqSKlXIz0e=h_YC2F}BjP7V+PNUj+@dV&MJS1!2HGZU&%8;QSF9?T<sWR;
zdpP&wwNaR9Z2ZZ=k%J?T@u<}?bH%N^gT<XKFC_nJCg^g9WZN@E>+cobukFjB%)Fn?
zG5IYR2LTazfhODTB>&LuQfOMJvscG7?y5bAzm5GSjmtePMA$cWu-CM{Gm>8<kTUnW
zIh~x@>PwqP{cCkM(x9}KijL)SUaor1J2sP+4kRzomN>pR(CwAE>$%qi9^RS>z-zfe
zl`BE7m~Vifcm7R~T)qn)MR$m0JtY4~%$uXPbI>gI7#3^@_Z6W$&%Ee0T~M7KY7d>)
zdA|9uN<OR#<-HRB*`K}^oM1O|r2d=^mkA-arQH2F5vfNO<$3Ml-(>dbVYP1b>2fl-
zgedQ*ya9ADdG%6*Cw+Pk?!|BL!B%po^v#Qor{>F>Ys~L&%<70AtM})jErlSS9AH`=
zOUqn!+#Y_(=k6;C+@LZlT<p_#h~i>ym0N)&fpq4kVnJu;k^r4q)Z+GC?(7|OG`O!f
z?-(hG;`kRB&%l8xhTM5a<+|cOUw@o2EBq3g%6Zb{g9`;zKhue?-jLM^mEqeC8&e`t
zC?=WP66HM2dY8~})k4&=r6k@agN#fy?=)i-v&{|}{}Sax%@lNCJhG7hmbhDH%-eu}
z=DWv35*_0Cwzn;o@+RyNzjKYG@sj2GxfwDSEh1Vda-Qs`Q(=7S<V7UehAMN>b#^Yg
zE|EWz`A>VB+{MHW8SxdKM%p&WOOES~T~xGr*Sceai#9)b=6<GHJoOfDGsCY2MvfKn
zs?7#(clg&eyTiXhI)25bR|G1&W8H{bi`JLpqsUFm_M2Dq3AytOLawJRZiYI9-NU!w
z_p%!1Bff&{;<349LsJh*x6H1cSHvCZyKLy7qxumKl)XGdjBm`uE&MA0Fiq_Ag)yiv
zBsC?!DfLU24UO+sS8CAljtO}R<hRBhESBc{;;c%^`V;+cZP~?yS~?Wl(c1C?9oZ|L
z+dF4YN90$m*L)tqpjdoQFx4))qq!HOsF`jXH)Z7hqSgg`S~g_R9&Y98D1UlJG6rxn
z!A{Svze^}F5q@q@oAekP<LxnQ*OZ_osd#vO;1R9%Kj~Eb{p#!Vx>HK_GQ!X+vOaLZ
zq^!zJdXC<kIeP4BnS3|2J|_GWa~@%ix{-sZku8KiiXJ}$`fRC4zJ|Tgb0iZtFw>80
zO(B%wb_6u_pn%4i6G?=nGR4B@N!|)T{C^0Oh-}`|7T~ItgjtLN!mW?0)5B1_{>yZ4
z(9w>HJaw<QkX>A05y_e9$(v|OW%9Gv3C;TxDK-3pZ?VlxQj=#&s}W|Dn~d(P6Fti3
zAWW)4cGEJsUq*!Eh+>(1VY%`61c<nl7Rb|l2Z*2^-qg!bMxYs14#I;Bw+rqfs_W1Z
ziV5;^7BxVZPQ*5KOv;Owugk&w#cM6*!e-m(bhlB{oSE8&+dEp{^Yi1WSI3=~AMMl8
zdhv_0XFSqgS@bwg%0}2^7zD49voNK~BV`c^KB#<suNEN!0MlXxvy7g{HW5&dt+(@H
zCGF^L5WH`hLlqZ6pZ7r=#K=QM!q_&S(9Kju1I4PGi_IpkDal?W1D|#tq|ivh%+71n
zAx^du?hzMxfcz#Fj;`-l`)xhs?G?$#_#_^3jl@hvJ6rY^-Tu()jDq*^PxAPsu7e!d
z<$W*<=Og*ApB8hRoQFA<3sG1rD2%sF6<ow9k0$Yp6-?pENW|Ml$aiCEna%}vc4FW5
zj`3u)?Yi}BCUC{E-VgTyc<WKD%-Y_M50!@I6c0M0bFujT4|zn3KI#>FUQydlGN1p$
zi-%r1aCgyX+pYo1%KYaK>}i`#iY)KNR__27>%8Z`|J?nrzjQqH{P$Z;-dVRjCPnVJ
z!1Gp}_x!HsfAHe3UpnyO&+l&j>5I>G=D+yd^M82$`@_Ef;;;Dl{M{?Zyx3X*nAXQC
zsB`Ap58w6|Q}Kh(?|SifwA}Pwz$bk0Pn^~Ibt!gM=YBx-QE=-X6V$j6<@p1hg~Ps|
z#&70#rh+ALn0Uu<O8nxnf&81?&JxTozAnj`Gk-C9KxM_U)r6GHl#lx`7aQqMm<mk4
z+Jttg2c^v!sRyN35~q1kD4%*z2%dUSh@W~;n3DVymOYRd!zF(f^v+9MCi@=5ZHEIc
z{|D=Tw>_1AefL~`G3;~MOw`kiR^Fz0eL7s;esWwc>Ym5vJa3qJck>G`KA+3qt1|if
zA)mkR7yft0-DggQyThKbtbOqdhP6N3emphf#WqRLc(H#LYeO|}gtZT0NxNe0RcKJg
z>~dD}?Vl8OUV5#}42o;fVn$Zp7nmo_7YCR2%kt3gS)RD<sk2PM!gY_7oDC;p7hz30
z?w2&{mn@hY^BsLh^0G?OGAC#qNM7<)9n=%8jWSc@HCf)4l#JlIE#F3c7po&HEx%pv
zULMW#MwUiyd+HN&k+}(d6OZ&`zWvb@PS4uQ%|fS4KR7aUF!^2-LN8(*^HI>dbtTWU
z3mz58XC>z|Qjz@|?@ydzSKT@dq2=E2r5;NH$$Kdnmpw}EtRZo~)YNSv@50^YeQSBD
zM^{QK6HR?*C4a;&)Z3owoI_|}O8W5)z%oH=?91aG$xqENvvn3to=CpW-v<%j%{$?R
z$xoTe_fZ+V-p^*2%H*Hs8ftc4;NN}wn`))azcL968aKKb|5>Gh(m#2PfwB}RxZRM0
zJ3(0!hAf{##9G4#`%h=p^l;~JjyGNwQT`;?$ed0H^hL&xPBYJI-Q7R=V3lcoRP12v
zaB@3Y%fkoyOS5@Lg7smdEZ}aQlz4`Xceg$DpOw<^!OkMCG&qvvWvvvDctzd3o=#nV
zZbj?gn(eoKTqbGK`iE#j<gKNkvxpDo@%3Sf!^qcSzc=|Z+zd-0iHl5g>u9d^a7jm`
zkQ-DFChjkWL%5lrpXrN0;iw6r=*3LC*(}5?vVgq*L=0K-!8smD-UTyw?8x(E{#=<H
zpmSS6lVz>+68LLuEx7HezNW2c##$cp0z&GH1;o56)$K}_(y^J#Dmo&YXQqZGcfoK~
zh_iS<p>?nfKfUE8h0RnM&n!n(lp?a;CJW2&>b!v7OGIn<0%i9L5GHxY5UVOS%#*yq
zV0KGHs4xUZceK2y<7vnJV`#}=OdGcAU(Wc`Hl7V4`<456CWx0F5>xsTyZ9K6Zbwsy
zc`p8UQz-98GV_k@=hMm&{O-IIZ{}H+ie#VGoa90E6<8JHrRulI<1!uNWSToJG-x+V
zjIpB5!4sImx4bwiw!i6no$sX^%ebk3_wz!ZW!_BLYE?pC06^#+SKY@bF|IF2vD8`q
zY;>goJ4L`w33WvC1ZTLDMq)ll7y$T)G#@+Pf8-`W;{47_?U#|eqZdx=+~wjyTc9!M
z$OH}{CO;FvD&gH{jRgkd-(X8^e<Q?ghuaYpqRq)<T*RUGY#IDyCNB$hVW4i3nPqrm
zf;nZRT_zRo+Bu6^$!#L?;@d{`IrJ^b^EK!&XPF0~<ShE9%IVz%!ou7jyp8$am-zcU
zGnCDH!dq$HJM>OD&==WCOvay_Uu~SrOiRT|XsEb7{1pPMt#WI1<+8jDk*`P-_lkSk
z9=SI;X^z2VO!UfBcq^{?$jH{_D-+?ZBPRraUsmIjVFDvtcZa{6r@%Y8M(fL-QJ>B}
z@_86~)o$9GvaaRJUaTym)plw185t5-xsDE8*YYJVdKOrXh<rZwuFi8egugN@MSt_!
z!=LXw%Op+LSsrb@g)R&?AWNlMY#@Nc(w)e?DD|fH@V&{K1HgsD@L9Rt8|1dJnPsEF
z=L%DKn5jHC1FMaK)##vdkyI^e>yJq|^ltu%ALE&@3z%AcWyTCt7XJK1)miZS3YXe#
z^P)4P4tdc@Cgiv!`O6Ae7?#VwSmspCitOygJxoW7I?8t<*X28h?P6yRFNF`<JA-JI
z0lZZCAzY6iCAc$;fEigWd*>uut|96rNL+^wR)7E@FcGI14arD(j*ioYk6TAZHW%IT
z3(njHXz}6(Jl~R>NNI3F7fgH4i5XM@H5)&#>byd%j@}IZhz`|uQb5PI^GPNJ6%0W_
zTEq84#|ZN$fB)fZT}giLc2SXEb1B?yhq*-DSxzO=A6b{78C*9n22^fnNS?n!de_mq
zUrdI<)8h+QB&rc%7F?11L!BuTCU(Bbl&ORo>k#YY>{-%9qGA7!xh%EK`ix1MgTVhm
z((UrN&Qa3kJzNo${62Y5$L;Y$S)V}fi+mCyT*L66eD%VdZvTi)9gP3erQ2+L5Njd!
zp^atbpyfwoi1OXvjyok|W{0eHr3l&_gwYA}gVAZ!#1Jv=)y0Q?3jM@_6(*m>e(=tP
z%z)U^vfEmdK705gGo;s}XZRa&T8|!;w5&at^P=&Iq1|IH%H!_E_!x6VqujzCA5)-h
z@0n-{&h!ytFNt_M74bVa3xD5(XeLZDjT{Gc4f4_6qbdrUFYV}fnvw{b8G++>%CC+)
zrCWR2_VTZwF*CUyi()~<R~PfdWJlXRvMZABTz))t<J^wc-y;fp+8*|+RCKf@C3{cX
zqyCpYZM*zb@?|qx7k0EgAVoSJl#&+SWbxqO)E{Y*r$8PQh#hSq{E>>}7pAL7O{Ohc
zC@~-J0-8u(g?`kMPpMK$Wc(wrlVul!TI;U<)RP%iMX~~5`V}cP>xiwpMliIG;5%Fd
zp)E8Gb5|jp3As8`K98IpiVosg&7k!SI084$?`XY_);k_F7*!_Qh&~+J0Obsww7Dv^
z_OdOg!z^3HN-;YD81X0OL&avdXIBB{T1EH9&SA>7cx8xc?Ejc1@o%;SwQg{$+>2;I
z4ATIV6?`g_FJoqeq^0<49e2*<8&RNmn-P%>5URt>?&ls_$Ot8_&L><-`u15UIm_g`
zl#Cim_5qh0=LX+LpxP+=9~lp!SBDAGqA5NxKOzpE`JtK;dml@xZ3a$2iz`4EQhXjP
zuIr2>c$~atBP*!w@wU5+EUc!{m3<N>j3&|SKoT$Z?c`Bz0Et~pM>4@4zzzzh9yGo4
zN%ITZI`j?0sgBlXO^zVHUL0&)Sh+_OAiEdU*mB#8krR2wg#c))h-K&aN@T<IXHN2m
zQz<r-y{*Fuy0J#hN)2zb_rWHxf*j(v?faZ$6%K`naRxhIfLe%!foG-b9lk*qe+n3f
zJ`IM6miD~Y@YEQ1Vmm66p|HtXmYU-er!qO#uk{z0b=|ed`KARRcc+k4*c98F$nS{k
zV9i#(fF1@$qzBY1k~I_+0lERQ_@9YcN&JE;X<538?1T|3(4vzakxeswG5es@G@>wf
zX7cSyT`k&qnUL-ULwaAMCx9wCX_Vgf`u)BIuccKV{GEbe(83c)e#f1n{UDUQ-~4)j
zuE?(%)4JFz`Sn@yg6Z{Uz8UA;zftvNXemPrugx!jhKGLS|29L-jZ{1&8`De)U&)e_
z_zFV70A#F7=Xfb%Dh<la7FXo$S)UNNUYVa%fRevA!(tk=F)zuVWqnnP_e9p$2k2Qv
zayf8S1Y}740%e4cVWd8J<b4^VAR$1xR)Lc}gLwW=66`=O;6?}Y?SfHL3S#HRi#reV
zKB###ha*$P!R^kbCihZkO>S`tYVs|+Cb@piVY_5iPMW}{I+rV32kn32XnyUkZ>{*n
zL(a}bGe<35E93JulknWbEJAQPsrRS}eOIn!)sQWGQI<L*eOIj*#{`z(WyjjkpvXaS
zfAQJYhVqVb^rmw-zEocpPUj>iVryX-GokZc7kSX0_|eXb;zuVA=GBT89{<c^UK%N6
z3UjdN@qB6@NPa;b3vBqF*iK>-?o6Jdy3?SArSA}(;<1e@Mm7~TpOI)P;DwR=#3iiw
zzG4Xba=d^^s+|ln4`w-67RH$Em$gVwt0vOZSiu~Ia#lklGE~WS>4WT1kU>Zu>X=kG
zvZ$Hoz7af$XXyOgfobUW>KcJ|fk0auVoCBNTs9)H1v^dOpl-35<s-9l)M&{#L!Zn;
zM*enRx5v6B%B0_HW#ar3SALuGG3<z!ef=*@0Bh$Q$optYr0)#icek%!{4VEhrk?J?
zdh74glK2R{`{u`lhCdE#@80X5{+WR;8Ott_tKnnQT|#kQ2*@Ps&Y3+jrv?9KUYoKS
z9_@{WcV3t{-w5N|(pvtuQD?=A2?qQgCD&)IIQeL`yl_sX+(EM{)X5eVUXU$JK6W@I
zHw^P=OhNoO65c2NT70)T^z=&_i;qwtx2xDC=q>`%5jmK=@fM-!$I93dBUcI?NPcr7
z6l5EViSNjjLWLc33X}7+fwMSRA#q1JyCrb>$EUE$yWcZROS)(L2zrJTW%rC+zh`2F
z2xk~!mV4lnPu(o29T;yE@Rj@IF}l}&(s6Std8>MGbhw*0tAFX6VE@hP>645e_3&nO
z2Of)gvpRZ}DH_jsvs%Komm6eefsFrV(@Ea6G7EvU_tX2g6*U+SgS(5rJOx^3o^Wqf
zZ!Pn-qQ_-Wl36FKO|Oimjy;_V`O>Fz|9)Fh`nIC~$H*F-&K0_tWtWq^t>|3*{or(N
z*S8gI0em;NMErzN?X+)+C=;|LZ0;PbH?vRw5~ipQncbbv<u;@)Pv@p@EBYW4WU>8c
zix{28>D=ESvS}x4PVzG#Ebu-i9?cPZTT%aaSf3_yBrHrGj)_{IIR>?6pD*^Lcx0qF
zR>c!>H~1$ZFCGJK<^-468YbHlLVG5d>2+LgX=ctX)no<YN``9`V+MPsxKlp)(~*K)
z;T(o<!qg9sk}mQfokXfTdw1}b<1uOKU&VA4XP7SEGA1hwZY!?VU~oC7Zh68h^I_lw
zw;ZeSeSds!M<u)4_a?9UtvIiHF-W0AA55cIVQYb(pNZ$Pk2A#;$x1WeKHCvFuqV79
z_tlHb3yg)GZ=(-0Q{nv_-%6fO9}<zh&{$3#zbu!;Yvr3qkf9M)uG9B}tPi}+(m6P7
zCR@2~d+MuKot&j&ko4~n_$m^SZK=M8pJnb5cpV=+%ThgWtZLRh0)1ub=Ub{t!bWSU
zXh<y8DyFXTf?HAB3Q}@rEazS|Gcy1G=N^F>AB9Z*eKx0jkHE9GvU8kY?&7fL`DMK5
z<{p91O6AkNN8lgDfT*R)yhp&dR96CA3`IBhs`Yq}KxMM-3ZS2cc`C!zb<NYCiK>Ws
zdV$Hdnx}t|%hX!Vw`zlVvVIYsdSP<vO`<=wqq?_GFCqD-WuGoLGzsj}2#LU)ntj^Y
zD7gLbO0`e!;z*)ZmR4o=u>W5Cb?WpaS|tz}ymC?zl1tjp$6R(UA~3oqd_b%aaZI@y
z@<3;4qEX%fO!Oh_&{dSgX!e1MWc_eMWqd?Jtg#<dq=t4xo}Du@`O{08<jV8p<p>9C
zV3CQFrK4D4`ZQ(4kVW>-Ozy%)Xb>6OCr2)dIdaiiY&l}qbY)RgR)&&~HAt6#&fdI^
z$e*D)fLL}~0}PoWm0e~U%A6v(=P`%93ZN*)J{dKDJ_R5K4LLFw=Ca8xnQ`>+4(6s6
z$;Yo0&TNw&n4`ewCYlNd?SA5Te(kF=CzeB;*I~UN2dA=<#gzWe<WCPclk)MO40>YZ
zUz%IU;zig>q*xz>C5%=qk(J716Csf6uEqKLs+h;tj2B^VA1}SZq`EJ{J|QEn#Bk&~
z&&|n&l;I?S2)Q6IN4}j4O#OCf5qRYt9l5)xRR);&AAfRa&=2B~t;3!f8Qa>_tE2C*
zkxw?~$DdsOOn)k~oOoCA39$ll_-yN3ddnFz?gvdS{1qXZ-SK0(1Q0)xeExuZkh6Kr
z3d37Or>>$5`(?K!i_DN^$i)Kap0-zGXLMe6sMbX9w{fcpWH$5MN?8)WM<=zTVq0Q|
zg~rgZDU@7;<OsRL+m@%8)NJh)xvN*p)_4W-u{F*afr`+fq)0053%sp^!&_{KV&u{0
z#^palceelx-12@(x2RW{+yc^4Wm19Pj~~SM4vuVj;#hv|Gcas&-mzq!6j4@(@9N+b
zb8Jg5-US|4FgSb{Leg2p^^}##-xEIsJ@6kD+s4}ee8DodRoY|MVQlN5<B+J-f}(oo
z+bUZB(7&Q}#n%3EBX;s$g)owCzuc>33(dq^w$Yy7z{bo50Bn|SVltggFEJIZ{~|;<
z^f}=yZ2uN&*jWZ1MiMHLANEzgWotUDa48VLTvq>u)L?SnCFV==os<?RHvt9VF)yc9
zB!45*KS<Vc7q6D3H!>VXSOv^+HW3`4h#*LiQtJOi<T$)p!dfdQ6V7`7IhmR)v!|o1
zP4NE9<zlz`q18<9DwEG$PQ_^wePtPaAQz1f`hnq$s2H)Nx8p|9%y$qYE^NK_m&o4)
zFq*S0kDvzcJsDrGIGErE9^5BPOZQ$TElox3WeZ)bkhh$9Q%nx_ad)brXM6e6{u0t{
zYcpPPz6VLPZjk?q^Wy|ej2rY{GU#RM>@!yjWwLbk9HAmz!wRrd`r+gam<al5-fxb+
zR}O~qmY7I&;vMq(E%){89`iO2agR@;(5}>kf>F~#v3JXB*j(3|FaIEvd$=!v%W+LC
zbY08S<~6Wg<W39m2=1@qd7UrH)ujOE(IvjkD2VMN*|~@6Ji)x%eS&$dd4l=13S{%?
z<d1!GE(=^-L&RucpJ1LCJnXU@Ln}`om?xMgm>Y$hl2T{2Ji&aGJi+XP9ig_Fyzary
z_M2W6;?^b4e}b9&f4RbzTLb8J9(ShB49Oiv?(PErtg0@xR_L7FkNeI^dW;QXpOW|j
z$<HwQr9%{flq_WdhWjrrwLbD2d-<TXix-$%W$$h90(0v?q*!!@!BOTaJWhNJjnBL_
zyS10Gn5Xgr^M8o$c6DoZ^9f&I{v8v+9$r3Zep6mxew%bM<JRovoEMm@K%|RXvs-01
zaMv#|f0wyn4p05p1V6DvID79fM)}itP4G(>=PLgbL}ZNeAC(DMrt<$gQ_LLYFP0J7
zd1-0^c21PP$CswA!78J=QtpJW3BC`3mt6~2FqDd*Up>S$ken#LcPF=&vO0pPmD$x>
z{F>mMMu>X8aQ_Kp;N%`nu@~-tf+|9Zo?a7tm*4d1U%1~-jk2{Hdle#TTAADdDU);9
zG@T=7$ssi&VUsVmwu3WZ{%eB!13%mK%rjpTG&gK#y)>2jse})DcxmdF6p(e_6TUR{
zU>Z`^OH<dYgB83qwJ}}r)L)uv7-(fR>!qp70<h5&yeGInxdC56?2l}`V6-yt31+`E
z_42<9VcwLNrmh$L%6U()%{0*EOH;qYJ?i15scV9oJ-sybb`HL#1xWY#Cl4<a`8kuj
zqEGam;D?6_&N~ya2e2`t((eiW_*oO}x9<rSq420n&U=Dq;Dwm?1WTERh(4L<Q5WwC
zo=d(Ml85kRl2z<n_K`L-u~`+%Qpqa}(zA!;v9L`bUd~D$8U%JXy#D>CB5ve<fJE-k
zG^H=3G`^l2x&NMeqXf#{@2>dClHH&uXI54wHv<$*<4<-jOk^BT>@=2^1B&riq7%uI
z!;pHMj~H5V1(cEwMh<Yx-6gE3Opt?+6GG`@iuYo?ujQB`r~5WtsBOGLFXQ{oE>%Hh
z)eky<82AU1s)R>1gM~+W&XX-s1s3@sF7h*HGSZ}C{iFk&!jol+WCyLWKl9K4vBHr;
zwi^1U1E2K~<?QF4!7YWOT8dd2l_f_`{Jr+f$S3_BiGTI|#c6#9{bg`D_Yd}KF5@s|
zJp2Nkk^?2wl9iakyko4i<~?c7m`sozpJX2n%>bo-y?9Ka{6OCRisX+!C~`!kQQC<g
zIrCW2`h;j5*HD2+`GG;l@}6W9ogDZ)nEU`kpp+~>;IEe~8b#}uBr5w!)5o;sUM+=r
zd*t|>-=^Q*j5*TW0-6JYOCutn97^olD_qF^kO-T9&a%&kloQ#jExI3i1IMqw%Tmd0
zPrZPRO04b2Y1a10ORXuvVH#0kIV+j>g#NA!4NEbN=o|m>pr0`z)RVT0wJ)t}`~G#M
ze%Yq82I{h5WsDvN9jfYsP(~Ey3C>@#0Nqh`Wgh#HK9JMV4Uw1H`;H)vErRyp0Vdxn
z)28(QW+nfFH3rUq(6iRV1<83ANzsDqpYn@fE0{LHB=7p$p86%;W1=<r7dD6-O+`yO
z?w4f818kl{Qy*pPAjjVKxBh|HGx;$#)Zg$_@?)6SCq1vW+N-IL)-*LX)i&37^J`Y}
zYjU+$QM+P%Lw&SrQMB1BX{u?C)kRCZ@m2Np4bhUus;1_ek}0#MPb+CyxU6PT)LUFz
zU+pzlt*r5yYF0GxpCvU>zq(gjzp`O@O-1dZ<uy(I4?j!4m1=>o-*CF-*hPyPV)eA|
z4IAd7<9U}&nH63g^%hoDmn^Dkj(X$0MT#qk&u@+`T2#~A%%|!aue!Rrq`bVmg#X;k
z|GbOGHa6DPE~<*wHq<v?yl`QC_413ORZTQHf7sCZL+6j2KWyZ%%P+pEe)Z)S$C{fi
zuB~5G7ptzh_@?Oai)YZKCX#iv&C$}ObfvmxbxA`kTGFt%q^YWYNsTvSDp{jvUv=e`
z4UIKTRndl~>u-QIHFed~s#er^4NbL6YU``&Ce+r|R8&QmdW}sri@n8FE6Iq0Yi)C5
zUDeH|Xg%brmpWC|)lk2=rrB#;+7NAM_M$g8)_Bd)rka}QSk3c)O^+^xz;z9as_JT^
zH^Yb}^bsmR!ls+O#)jr-Ro!@@$(uogrB%&Kp}|M$0a)_UkCxPwtXWes(EJ>9(N*;|
zaA##zU983%=FOWI_0IIp;lK4<;xO+6UUg0LqNdtLVF7(^LVhH*qIN~iZ0TE+1h}qf
z^n_y<m6u;sUF|JwsJ@w;XdM)3iq<ZwtC`ghYg$y}HO3agkEJ!$W20WIsh0k(XsoKQ
zg<e&G_(*%+imJwon`?wQCDDe4lDdZaCCZsfgC=4Pf0TkE4wgmDE2`?!46CnMC4i%~
zD{G_DMzcY}3aT%K3b@&8Fnw%BQj8GUVl}HXf7jKns1+TmLk$7h6b;0gs?Bp6nwAUi
z>uaXPRxGS(YDQpI2g$~&B{faKkD3)#wRO!<fq$AC7S&eOO{<BnqB<zo*VnG3ZWWTS
zu(m0>w7TkM4=t!!g6PqYhNdMD?G{xFuckVt8sgQiX!e?F>z71n-dkB)UDGgrX;su)
z+JIyVWN$^oLWJ38qqnfGVF`lQ93#7tek^XNt8MU5h2{pt-sjEDbYM}<!iI+BUUXG$
zRQg<3Tfe-fy0+e1g8q2XSp5=UE&=0uqYR6yR@Bz1UO)#hUR=AV0@bNq4JQ8YS+T|P
zdqr(^bzP0AWoU+|Otf%<FB8)6s%tQ2(G}P{Z`{Ha6`(M-c7->#u67j)Eq~s`h6b>i
zT~)W-n}tG(bb6B)-Q-QFS_n71^5&_Fn!Q=eMRKpLTH4T1F4~GQXmWn?Yf2SjNgEYt
zxaqsYI<bl<ZFPwwq!<KaK%g)xi(oCTZCWud7KIa2s}|POLBu-jb+ic`n;P?`R(o~)
zKjv}qmgjw8&R<ja^7n22_VD-b{QZW%Kk}F2@0_`RO?}~}+`rfTZ}MOH>))tl+UxbV
ze7mbb)8Fv(?)QHOb>#ck9?Sjv=;QiL{wsg~{)qm5@!R@azCH0BO>ccv^TLz~%FBP{
z`>-G6{(a8>CjXVcfBU}v_d@@_^6eHsEqMatfRh*0@$&M$S<#V<EA!F%hDAclS<zva
z)WOi`()l$_O$|-{w_%8S?IQmZWiDG-)y!`UGwQN1ws`U)J`P*7w5n--w5h5#+B|tt
zcvcnv2!k@p*Ho?Oro7=LWk<NM#q?LL=mGq!YHwD9v_U@vrP>DC&P68d&8pSD0KR&@
z8AoSDFIyzz3up?CL(Px*fT{7kX|tl2o57{#GST0t_T!5B*oyg$v8ZWbBx8&qM|b82
z^4n$8T6Y9>8)Nm0sLTi2yM)1Xe#7GVI+%joU-I8p@$vFKO;zJAomh0s(Qkd}&aaJF
z$#~Jwlwrps^~>uUR@Hm;4JFRlQnHw#ui7g)^PIEJF7)PkVc{M=3>ZdhrY~IPm0Zcc
zKr5-L<6HI3B{i!tKh33N_z->frbK8`;!R&(;!QTrOnFUoX#=3IoYoK&F^$n=Q%P;L
zK$t8(6-KYbtx;kmsMITCq;G(z>4q4#R#eqjmw2AJqm#bp-7?e5TT_tt?!r*0ok;>&
zUVr|Q?>L@1@<9^k7ECy|a7xkH(a>t|>UWL$$Rz_lFow_aw~m1OB>wA-J-47Of805}
z%We<d(Q9IB?^&gVWu?WFO1+7tp|Pa}<4Oz1nxAD)jom$V&sduJ-f*hPX_EE8nC!wB
ze@CzJw};AFdtYm6RhD{_(zQHK4op1C-#<`qL`J>adzH0@Zp>&(8lnuR?YtxWmEwvH
zbnA?5?KRDyH(t^E9u=O_@+HvX!jmj7cyK(%doSfPa4NgK*Vxw3w9>+HJ~jM=p@SkP
z<#~C|d)H~y9ZlW6)O|a3$B=gTAnnc$xG?1`p`f%EKHF*9lllcL(@FiF@b0d@$cg+f
z@0N<GMvBh({FgXy_3l8HL^cNS_W@?}OZac-KVMAaIH9z#wYSL2%+liPkyV4E%Es8U
z#~U_IEA=LuM0u%^$p^so9-<-d1(xmWbxOwyK0QnRR`Qp*`IEJkMMe_G8j=848$d!Q
z1>bWdROMhGL5PQdY34Xq&PzkBy~=YWXDaQ^rTh-c-_r#Sl|irar<8`qmlh}z5TYzd
zgV2Puv{wV88vY&!o&@njPrZ=tx8JV{BV51$Uf95&TIx*?8k%YnVW+?PrJ~fEk#46B
z*!yVbD&*h`($2@6b|#b-C<VbjTv`n6!lj`}r3I4=XaK2nDCfdwPswZ%#8mdLNjK*$
zrH#?>s*d({N_&Hy_Qq>#D9s$x+C&4;!kKOOW!XmpOEcSaa6)NuWxAEI7xXFxw%C~M
zw6&AA&Zm!|pZy|D!wK-w$Y5pApKIt(Y3Q2L0we{A;OFF06u97;ptskHoR$T0s?@Z|
z&B*Nhlu|De^nW9G3`I7sWD)&8rO&rIc=)`WRT>%>a1rIT5;8I1pCLZqi;X1t@<S`#
zC=WE$J^+k_6$5%@^eIGG`E%gI%9Kx&iRbh-cEa=4@aX{ft|$K?!S`$jU!O<t0(@bC
zn$H_DSu-I+qsKaWhD}!qMcn!B!qD$vDzd*I<aytr{ohFY-}rf&Z+`oWO}79tzqD{-
zX>nO;-?GwvV@vywEiIvo&`1X%EoOU9`AAw!3XzGuwDU57t_I{Jv^=++X{DjLr3Ga^
z5e4de8QLTfG3}`BP+6p9q=GE?qMg?7G&|P_0|k&Kw1Nb}rQ;(MM2a*`U6m-zo(dRs
z^KURf-9GYld}#>Vp_rMUewWJwRsf6dN(!_D3!z^W`&@PL#D?`R@Vp5uFmESq?W`}O
zprO6ZN4mfo*`${sfx_^UJ~@Lt)nyE*1K!=ho8JYzIRQMnOnr!^J_AJ4b{u;+oBB~?
z_M5=^4C&CHpG)JHwj0w+i|e}82?i8P0UChB*lhmx0rwBUjSJj|a^YTQL=0L&Ib^M(
zG=yO!jnUzwYXi;bMOO@HqelbJ@VuX5!`~tHXNd#br)fTRL#^ZjqYd~=)JIy72c^Sg
zSC_=Fooy8*Ae5+)Rs<h4&a>#;qx5Gx?bl=f?v(b6oc1lv3e?#`Jf@Tuk1g#xuC(8{
z(*EO1ORzZk#uWM99F3G4>~!4J2Gu@+GA&OvBb!=JeohYrd|at_T_BWNQq^KkV7ejK
zw9?|qY0VsO4ETC*UW)v@K-m2sut%XKKg;3yjM9QC!wF;veyAc@b)`r8MY(0uaDSd5
zvH5~^q^>V~d_hR~0;l;G-07%IGsKNA^{zF&$t_7M<VH*`I8e*BXmO(qt>g8mrGQQ|
zO^a9)r3zKFF!ZJ{$m9ai4q{8;9j#dHW=IBz{Q?}AsPHMH@=pRA1X!{(VXMOjs#9wo
z3`ujN7&#hV=y{JI$Cyj=zyAC?iErE3^<{jrss21*y82|2zm)uY$nPyR0{_V$V<f+w
z{5oJFqJDmv9fJn)X*>B#sV{n(t}lLjA$ktw%G7BWSkF>cwjRA*$_BXjZH?g5pUIyB
ztQC@PaG|ZK>H*vo2&Y<|>(V{fImb{o6Rn}{)wZsg@A&>bs6a_0yxMg$PpPI(dp7QN
zPC!Gj%Js*G0{brNe4IL?yKAS5I{T=z;S}0gAh6G6Y^Tl#(JxC^giNV{Pmb}xc|nXY
z>5WES>7fyQp?dz9oKG`dk{Q3hnl{R~kKuA@FW~((;`7%8(?D+lSsN)glXC0ba=vX;
z!$i~gYB)q{STHzvX;XulB|q^=-HE1SMu1tz-x1nqq7Ct7EG~W<43BD(aA@pEmSy17
zPqBksy=hN>LXL?UeHT71DDu3AX>WkrUYS2{K*4BmvXNZhPi?1M1$<n~{`RqAr$6{_
zX*_*9%`kDJ2%2x|(NPed84v}Hz|>)`CYKg3GlmVLrP2)YI$H4)gQ5L3L#;3vjnAZ4
z8Mu_7@cqGG^v2RlWfv2#V~qkI7kF^`(-CNaGXT0DrcYByhgLk34Qo!Ib~-4lBP%L2
z_G~N_J;ZG@<8vKw{s5dBfiuj3lODs2<<)UYhtu@<35&WJqUQpy@I19KKO}AYnk|1g
z0CaFhsfTYx_l-RkrEds&KrX7{xGP5PmIC|d=$ZJi3LBd<*_l(R5oR>8(hagYkpTL1
z)0j#<Kj#OHQH#bVxo*MP-WHnJjNA=@PQ68j-uaVsf6{bPPtptoGPr=Z4lc9;SoB^w
zsz2?xLzdAqnFKPxS*|PoGXs498UqJX$oFjbQt%s&Tzwk+*wyZZHto;BkDkvKyDsFg
zL%1231yLQ_08IfjRk5crvh)j8@TBt9BjGDTt|KbMQ>1KSURq~;9TfbY1;0}E>lys|
z|L?;uiah-wz;FAH|5wqk5&F#~u=t}{$5US=ZFR}Yo&*lmD&de|uwfU>M3O5V`G<LG
zZIyGV!}WpK8$M^uFm^I$Yv&NfE6}7AA3n6}M>*~0FEv`Ep$WjPF+bI%Lu}NTVF<~x
z##MhZ=#Z=GXEgyNP*-aL@ti=Hj^!3p|57`Q-9=~UGeQe+qa^Z^&QqO)RtE<rb+#Bk
zb!ek?+)yp4Vt<lZ*ibtYwH5LCOb4YQ{CRqWa_E<dr3FeTRV$**S_{?F*5Mg2X9hnl
zOr6W>PwHYLY(*H^C2&hptI-O))**tjJQqoTo8du_$8WZj;bV)@b-t^)=rW;hF72x0
z3wk|#v9SX!13>F8+v=LISr#CP#<Zm|lbT7W#yZX=M%k8;F(<ZqBIH68RVwHa>S5FH
z-I-!zuDpG~>c!6Rkmwx$>(Ac-zSZ?jrA(YZ@VzS1ez{z<x`6zyd}XO$LVhLr-TC!n
z$e-Oq{sQu6l3xNW>x+lAeevtp`T4RAVC}>N^*)!R>1Fz|gR<B40BfJ0e=@L+Qg$J*
z3fy+f(sb$fPUZ+b<c}c#67sv7&&(yiUk~}K$v=KU_x0~0{~-BY&4+|950k%-e2!bD
z={6&c|8wL&N&eYxzSF;><ljery8mH2-xB!!-o@HV5A{co|8erWk_+MMT=LhEpRuN6
zeEzz#0;hj0$Vpr4DSJ0%yXvdJ+D88E<X=SE$_N(X_Fkw2KEbu(K<`#q`zhN_*>t~T
zewL=o5%L?!?~ZT9??&D;>SxkrDEU`)lP|bdkbfchxT|Sg&H7U2JXOlBq3pnuEW4eu
zA32G#GS7IHvO_2<w6*jyw7(`Gy_uK2PPvj3loLD$0I2Utv^|uv6_kB@cG({0x&nVa
zb&9ETA!&;*{B4yrAu)40wfCg#PRgEjl4W0@Y$zL-E_flfv*10R*N3vW&E|j7R)4<b
z^X&@x64*|yKi5S}>QAEVxlVnd#XP<Vt{Jk>11$v3Ch7>zE*{(X=A9%S`zc%K)E7Js
z@~z+$@Q^zFP;BY@so*}9I<KFf#$EcefN!ty&FD72g|1P){f=+rNoUcuI-9OreLMns
z2+Rlg_E!g{;JcS^NBDNK_>Q2?>(qIUc<4t-TRg@)YqdB`8ln%zTD2omcLaAN-A8+K
z-MY$KRw0<x<GtFT{d5_~w65S9rS1<-0oT#gsfLHk!1XH9p~TY}_>ON4X*k~cCnU@S
zRNIvCFiD$Bsh?qwPhyR|q{Q=Xp`P^FrBQcl?1JlT>a3;COt((3C!i{bacgWkpscQ>
zu^vdB&D7sSeVOCiHiP<0jGKxV-F^LMssGSvwqHS$`;m*i)W3~%=+dWhaUgKQ>=Nn7
zBD+pEVLr~h6El@QEqy;vEWH7os^MP&YhVVaZ$0^jaT)_ouY=R&z??)nht4OlcSHI$
z<^#HxdAht>NBsrhaJuz(QUCVStS@7w_d(X_sb3=Lz{ZCqHW{&FrP!>2lq)Mrr6O**
z8B%UlhCd^^Hk-1mfjP^T#fLERJEgU^-I+4m@opK1DZ7z+o2gfA>uGE`|9Z6^g6~es
zoChApUk~s#V|&=*D>D2X<vhxD=JDU4T(Hjc&qjxcVd)y121Jlq3>I=tWF-IJG9ya5
z&u0h-+*O=PeHxJ2Fk`{YL}yuMT3<Z5)VtB?rN~($FkS}6r+R{c27!c5e27m05-%?!
z6tDY#fHnBMRO&-6EE8L0rM`>Us@Sk2)ag&1@{Bsh<|FaC`eqmF9UCfkK8dWAQg;pM
z&^6!9p#ckI05DMuACg60jg@Pkow=LnQ9GTO2JG1`Uj96Au_1vI^KvJClsDra^%qkA
zl*T{m%%e`b+oq0T3j<m(HNREI<jgT_1kT#_Q)q7<Z489=_fY3Iq(l85Pt(uuXOn4k
zk@VJI?P7Fb0KUc`pc8$*5Cg#PX9|A3BU?hlec*H<<7&oOW&JJXZFhT^hETuo!|dIn
z{vgs;zTLfHuy%sui;kvzKgtizDPK6%^<(;zztk^V?3VTCC1reTC%*t#3*CH(uQTBa
z1CB6~36OL%^qINTe&9Sn46L^c$M-#iMn}lcr=78GzNHa#g}_dv$++JE=SO2p4kI(y
z0e^5lJd8b>rjw0X6resvV|_M~2BsSoLXzE|ELaf3)i4ubI0C*JFbcl-_-GVRLq(dU
zX)Ua2CJi)qT@dVD7{r4Jy+OI|%7XwB*E38U4qZF7abugXv1OakEHEL6?kuSY{TmT3
zp3gij`d3qbC-wVqj4ne?u4xV3-b<I&HF`*2Y?QEvFU007ksVw20PQ@BoOra;0nbCf
z_)ZsmE?jE*H$9VM1gzK-0S}d3fHxs5Au!BQ@m=nW6^3ShPz!?b6E0D#%J5LX0E&dA
zw@qY6?l*($Mh5Gjg7;5EKCgH12CVAREv&dn6Mmr85WwGFp#q`=)3i42em5pb5Jv8_
zJG#k+TIOf=dc=)^K56$YC<@~)x^*>6Mc6HdIG;>0WX*;L0p1-nH-5`Fds8Nzsc6ZY
zCC*)D<(A223SzW|zX2cdymQV?rT#=Z^x<!(<!PMAE*i*GANOODVGh()CO~X9HqtT)
zI%J#^*_CHHCu@Ru;)n*hFv{fOHAs0zhx97E_-{!J{5smt7$3Wc1xVSx1e!ih*%R4y
z(dRLK+0z+wr2abU-$GlbQ@=m;cTvBI`Xfo(F)OC?K7oIL{EepxUvMgcVCzp%A5GA~
z)migpsP|agFf_lKw8iZP@tNmYUsZ5iPr18jV~kr)$0S@T<$ibLwzTuKU!Sg~+bNfJ
z=4P~Wm~wZYpfBCEBX|zEm=HE&Uya+&Da=djs9*U8+TTI_X>XwZVd_sf&HCb_48hU7
ziux<v{-cVnk5Xe4vfJsoCvc*`se6NPL{A?D&OZX@M0z@gvPr*e6=^Gr{(MLs7K{j9
z3CmuHGh-G%%N_r+nrcIavFEVtcxtH&BjCSXrokQ=w_i*cYN2+Rf05&HrG3Yj_8V_@
z)Tzx<<K>)eSPkq7_*6l^IFU~*kkL4pzvb>zMnCY`@)^iaaYHiB4A!5;Di--vd5JO6
z_CDIqXWsZPq(gh|Pq%IN$jFMPdJS+{$H!}N(=#TF8u?;y(0QPp_wa@PZRKw`{P+>~
zlE}L(A>P}zeYAdL;k<x&>fteP>25kUw(Bb28%!{>Q1a6oXu*&%H_dRdef=+GjsqWN
zk+%5xbeLg$814QdsF<!v-zYwpy1S@5-mQyG)3skBcE;(H$>Ozvd+iDDry^tf0^Z;8
z&2+o}4ZPn=+iL^fk8;|66L~*?K1LzXUfK~FTe@cL2a~)llzWbHv)yu*4s68^oCKy@
z-kdZCN+|yvb&pV2;-$8Y8MpUZ>IY(r`TRO%&cYWjk}~{Hz7=2QdA<2|hWSD)hyNb9
z#Pf~<Ydz`EbTlK-$F!_g2ePW}8@^cPUVOV`j>O>+YFle)Yd}`}oA~xVr+w7K+s3!^
z`DT<SXj{iel_FHb8G5~S)Y**u6;em`^@Z-;*%i)sTvRtpXyTp+#PrW9V6pJx)tuvj
zvOhbR9HzAf!$A;9cP$4VmmkQ5wBEeSiLHS{h7Opyiamv+3g{renR*peewcdi5g-2i
zE^%LL{M2AC7Pi&jBt)FZ?wMl$gl^7I4+5K1V`eO@-9WJX=3rJ)XH?nl3PGo-kkuU%
zV;RCi&{fQx#TT$LVEMq_&n!O37`1>p6R4BHyDt1r;qykyPRcH8;X|q};P0Z&xa>OJ
zz&}jcvh1=wz!#iKP(<l-2L3(N>5IG-!}oJJ>s2TGTXkQWR=&Q#p+(LhNyo6j8sb1t
z7=d-P<Re=c`IiEWbBL&>89B3xQDA=elO&@f1saMYz5pDQ)D?TuYl5K+zN-M(4ITQ$
z;2^VQl?^rgT81yViG^u%WOkK_KGfl)FXX)9RMJ*{+%*^=iRYBAs<FLo)LVH9=Nv^o
zpQFwL=un1@wS3bNzb9X}-<7Jn8NRMR4(O@}Ll;p^22S{4#;{-s$DFgAOZ{hPKWk05
z%ky#-;9CZwdnx~M(xETzNYlq}Q-ibk4~vXESdXHcB^PfKaP9);tH2y8HgJgp(~co;
z*?F(7+$-Z>4S_G8CI<Q~>1QtorxT2^Gfu(3ngs0UMtR<^Y3GZit*qttn;nuq3vHqT
z@$(P1QFS(d2f+DCY`{N|4t?z2G(0nRuQg^?RTKWGo)JXQp~*4|DKYU{otk=M;K>MN
z<fmNrI!5fo)ehYBxVpfIm-W=twj+6L`$msd3)RDB_(FYDLG=qg;tNBu`6*(`j%C$;
zm0Df>z!>OH)q9F5SQ2i#fa<PYHDLVfwu`Mk)pkK%$5_Q&Mce&?DRTDGdSl?nE*7tc
z!)MVO%V#S~Vme_3`yMqS$4|QD!Vp^#!b$oBSNOr^Gz_&BI>K@ih<OVqfjCiT!zyJL
zoWY<V{#+ULF9C;)b@WLx|6XC|-(rXAC^w06H@fXunT(`e5bVC^Z2sDTtW<;O0C2po
z7x<QcHH|0sbDT^-5sg)*cL0RRh=VopkW*R27(+}#W6xa{Fctj~NUJat#JEp)U_w9(
z0qIuHu1jcyU}32aY@F%L!b&|w3TUx%e_yqDRD4v%p+h<qRe7f)bc!vPiU3{aCpwpl
zg9Q#)x~!8^qTrNAtWK#s{nhc31XkFDbA8Q#GKvxtKqu}eGBI}yXEyPfPb3rTD7T+-
zrz#VDk%QI9)8qIV^ZFnY|MV3{CNv_^rJsSDMn`msLy=dlwG^{5V8sS$RH0G}q2<-y
z0Lq#Tr7E?QW&BiEhM&q%x1rp$0<1QUj&5@W_}_tGca<jALANwfdyl5%5>vV9a;nM@
zmhaXqsLpBt98ef+Wu-cEaLp!iokE*M0xyW_?ibii^&V>V&{kHKg`A5aU$VVS##D6g
z+3}n;DNLm{kj@?xZY~XlgAf-Z!vfdW>`(FHGS+F&$<o`Kb<mdlq2x~>KVz)$<IR#^
zLH>O5yE{uhWE}fy$=^xY(4V%Y@$<+0th40yTo7DF9p3m^@*T8)3+?|#+W%~B`-_d~
zrKvY?mV6$t`@)0&qMcT0XI5@I>`>4n&l)Stl2>|*)kYi<R%f*K&!-#)=EGsuo{1BM
z^7#?O1pIM7UxzEqJ&p}CVms+UV(6KkSjA46=%k;kKgnhP1Qsw@F!giwC%LePTrF$|
z5|CF=3!S=zWLOAPP~@T>YC~;d#Y!RLSzQyXBZ4G9n;pR%Ko_@9ApXiYkujf8?}Q$X
zl~s9f4CVGy?jw|okhXMDUxuAGN)JX)J<Y*tlg2GYz728Do+>cP*oOv;wWLG$-jjyo
z(|4hf5t_A!)@NpT=kSe&P=Ed>@Jis-GT>DSyyXr&U*?wwGDk&~^UUCp3s2%Bjlf$2
zyeTrT8Jr6b*+P01k}-RnArCRtQP&)2ZmbDH<II^*wD1X=fH{O7ESYO_xE1Qb!x#;t
zkc$KmMu9^)LMeC^K>JeWTL!Nm|8tsd)}KE$y!0N7H-?wkq=QU|4uDsNFXGs=&}8=F
z_mDq;eAzS9oy{vF|MG1A*MVP6{_Gy=uP490hx*&d-`GukMAch2(eu7czQ|hWk*!_P
z-Na9Xecee`HFfs_=WD=uP~hC^!13i?@0c-LndGz(Vt|tOe8&uB7|^orm>CK`j?&H-
zq@63AcHV+JW=7M-K@OeDz939;nl=-IeZHJyMAoxzo3IhdhpBP^d_O|{sOZ~Q{wWQ^
zm+Pp}cZ`<q@`B2`>_NiL6fg+ZULw)>{O*F0o27coQa(DV6Hx2M00d9lTnHgH68{$Z
zS~r6)nQ@r);JyXf`8BwoBe=iM!QIZg-kKN)rdfkb;2`mx0q~%nyH)0r4(++yp`ky2
z!`M*4EXDb;T)5Jmv=UbZ&T3%FxdbCetqx2(|4pw|spV4I>UtmGb62OPI>V0FP8%=K
z#<}2a&e2YE+ORgQ@CIWSZA8M1F<4(QsIUiLkU5x+@{F5cz<m#Jlw#ndPOXX#V?AHA
z3`}(vqrgM<UM;<bePZD9wqDTiMS2~K`#vtn0}*au=)g-OuCI$ns)Cd?xzL}WnH6k3
zVKGFMxH~X)g2OCndf*+<Z*7a-fP?jEmjq4?NUBM)(rf)^EexG<v-AsDc&?}ht!OQq
zuueOTX3k0XLBs7B$Q!xa<#Ex4KW^!Qe*SugPS?Ou-A~gM=qlcf+g%$@vSd~_j_OSM
zEdi9}jH;js%w>jPcI{NV0tB+4mX=W=&@c4K8Ey486k;j#=h5k`M>B3ENN39eJ^%<P
zG@LfVKZqlk08`gR>`z@(Ro6ptwpq?0c9~ZUL6Lt%dqdpz@U61fG)0HRqY7}9x=X41
z_-WSNM&0{Pqprl<4^a1R>aw)y(};8TlUj*Qp(MHq3{51c<zM9`m(7f!Xulb{*O?`g
zG;P(7%)Iv?BeG_P4R4*mfIk~)`ylDi<Nuh3<LhfazP4qIOL~R_)|a!65-V58LcBm3
zUBGz2V7DSt<y^n920O6@90qb{&R1B_49&~Mfp(e#*+8W@L90$YP%&FH#a$B9OZ!eP
z?Kh#c|Af*K9pZ2TZRiUR9uc($j<kzWme!ybs$3IuU~<CPnw;r@uJw!q@{ASNxQjJo
z(}U=+Dv_&<T4u6|X6AOsZn6U`qyP@xq&xhp)|~G^yEf<`(8$%5DQzp4Pz-~XP>@A0
z=HTB*4i4lp3}|1h`djybrY%)z6sl@$3A@3~Nw&NV6H*>c&#fMmJgMrg_km@zRt`xd
zZ7CnXOb6B6*1O~jVygn9LJd`6^mudMl*<>Lu+R~t4w0ut+M@d?ft{r27i%hYi0Gj(
zL{?j;h8I-r$YT=>9a->c8YF3&1X&D~ny?MgBfdC>8l6AN-vTD0b;JRl%jZWhUi<z@
zRbY{C4ifC))tRYMaIv|sMNt87ZvD`C8o4x9?ffM7Mq^Ci6VzdS9bej31gzQ_+)g&%
zl0|0#LM^miv*-zuN^HP3LGHW&Cb|4vYSdDBrs7Bw0w?V?`5_9k=d&M+N3)69Un1k}
zova=O{SRXHI!I|>8I{m7@WKm35?F7rH~8f%{@NCthAiMrPr-_xdW{W?ccNjQ+!uBi
z?e`%*yjA?Afo}Uje7FGpgmXsEeSb~+rBd})q>ZGC`l;H`VK#3u`{0XJl^(vR!>F|w
zKJ3N^WoZ5nb0pVl##@wtd<vO_BmTkIpM(!3m7J^Kt&(qr;KOku1y&9$A2eP;Czw$p
zbVz~@D{6an&>>gtCjz6KvBcoJ30C-f_cWJ(QCQ1EYGJF9F23l%@8-H`N-8uBfY2_v
z+Pa07Ro>i;<zHz+Ni$x^eWBLAsgSFuWI2CAuq_4@<*~QRg))K(^9NN0>nUr3EVX`a
zqDu!EdQzs#EbXkdgch>>ViS(G`AWYTJu75__dE9W{ki~Nf9Eq@@S3}s{e@fF%3`;Y
zSJ|y;{smPtQA?9IOAM^ubSVZ|s+`N*HweuHA>T~g^g?0qRFTtv|C<FbUx#O-eu9Sz
zG?<;d?0(GDLXEX2Ob>Mp)bu1<ohUO`j?;?f=Q7N89yQ2k!KOPsU;slitoQ>IX$_1=
zw^>%kZNkd9O=M+Z>ugqT!fK&r^-x$bguZSWTirHl6K-2@h@R$Jb;k(%dMPo`<PFRh
z&**wxhGEhxxRDql`AbP>+h;Y-Y+fdAjC(fD%mQ$MXj|7&v2q&haSl5HW*~nHfcp?|
zGv<up)?W7DhJU$(%n>*GWy?rg9BiD9@H0-2bqUi`Ew7Q{>*q1Qq#g0OLZ95^*Oxoi
zbc``t3IK6$kP+w&_DhX{#*1Lhy~#KgM${$Cl^VFjmsx2ihc@ow?<j4KD@dhYkv6Xg
z+T_fxjScy0JSx8$9I&v}hlh0Ff-kC+v_6hb1gJtTNZ}EH5otXag&qJ0Md3>>zbApu
zbMwIw+=MokmQ$4$41?5Ts+V=pPyKxWJM;c(svi*90TwIlUa0w#X?WRjVTM)J_Y=m2
zAt^$g6&Ica|6iva6VDs$wDT6kg@@9Y*B21iJu~ZG8DvxKlx0P5{fJr18CpdwlRC?&
zZ|UmOp}TVg3dxz6`+6ySS_izVfCszM@X~yOP6&@Gm#)28v>YZ;bv=LW0GSCabHDl7
zpGd=di(|d0C0$n}H-bm;0^+9N@t>qa_jjc6@ad%MI;v{OBEGzKN~d*n*{Fkf_r^;2
zxwMiK4%V{jrZGP;b8*zg_mB8u*251jBz}5UDkVCb&9kia@OoFt3-DcEpf9iE&pb;y
zw8-g8TE{httOKTsza6iXeT-?U`$SBc-f74Amm!e=Bi+{#55?07JJdiwje?7VZ--nQ
z71xrmv(1*&i9fAVvAfnW9eS8fV@Q;=32RI=0on{g8OB`VjY(v6BYZXb`B^v}`0;On
ze#$sB7ruRm_I8pEO?29`w10En23Q090yerP;j`Fs+b?srXKZV41guhoF?|lxGFF*G
z<lQpaB|kP!d9IUH<l3sQb1{O9&+W9omcC|;efeX|#tX^cPX0aQv&5RlFMpiLe~wS<
z7qNav{xaeWp-YJf2fXoVb!#y70Z;Yn6i=O?aIqphG+#u0NTAJN%RS_j*D(swU>R9|
z(tX^u{CXq3Wa~s+FaM-6KM}2(?sI_^HIo`EZzPm7H17)D!}M+2V$RK-ol5;1I+)$B
zTa156z<_!yjrc=z-JoplFZZEp8q|<_oG7ON+Zz2c8h;|{z<uXo`Pbup4)I>89G2~m
zQjYr2MQ0p*pA>{CsKAB*=Y~H}6&dai-|E?m^H<WLe~sthpRb4d&Cn~F4tz+Vn=oh&
z4-Z4ZM}&`cKM0E%)MA+$x*ytz4848a@zh$0cYNGw%ic4q)B+-au#Ot>RI33VD#A2o
z1i`mEnpXQ|DyEgdmegG4rMil$0O^K0F~Lu<eHIQKGhVHjKfpp|jTBpBhkr={{is5U
z78<nupa*G4Fx`lxK~f-SJVeQ)%QMtvg_q9St7#31)B0*g59usUm3CH}Gi>nrp`H;3
zcT@s20nR#50T8aJ_}YZcBEi^T8ud8`WSRp>O_0TwPLOou-h@v?_UA2Ok1uwqOva!0
zwx{I>RMnf~JUeMc9+<}U^3{}|+9Plytzoq?vyE5fRfi4jufZX$-zc!MPjk&+BNzUv
z@PIiwVBJti0WaJYOYs}~p#Y7HyT)()<Q-|;-(<gW9qsI-9WyRXblQ0f#-$4SHGH|}
z{gU=plD78f1U{e&vdV}M&-F7l!P~N0Yz2JI6W#sd?P<7X4C3A(e^ZxoQk@Ouj4CC&
zbWmS%RnY8OhWVM{MZl~7&N~Toc@b2>M1@gpfTs1ku>=xShcbLu&Co?`?Jot~Wl9xf
zdyZD;YN~m(Vm0rSz98VvOv-x!o;-(>zk&0<y@e;WZE2nmzrIG4j|+r#JOpD<#Laep
zTIDkR5rac-Nt+(}tYT8l8ymJK7y-l7j99eRG8*T@?}3zbqi2dM^_AjAIAnLXQrsFP
zCd+)mX1aS++zui`SwAg1wS%^^plzq@Rz|6=W`q&cIS}nnA(Z7*#Oi`!u9K>Kr6FvN
zwNbWRJH%Lft^*LY90pgz(}!_tcX9{$@6Ld~|Js`7FK)Qn)_m4rK}YeWHRZ7Bt1rwt
zUO^0Xs=%7pOIXX$<vCrxWTuUuf08k0H<+mdqmtJBZig&JQOyMnHx0tJjFQ1J(}mL=
zd^3;A82`1KSukml{_1SmMIfgM#5v@~4mILxr!#n2mRH&kE8{+Ab71)$?k@DN3kJwQ
z7DQ0bB>^39NuX`>h40!`;J9SXg1OQR`bq_)L=%Lmbd=PeY>y+MA$t<4cd9-rSV)!D
z)z}_L>UUdG3sA)^04O&Ws5s|-v30W&wmSUN=Cm%YWZ{DXx?j*`>QYPjO_ufX_+FJB
z)q-`v(F~E*O~gz>r?>x3{D=hvu?AA#_z}}@bM#cTRQDyK2-cT8z4+5!+F43F#*a9|
zY3D8SBi1x?$1?4`S$@Pk#;lDudERc`zIjaMfs59qY30uY+3#`viENq<%4%42Y=z;j
zC$3p)XmuM6UsS2Fbvo|3%5*{{L&~h;B1bNKRUJE0X+q;9G=WBHL{z`)W>mXCmL>I+
zQ8CX-xI(RPfK0*}E{r%2fxd@Dmbs(xI-zgXtvU2%#H@1YtM|a^)m%CZY2TE@kX0Qu
zbddJkZlnG>T-xCbx||Fh6$k*Wu~G<&jq8qrtA){iLUc_i0;fSZt==`g#INli<<6RG
zc=JqrsP${p^a}i1PV(#0KZpa2F6y93TDzixgr_hea}UxIW4h?2S|fT!LL=Hx8fvMN
zOm!<!P@VGXK4^KJu<Cbhjx@0ko3>QcGPVi*370TFiUYJHf%B<O6FAU>;-G_=3sbd;
zFWP0xTi*4{>ZTj;2adL-^wy437Z(Wz;sMdMtSnT(5o5jMWoL~0Aw1unUfq)BNyfYk
z<ldk??T2A|mUfIieT^tv5R-a~?CHMM++CCR=GoJ2$m|RB;mgQxaRKr>%jtt3qsK$c
zxVpglE6iq8U30g|YGA_Ed8A1dNk>zaS=h@@cV7qsr9z}CotsuT)h3jqnEV}xOB3}P
zElsQwd6I<Xw7kq_R0kPrG@&LOX7E#4LX+0!xZkZUCs?VRc1x1BcxW0#i7aa?YF_wa
z=VWHVMP`KBgcb$@2{V}bjvIny9Yb|0-7jxlmJYsMw$<e*jJ8lXtCm|`cjYNHoYUc+
z_cUYi`diqiUvWJ3KAFosadX<%SieW!hJ-pAR<LTSUJD+(emDH<f{W?~p~~*Ojvb;*
z2v0b#gXqfatVZqp#~q?bgQTm$&_$7a>&ol!(*t}%y7d0Ex2QaQhr8?p#x&9da;*N`
zs^E)?FIiS<ZQ@PIa-~fL(YEDg*+#SEn8I!?*R9m<Si7zXXJ9t|rOb7vG8{i}%zx**
z7Xw-_W@e1dh$CXBF2?E2bsnIdKhusGn;%(~Zs#o;o0l>b`N01>{-(`!hM@DSaVM|j
zjj`z=bp9PqAE3M+zv1d=wT^g3M77j-sAG+Zg)2tkCES*4dXYjcPZ@3v(9v8&Bbv5#
zwHS*wSO;t40cbYP2yhB$VVg_S0Kx9)>ahmGCYjK@+8V5#4ItX;E~wnJbt);ZE}=n;
zuK75yRa~PrZe5F#jwHrJiUtykL<21m2*w#`{u(viajB<S>aGA>d*_aFxr3Fispw#Z
z>&jv{1VPRCqUxc#1U^>HPUed{N;qq*Pa`ASk-_VDgR$i-<fR-ZIM6LSMr53YV96JZ
zF!F4)hBhDtE{5|G&q7a>27IwcpS0`BYGtFQ)$+q+&QVM>=P2Nh>j7{cfGpM??GXzE
zjhUL3u}wo)h+)qv@>5yFG?N1rgi;l_Z8{eM62~S~7kPVBNs-Kj<6>fmFuJUp!|Ae;
z#lo><F>)80Wk?5yiP}%h#1M_NGUE18T^##`wrt>4B`fO;2J0D?P!v#_Yjr(m;*!Pf
zj%`9wJyo*M7Iwup4IN;IPC+eX2oCZX2GzOT_wusJ>sSw{2|46q$vvwrRZ9A6osgdK
z0X+?!xO~L(VP)1L><TmLsKm59og;lruP5oIK$pDOURKH#PrB?vAdRx1R(7S`O1tTT
z#(;d0hPF0pYM1D<MqbM3xDUB(R_>Qm%3=Z!Re^j;jpjCyi-zkPKnElr<7zR7I2MRa
z<nFOPKuo2PrKsZTkEgyQ<KF!Q{BrDAPrj}S7+l7iwI*M=?DEUn5ZClU7BIJtqDqC<
zRr#rs9;Ia|t2|}+@<z(9F+qteI9V{=RSJ!sPyor-Q2ecdGpR(jWG9j3L%La6yz3#0
zwt$QlP=-bo)gBVrP9Q$u1MqeB9o(OH13Z?v!yN>sb9ubNNDrXx)P+%4iR+H(sG?3<
z5H%gE8V%z$NamJz8DrN!j3pALA`lGX>Zn+&eeytD=foN*sw+%(7M})8Mc75mnx2zK
zOo3QToRg0Jr~?a?mu_(JWa!pqm;WZ9=^%0PG<17vJ)5ka+MjM=q!%No<V9!HjkMd6
zvJ~5uPjuCaJ=GCx23i}=1_Clqi>moH;D+V8DQJaUZ4R(A<hZzOZ`V8S%<ixB^S9RC
zQ3Z9trs(iSMQxgoT-T!kAy+WKs>?2@dh(>bDy$CPfO0$N!eR3l8*Bk(EtE}I!*ntU
zHF-*NplKD_wRNpcv|09xO=uQf#?y9oEMd3SF()fzo93>n<EcN&*mMsI?74QU+E7vZ
z=Z-Q^3#g30oJq9)j27eHEJDJB>496WY-H4SNvNd7ZaKD4xTKz>E85CcZAjB<{9N2}
z%UBzxS<32@sfbs@1e6YHr>K}EU&>qhVm0YxuvO~0z0kCFAJ@@ZFPBOX+%2Z~_YBIS
z2Qgi#1eBGdtc07Ta@3{tS)t2KSm`5youIl7sS4Q<L)j;{iLLLY)&9O6*~AmbAT|BC
z0Mfw^qyv`+81z{Ebd@`DIT6Cl98%FvKJ@1kYcpkLj#g$4z%ZjBkN7Nwm}lwkd<AD2
zr#~sC7D#zPVKr2U5Em*^eSz5^GR0t{O{#&RU2R3<xwgwB>|p>cuW?AjO6d&PvJnUY
zCU>DRvB04@WK{u@(2AOHoDl!uW;Ocz97iw?*Bnp%QhbnoY)}j6Xy?lX=rV1&QU`AC
zj0S0Of9B@q4mF^Z1+z=F$|?gTt><Y7<&OZ$UH(-hbCtS>!eC-6YMR1!?Kvxpo_3do
z{Z@wlZv&`<WL8I%P^^s@EtB;~J&CQOA|j3CC`WR;b26ODstX@gvp8DDm1NoqkS%{z
zYs|Ze{#IdE-rO{Fwy`}GZ<p-&9jLcLLr3TxEYlbpil*iDColu;5GkUH4PTKai|T}2
z7y#Wl6tY2c&g(?dgblfA6BgU7-dUPtea|PffuEqb;wklzfQxFHZ5a^NFJ!4nC83to
zexZ!Dwyu$-hh$}a0kVFv30nrdHS)$6?WAfNM#rA#CX4MMj<LpPcpZB^h9lt%mmN=C
zE<QsAoBabjWB0AIA51h+sbo2bzMH1}2G!W|MQNy}oLY*G&DC1;fG)CE53aeFOlslo
z1REd#S4IN|O!x_n>m66*dNWMeUDm9jyDFnY3C20g2Vl8adk0n)=UgqYBg@H%Q_rCC
z*%6WzfUrW6m4I<pNNhqSf&RN9;f~GJf>QLsO=OQW4+#JNfwPKr$5YSA9+BTwcg6oP
zhAMQ(oyxvJ?y00$?gchLf}_fRnzL+CzG)SD1^3)wp)J-k$=^)w*}XbeM{{-E@+vox
z#XVT$ve6Jat^H0ID!A8SAACFdS@zJ@A5R?@zCE!h&9}6F&=BwqUb%;)XaI-n%~HHv
zW%wIb!Z(GD%1^Y>>K+D9wUI=&5@Lt9z|Xy(<89u?<Ec-|-nNYkbNI=97K;o&0i;fy
z+7B>R&qseMZ*`v4WdSvGIzBMn)9Jq2XX+}(8YHj)O)%EKsRr}dT`}sSV_FL&Nhmai
zZ^TW1+KHPhH2`$2F12(ZaL1jKDWl~f2=0?2V^LK@2zvU(CX_1_MoHCOvG~`d_tOr5
zM>|-oo&C$>DONhuyqPNZ?B~}67wyYg!DlJAjdEpfIp-|lpUK}#es^aH_kZ5={y_c`
zk%M0>NVny$K@)_9ph_T}nP^&B*yUM5<~;TQ2VLbS*A+2>Y85$4xV-z*f{?1F`&{T3
z4Tfd4+sb((CK=ww)6nC{-Q53t;CSjP`eywM-(KnII2I=eMds^>!y*hn78quN^kO3>
z#6a!hfTrm`y~2Xlqzm+Tu#iP4@S}3p!9sl<obNi*RDYO*h56&sqG0a+i^9VrzdD|}
zpKgSfaPT|unf$)6gmzs(UIdPCzn!3hDHO7z#u7ONz{c=M=7$JkhLbiNS{<al>l%)y
zVj<c)Gq=4NrE-^&)gkzbXJEeggQ*pfzkgS`{~x4-xwpCtzMSfJLJNqFO3Y#+Drp%t
z`&q;mEw~3C|E2D2(K_-=(8um<(Y&qPH&4E?MYrCNmh=BnTLcF&(i%!}Pd%TSEn4$M
z)_BlidH*I`f8PXKv?Q=GoG`QY$}YX84>`YKTjasR2e1utUNv;~Jf|=AZr{+Hz!)*?
zcV~<+5hpZ8FW_r7icHbo?Gl&z`t?qG8r`$D2zF=~!;DhC!2kUt9^l^zVqJy5OUTI!
zgT~CeB%OM`R=K(?sZ&fHFY;&S4j9-E88bF-_q=00_^%I;|6azF?#7HwU*<eD`Q|Q+
zRoCX&hyR(oFy8o>A@+6WR~a)H5C0bL!WanOe#dzCx{MP=b94BTf4%Q#<420IR!24W
zE(`*VEIc7bx}rg`OpkQ|bJ^#<#$De{$5XG8&K_Ht$Eu&LKB<bcrgc-|oBJIDWBuZ{
z0{&Zyzm1}z+43@=e^0j2)6qM)Zv=jJH_x0${*~l+r>7&}(E{>~o?cLy!>9ilJ=K8i
z8}aQ#Pv?G}IrOjp_VjcOxbMH0dvgySPrWR9dM~#F=FTm%+&Q*BnE9`-xQILAqKeB*
z(CD$~fbL`HUU6w}DD%tB_Yn^!4z;8YAF|rUx2tya$(4N*U-ZKge=Fa0AEw%yzeW5{
zhR%O;Hcv;Nzg?UCe-eLnQZ-(fH5Qd%CiZ^Q^Y$^`k05Pr2Jc`uJ!PJv@SfxI_MN;J
zgYQ%(>lMG9o-XId%(y@7<l~w)nB1#hUJ%N}vJpgEk@?f!J4G&$%;`=p{)?_0(k-=$
z9M6Y)`jcM9jPYc(a7ku_6Mx6Kj#T=#{$F?#jPb_w?S22Z`nCYx9%MW+eVa4w{}kUw
z6TqGNTfc9gEdM{%w|);07dqtkZO_#IGkwD&@<x1%x$5ELDW+pN{X%OQJWyrpJQF1)
zh)?JXEoa3`BjxC~^Kb%SWbV5OxGR9m5hWk)#B+M93G+7cX(#z}$-l6Rd5x@D;A`27
znpr)dNqx3Y*V8a8W+#ik3(_t$so61Z2%ekZZL{<&j;-h}MD)jwzRqKD8&@1p4Z~Lp
zy*4F>7WivA*V45ByNqtfD5&6Wn_}s#!Pr1b5~s2=F{0%*4RPHiMEgCf4Axb515p67
z*kV-AZB%!U!W(-BxgGyaMZda6Ibf%(qMA#MpbRDXLR3?m)A^nWjQdBm)Jvjky3`2}
z@WHCHR0bX1l%DExj%~=@bLZ}wQ6gwBz{jlxP25`Kx<7jWq9dU~)<s=Q>MV{h{Ar6P
z(`5)~SwO!mC`H~L;{Z<(fE}8kibk2BFr%bqWhE%1Uu=TvwoF!a+U1M8lCF@mNXMlm
z&hm%uk`P~H!6Uqxg$<l#^_ly@{k03#I@PpAgsPqCwKtdYTd4aob)RzU`o78uZH(U4
zs=#qd+=qSzucN@8_Pf)=Yxtv{x0t$b1zwwg{iD;wYaexAev9xL_!#u+JUx0<Q+F|S
z-)wpfhmX5}{Ucz{b7f?b><MT##zh5y!KcE8Zp@w7N2%9`y*qeQX`5~C<eAvo8<$m|
zAwtwKi4jLIMJ|Uw&Yk|Wd2v@`5c@v#+8Bm9ObX60pwuiNhD*$|X7*>kxy4_fUSl5^
zur~pF1LIqUzUaGa#QacLV5)(26Y0kQh63YRVEiL6Mw7O40fm7XW8)@$GRkUhPbTI-
zv4Zb%zcO`7yR1XIn3r@bdbjUU<ZTOe%zL-rAPSZht7tN#?IJ<j4`<SFK6Z`JH`s#<
z^d+H|jt2BDAuQ4L4#n~7!AWH3mfs&w{fTs_!D(w;Yv}e~fSPF*br|e5@~*=Y!1c;+
z5*TI1eui^rhpN1tq%=iNOs<a=IHW1Gk2Vj|{vT-n+pJZF`Z(=R_jlCmId-#_=<mt|
zB+cfxl==_haG;z%;-vU*FsLuYz7NQwMjZj+P!Hi*s%kDL=t=1AcKyf#rd}DzE_}Vj
zR&Up$dz55FT8lCGlfZa)vDb;ybl%Zj#EAbh%YXCjGW-40I2l>>-66BtL(T}9696)n
zsfS0yik7`R+Ifg|`~`gwDrvLs3GOI4ay+$%bhfPI!x%aa9l%*xs2yQ%v{}EEz0r`<
zwh7y`O}0(zT5gwZ9-z&I-L=U8)McBtpQqktHC>ziB=&(ezuZ+n;iYb=rUO$m`$oXf
zddyk$%;2KXQ`&iycK-Ypw{w7Y4(#&0Oa6E~^*NFKfn(FW3+{lz6U62PzK_3Sp0myR
zytdk{C7Fjn40GiuzBRPgIZ|E7Er7#Fw168)5q0%SSTIQoDz=4#Q#S<Jlr}D?ERxs+
zew2DI^IQWnkUkbX&HeYU98X<MT4j@Yhp!LIoWkNe45#etlpW`mwfl|=)TaD@?VSsl
z6xErqzf)CTb<a%COgFS57!{3<;stf%PVkcK`lF+9jWNc|s&V55n4nQ{5obv@`J<q%
zqC^lKR5XI(D2j?AgBK8Qj0ng@aX<vGI3glyBqO3Q|NB*SHw{6vS<U}!o@e`c-mb4s
zo%`iG-#JxXUGh)5g=a=B?1hB&KH09GjejGPpBpU6(*F=OT|Swx>n)F^^G;#RZi=b`
zwZ~vQzU1%Nqr@x3!mqXPq`jmx--R}u@YUfb5@!F|ykmX+=FVeE)8A5VnkClf{R>Jp
z{(pEHhN98VG%1}PC3kL=7N__p6#6e(U)j%sVr|SCtki$eP%Qe7qcW{tQq&_WcsC*W
zTtYtg`P1gD|L^=?%qBRmXat;&zc29jef;sZq(AG^@f-3<V4JLzKIj=|eM?qKx=Hkm
z+Uc#VRf(T!-x7bmy`tC6+vFGTfJZ`pEW~v*FsdVxVA?pY<o^JRZ{)SYZ%NU9M{p$x
zO(wk?m2o=tdt1^xDL+TW|FgKw9K}%LhN8zmA2NpHu}7JaS)|0R!8(Z6h?|#D%Ah3^
zv{=;Irp=0z?RI^}0m&`_d1$<lg#FiIapvRdfP(fTTE?t*Lv$HihjaQ2IwmeU{hJ<z
zc~2IL3G*a%oF{TzoEGAz2YK+d*oK5Xqp+@vl>!NuUL~QpB8r8l!Fhv6oX}UtOjr~U
z8a&Q3nJo76znCk+@}HGd2U8!JyztMaaq?MIUYI(6w$`%wb^aXg`+v5%^PST1nIGT&
zKfB(+nT2L6PH@NAq-srAxDjJN0*-&~RM&gYy59TL_1?d(_d!SZ-oHd+_U&38nTeL>
zKR?f0$9t5PZ!gV0q{*GKIOE?;n%qK{he`9c!J9f?VLsZ{j=&ORF<acUF#{;7R~j%s
zXV9SZ!oTV~?&5?mKD4`?xM(5o=q&@1tl7MB=3I0>?|s@ExtLe><;iEfF_r&!C3Xkp
zSlaKG`FBJGJ0G^ie_qG3g+$p%C)Sg6u%B+F{m?}89ZXj~rr%bO_Gsd}%Nz=}d0zj-
zI+`fR2)&cH{6t2V#ZEMl&e`&=BrM~Sox0+)jYrJGHsF5%4lRxU;&@T<E!<A$`o^!g
z{u{1m`CpUWisAXcvQy*m$KrNN{`$Se>s$5?SVouvC@SB91@%P@P=>AkU%=*s)x<S~
zv}_J8)<rZY6dxUr)`e+|{mbxYdz?jo*le)|J*A)tn5B8|*uQRRZku0^C+sbR9Z(uJ
zU*GY3!Z0UfoW&Az75|p6YY6`|;kR1*<--@JKpJb?y%MYIIfPwK*rQ6*E_vpCHP<(D
zy>6@P@&D&o+Q}D~JNcg$tM_8Lx05!Hsvozd)bXC}QG`8+uwRyTf3Ba*_3fo?dB2S7
zzvenK)|Rw?754+H*NI%e5WTilKa1D1@lG<Tg*8$9?t<d7?WnE^MuN5dD#D+#ZT!(5
z!TCjd!0I5iApWnKpCcFRpxE|5Eopo9I!oTbXk|E-u%ot3BVUH&xxOd$-@ajUXJ6#t
zcePvMkM<mn8m{r%9EuYf-8(jmXm3XJR{I3jMnkN<iEpUIcX&yB{5M12TtI{uMFX3s
z_v10b#2pLt!IPfpTPV2Y?MdPasbAg*CP8BBxQ?}sf9_Ulrm(-8kB`xow^>c`oChZ_
zjQjCe<hUN~e+YXg<1rMQ$CQZ&@=K?1-hv#j1t>9b7Jn|mX>4c}>!!r)iSBD&Li?_<
zzVDO&GyZW)-RAY?-|KzN6RE!Oi}+8ws?N>{#k$<01LLjwVypflYVdgKi;XNy9C~W$
z-_k_;s_Th!JaIl-8fU()yy9=tFuMpJFQaG!UI@TYpih!se5pi%9of~R@lPkd6Bmmd
z`03`(3$}`T%X84Nc|?4~&8{2^gJK_uT}XuKIW834VB5AnkG^#`c|X+J`ik%TeY7>j
zWz^9=m<^N(dk7asK*>F9YwK%XWE^I`xwalcoNo~4$;A1=R_zgw#B-y3kf9;boJ4cP
zHUL80$Xvo&VpJBp6D^NpaXA-v1o~L%qjAw(cFId4b4hnAoqw$D)fG2a<4zDyhS8rx
zn#SJ;JJR~l62cC*HlBX)mNt%cr74p5-A`01KTV2l9&TV^rl2Y4J#ht>YK?7vlob~b
z>xVu^HV`g|1fJufiHMvyi9Eh@hd|_UKJ8T)Y@l8cEkKG2nkwP-3xq7b5tn%50L5P&
zkqqAA+id)HHQp}7rKmf}bQ~n!FJY@N9t0$hy+=)#Sm2QfCN>W|$zp#0Y-i^=+iBm}
z7A8E4O)|%#>d2CHHEEa3DpLqQhrV(gaqVUMJYx^qQtx@)@ZWeIk;J`g3u8PkUg_^e
zn3P!d#TwwxuaZMl_cmjuWaaaSmH%b-!FKrj`)|Bu<h>7Vw`9l8__sZWAGoEy^LE$Y
z^Y08#S<2dHr_R6o-}bDae=Y0Y8UN1kxdXPeQGQG?-F{=gGaN{tIKEBf-`LZ=896v-
zd+Fu>Q<=fRR2l1L6d$Lt$%w!xM>WMdJ6_>2wwP{8hE8<P=L<UF6v}2ca?##p6MDGM
zpB15e2=#;6DCK8jbt7hL9`p*f17TQB<-`0}Y&&kk#QKl-i;(45v5~b{7sT2)R@d<*
z3UTaKHmBT8a+68>Bhvm|>0U#z9rAZw2pX@Ih>rrqO9M8d<E{K+Mq<^D=b;5d8?}zM
zVxlNop_~qiHb<~LW9`KA3-O{8b-Yb}OAM6@$?GZ0v4gn3a^80G>ao>BH1RA&7S4;N
zF5c8yd;uF(6aOAK_CrRBevT{b&)`^M*;(J2Pnsw8=<Hm9Tx`$0F3JC%m(+^ud|H~K
z#v5Hk#tJ&N?&238$1h4QHb==+Aw4P6diu`ely85VqhH*&B)!5rrhZefb>gavryf$H
z>PW4j&?ESZRsNEk&WbnOdD%<cQ@Cwb>TdU>O3xd%K8;Ob+KJdHV{y+Xj<kPNv^Z_9
z@|a3o@VFI;HeOo9EgCmA({H>#S#0~bm+~wGLUB$a1_l-{cPJTK(P+7bCfJGgc!v8X
zpCSiydu^$se4pjnpng$~<AiDJI72kUpUZS)x<}!k@~o21jj}=snb>3hlr0uYZWrap
zZjyGooBZs{{ev(;e(JZEpP-@8Eiqustc!XkkF9%{eC&b|I|*aNVCcjP1+va7abw?f
zsMsW8mntq2k8~sR0-QK(v@=HxHdKp#h;th`>ZBGGD@`s%yIuLW5wcks*ACf;6O9)o
zv{EsWcq=ouc8d8S&iLV@QlG`7$sWHDjbDC*2O^L2&sZr&8+#tO^(&jXx=n85fbkY^
zytNuvT4`>#N%xF`&WU3ymT{Y;izOm>+|4o0i;YqmKUs?BfH-O1xm+~tOWotF7BfR#
z#Z^b&FC8Mp#^5Vfd$eJgA2G~+tm~tA*mk!U`CVLCI}{CEG8u<07N?jBL2&d~S|Y_A
zITqMkL*T74q)q<#E_x^yzEp@SE-pzNq|~MVmJO?DG??AI;dSogow2ENGICK@7M>-D
z=hOT@j?y0(?%ZTYWmD34=tt_%)+@I6bJQEyq1d3^^KlLLPN+&BTa`SrDtN}6Iy+r@
zSN*=!=*iNXdoyQ4=eS*5W>-DO9iT`1{c#xPb~#m0tiQDo@%0_{#{F3RwL7tg$i>Jx
zSADMevFn|#i^X+h?~zV^h42T*mxVjP?YSS~aXQtxq57J0m$<GXvt0E(PF^ujpSkV}
zTs|87AL{nEbpBEAbMF7>5Bz?d{JXX}_kVSi^Ph4$(aB;9x5jB}6fU1d!tU<6?ZK7f
z_2>Rj{jGnKt88}ipm{Eo#QbzW0EYqkgmWV-E05as`L6u_LMAB7!3X1ZSoisX^gsAP
zC$~98e8DyF-QqR7M+0g1_u%Bt0Dmj(i$FVmo8uvRiIacQ^W_-*SNXj~&6Tq6X`@^g
zos8Sd?R<uQ;M^QLUG4M{$4j^L1?R5taENO&3Y4|_yvLpPmM8P<(kJ#sWJABt@wm*&
zkTR?b<X71RfsAq{PIijx^G;VddD-b&C+|4D!joG)o#M$PPiK4bs;76VeCTB_SIPM%
zPx5uDFVFdUZ747LIyscL{XL1NDabq@$~}R_xiPe~|Lb}0aX6iNq|<SpjB|RGC(|AK
zcn{=Dklb5q<><IHsRKD4p(n|i@p;!i9FNOf?PPHMTTVX7*Wf<ZhYr{4Jvrf9o2-W|
zbMm`x?T(1e@oDo$0iz1~TlpRD{*weodAhDbZu9iIGFcJH?|XWEnRG_-)xO?cCO7%!
z=OJHblu?;?IZkd-eW+aSR^41CPpd8}lR2tymPwoH4dt>*4}QK}T0;xg7VdUyg^Wn(
z%jGgE(e087c_g9j<?>46K(1b!)TI@2Z&GJg$b*qQE4ef7H>b#(wNa%@cGsS6?<$es
znTxsY;8HdE6L$h$hG^eHC;M`D;@G3l8LlB82c53_VT3(L8BYJMW1L*!Oq`W(oa6T8
z;-RNr9>{nGiZ9J>?`gg)b(uf-^1f5#4%Zd;YrQ@3Gt<kg^kuQv1^ELnv(A@GeMKId
zA4Z29L2SopyGMEpJrvD-p8U2O5<Tg0PwsH1Az$N}hq2b;pXZzX%sNg^(tA`+KXQ!9
zRHqLG@|@F=Hga`bAj{nG%LBRB%RCdvEKiZ=db{ECBQL}2aWC`tN1pCyhN;Z+cSL^I
zx5)nJ6YVVJi)!e)7sn$S`L*w3R`$2-i~2plecSry(K^Msi}h9Kev4k2;i~U)(q>-%
z;8o8nXczO}%k3UjnO^LU;_^>)oO3y+=Sh?KW*F1`i+Z*CAl&}xF897eRU-ba(@XWy
zGvr4k^gE!;yVY<!?0{jOjCPsnPNum1kkMS+&C6H)?kDYaohSdPlbqb(Y7sk~zT?Z)
zp5DWEzFkkXE>x$p0{NNV9?-7Mz6^J|!IP^{5x$Id)+3&9y406er!#$76v?l;p12S5
z^nG7Oc;7{S(X&`qTH?zs@~BSe<Gbt0&N6<n9<`;9|Hb)df>&KS{}kKiKl5!f!MSUk
z4(63yME#J{(Z#kI*WIOSar~j4=YGL)sGeR-x6{=gg39|%<^!L4>$cpNnXV6Vr#o7t
z&8r#}$U9!QO}_lz?}NO^df9}0O`UxrCk@#(p^R{PcZiNN`BkU)gfi9B=h1hb>FL)z
z{lv4;bG<JkeZ7y7=j&`=W(9lV|D!+`gmQ=Oj=WfPbtspG-H@+H5IgNU%!?c3fs~xK
z|8*(q|A6%gX?Kb|+|xNpxysAjos<b)=IW$O^Avez<UY^qfuBvD-clyR{md6h8RutS
zPs#(nB2V|teYS6YKE<U>Hu;$qWpYE1nN=o}0!4l>F!x!3`T01|Mdk8okeO00*J@@=
zIeAv(d(o2R@~E1h_f_wzkdHNUMTJ}yX4aI;t)U{{8Jhdlup53}5B2j3c_+-gRw0|h
z%u^LII-$rnCCq(dVo&@mNGQd9#cE(~q%ey%L!F-D57z(i$GFPzPVTj~{wr;Uw9RCP
zSDlIZVHQhN$EgEZ=loEA8JR@Xd8%8_6U654)9pI8&OwJD{8aDq<mbwCcZ>5kIrpS9
zhk2HV8$Dg`WV~k%k64G#8wg)7EH=pL`gW9%$ZHO@WfSde=Qiid9gnF_m+Ym7qKhrB
zk$pJC_0bdkK{(v)w12UN;_F{&AC5cN?LEw5zs;pl=vaQ&d2W?6<^G{L-|d;1@PwBw
z7BSLuf5CR#>`KQj^}91seMgT*rCOf$a=VzGJw#7+|HSbJ`a5^7o+!UY#$p<juT0uy
zSF`ty%Pev7OMS}W;XY>;Ea#Dm$H$2_E1i{Hta7>22bF0^dCwxY<s#o~kT-pq?Rs3V
zvH`0!kesJC1~y4e3gl+*m`?*H8C@C3c>i0(ur5EF?Dak3?5j<_oU1usE^)OCXH?%C
zo|$j0p4?+vfyC1`yBwjX$x$2!#%{ZsraMJPSZ>7>=`~Jnwwi2ldYiLQQ{0b#%8r`T
zVJTVS^rMP+{uu4;IWr}*=~5|q*V7wPve{EyuJO4!vclKZDY+!jwiE^+4r>D)St&QE
zex8!&b$_y>`f;TVzr~gENT|0~%FB`bS*X)1WvUIWrxV&-CG82lzDh<U_hBbLsWYl%
zY4Rs5Ov?1dDp^>zl#YB~g>I~pMHRZbN*3F2B-7QqaO^Y5ed^@${Ooet;W+(JKMz@{
zpvC?}Ukn9}JR_6|m?5DRcvNV^WuwX)PFJb?$>{=>F`hocjPB{}YG&^>Dqnco5y)s?
zSJ60@Qxd$xeHY;Zy`s!4^mmgoCW`1L*X_Ba&GNqwv1AnaeV4sGWFFcJdAgT<G?WG2
z&d9Xv$b^}HABA$gpIsEny}rp$`F3?3dO0cU{hdY<bD$q2<aYF3LZ%1VDG6B+$!}7}
zN%=4^pPPd2gnC#lKd)Oqxw9<J=WOp#gbQ^>hK{1m8M&TfXILQUy0oof?ySHb>#-m$
zZ##Xof|vg*@(o`0=?a<b?TozG(^o2Fsn_G-wAoA@6>_7m$oKi#&I)<f-x>KmUz<|$
zq2J@?wB>ecN~Q#gJUhrfmy#91&d8UlPN<Yos+U&Eotk|!B{L%VMYXGRk4LKH@^Ggc
zt7KxR8|V_DzFH}B!tCRfrlXPn7%EpUNtn;yC-x%L+=Nc9mbQdmQ!Vc#^usFIn8+@y
zlF><%CnoLcLrIJO<D?Ex%Oz#nUM<&_>HKOL8_6$~?SuQ(<(AuL%B^M=ms>5pUT!ru
zqJp|xl;JC~6}r3XUJMQF*XNyE<aUg8&M0nq&>?o+A8&nhp_3mRJj0pQiP&r-i_R5?
z|C(#%|F3J}ubJ0Qcf{V5`Vf7{m%f>`p8V_1NO!nHZ}YJgGGBPI(H(^Ru$Q^UmpPsy
zzvP+kCnM#>yz!Ou!dL7Y^!%CfH*x*-K?bYaNz960<NPZbZl1K6sZ^Mttxd60&%x=p
z%9DSLj5*HMBFNE9{=PLFUd}s)<BxP<$atR_GAUzFG3dvJ4Emm%)t1il)O7E3m6ega
z+3krtE6Wus4|@9|ukv(_%3AL|$I1G@0(S-$(FnCT(Uf$QXt~_!YWiAwbz?l6E-&$H
zO@jQiOCv9HJ0njp9cTIf`ui{SzsQK~IJ`i9S^TrmLTv@|jMJ9`S>TRma>A6`6qqT8
z{G_)VKHI&_ohlo>{g5a7nHjkI7Q+(%mn?7c^VIiGY7kaZ`;As+kPI6QBR!L6d6~_D
zH8%2F-Yc}moIoe4yl8Fnkg^rEM7wZ}ioeS{1-GHu2@G1-<LYX;-qZK0sMqY;a&poG
znR?At$QrN5yb5e$y_rR>ugFjO*?Uo2es|=X0t<C_V2bSipvR3VOY4IQQ=Q101KnI9
zIqi;&!Hds!)#gh1lkT3Yl<}dqr{sZ9TT?8wv&|`48Ofi7%GFDmvMS};#BPLQxjnN|
zo=9}-L}4X#L8W|=P~<Vm?CX_sPtxRNNsE6~Qb$zDnq>B6R9=}*tdiTx6nSb{c3PFp
zjpVn>l=6ODrj&hHxyjd;n~ZuAnO4o$>}qp;soG-v2KvEiwj`;~+^jNKuP}4PR<}2~
z6J88tozo6q*1PPqfW^385lFMA$WM3~%oUbZ$ZNer@PCJIVeh9Mm^*DCV~s~c=tnjS
z9e3FD09!RPF~Gdol@%F7W|GeeCA-?z`uZ5_5l@kC^)mCYk|OyzuPgqUCkaafN4+JA
z^4NdV$tr{NCY7Ok=SbDr`3%=r<T|e_;%sj`ooj<%!_>}>+hUcc0-eP`4Q#Ss8PL-<
zSoXe|aWvZdg<fB6X5K61W(?e0PVMQ8a=FX(|CGsy&9n-+$IFbWU>TPAq@2~9BC{C7
zeXZ96KethPDY?_nyjvkN{mk47S?nwFE0O!VzWKR1(AQEjKFB<gl1GBfgp|w=6nRPH
z{#IaqZcv?8DdRMA1JkHxHl*Y^wu>rdVdTD2&CjS%ud0%!F!Nre+#hD<SIX0&BF~N7
zmxbN%b9qAFu9B-0nbs<~BaxX@CDRj%JS%c%^2N^^34O3y)+Ns6!N6n&F;{jIwZ71L
zC?j}SWPTj^t<Ngu7y5Q3J3!eNDs5WC=zG}xkW7vCva6HW@w-?CJ$<^&s^s=E_ARr+
z%4CFZ@_4@oSD$5tSS~L`Ys1xkmi1s~B;OF&)kg#EC^uEoR!-YyTgpw#B9BnJN<Vy|
zLLOs<SV1*psdxrC@@LW2n?t1{Cxv=hN}dR_t18SmMP40R*sBt{IVCqH6r1I~ME0qa
zJR8YN6WzJ`Ny5r<X;LW{J8P72R#GYM3rT8VWYss;zs?@;Gm-b0T|!&=EDvRq>+(f{
zmEJDn6YMT)F2O%&EAm2bH{Ab(A(xO_G1V{{{TU9Y&jWocA;VRXXDYYL*XS-Egfcqh
zp|`O~ww`FON#2ipVqr5KWNi~{cC~zfjaW@$2X|J<W9$M~%j=#go(}eftIa6J=N<lD
zpP{ULeZ5*X`igu*VD1m`otEdYP}A~BpkvZD+u?Gr9>UcRu?RCVJk(1w)VjW#mXAUU
z^+l-Ty2zNs-k)dWCH6BjbT558Bex_K7ZwF?VxJ|=&qiuJE7zClhh1b+nJ(-iFPG`G
zF0wXq`K;_fuFfjgtGdc_<tATJq0_s{_zJzXt4xaI=@l)G3s+a_eObA!QrC5r$18g+
z=qei{m#eFE6ve30j;``zl_j>yTJ-&F+`FebQ)@?lt20UOelIDF`chJEcbS<<+mN~^
zX|~6eNn5o(5Zcz)bs?Mf**`{W4CH1n%hjhm9iEUy>`aF2?POc=6Uo>5c9pf<l7u|!
z>vYV1KRY%d??mzj|GQkB6=YW@uxh#^{}FS-76MA@Q`K_vII~%j<(HDbrKah|<QD}C
z+|it!oB0gW*ZuG*n$%@CR-%Gyk*9iD7GQI|W07z2v-elY6#qNOYy9l&D!DZ1hx~q!
zT~Q^&^kn3fn*F3o)<^QfFgv1J+QU<DpPjIIdqv_x<PVa2lGeDgEQa?(W&0qHEx+jP
zYMEHE2lA2%9m@iwBKs-bCz3BuosIjtl+H=Zrc~zMw2ZDa`R>Xr?yZ%Xcha)FQjtez
z;-;A9Y^8m?E-aH%^-;EsoZif~k;`6{kSE<q$XGGd4;x{3B&-V~uk*5uj?4WWkSF@t
zc?r9nfsBe_pu8HnZ}hXDBxH1O2<{7m?3kpqNA>)tpc`>EY4(Yv+^1cTpV!RGNor$v
z<SWsuNx3C7_ea9arliadEkCb@mbdpp%jU{_WAr(RjQ_`j?hTu<_Qf)8_D{o<dN$bg
zah279PGYM$P~<CA@pGLu<j3~KaDCSuiE!fJC9Kn27K3E9+X49+FFU?c?(h_Oy7%qJ
zDp|<xKoxKFzP+SU{@~B|scDu|>ngcLb2##|iR`c{c{On$^3BQ2Emd-VQjwqFhC#K=
zOX~P)S)Tm)@M@V=rc<lrxw3)CkC*GSRV<r+gnUzlzE&j@DtaToR*_-(^~Z|6kh#G?
z*gI1e&y<udCsfK}em-SwzBHxN)AClzGWv0vqHIc=I5K0-k7dl`?2HAXtT(tH<Ka{t
zo#YPI=7bFH`+g!aQxo#8)2RuwAZ`k6`QNG75ql$l?)AcbGHdBj9`>`y3;bT!Cv2nQ
ziBPT#x*$&qG8p#H28z5a$h;l0cVX@$HS;N31#0dOsJ@)AJ1->rl3EU4vj(``R6IEw
z;eLp4rcO%8MM{4g>-0TFH=|x<n$sH;o4OY=Ruk?sJe?mhzO)sa*UKV*;O$2SC-}P5
zZmV@cp6h2;tBrKz&)6!ZK!Lg6A7t3Gcp8No$_rSvZ0`n^B2%5%tQ2LZ$=Q14G;K>z
zQBNk=RJ<=?<Kg!SnaJi;bdTdPmB-!Q$hUju-s1K8IJ9k@_oJJ9$XEHj*e`jU30CD9
zzYFpzKQod=i*NfVW3W6zxhpXDIYDMx$Rgj|-wiA_G!ZGHiAelvwS26}XYIs3mzr@9
z-CbGcdaUv7CMI`UF86wDWO?YNk!O1Q@qm=4PqKUOXKoFo$?t+Z&ClEy$n$;%d8OHb
zi-UCDc00iJ{JB0Apo8znKy^D%6(wuFm#l6`wRpd`(^VbBBWV}f9VxbgqB>jc{sG~i
zZ7Zc8!oTYSNm~!n#!jD3vPp;dlGA6C*30;<2d$TsyKEK4vS?0HmYLY@>0GwIEpuai
zozFf{WUu<VfNdZXKl61FYQZwZ4bm5xA55ePmn3Z&!n4!V78~N$xn`;^OUfH2vhlY(
z$vlmCTc|6NW~#9-5h{P_#yUi78S(}@?pDbUB=jvbm5D18x{3+G#H*9q&NjUD*JywA
zudT0tpuR5F8}l0)boqCDtFI$;R64o?d#+xWj&EDvh`Er)3g;?Yl6R%;eml=uVd$rA
zSDFg-6m{NeB6A*w!Fm(fOMD<Lw_7DKTpvuwcQ%%Dk2x)y&GpJar=?}GRZ>e}+9A4y
zvntR>({iO%5_<9Rw6vJ`BunZvH%Aevx>;$t&MN7aP@hW6lO|&1KEw24;)YOXr{xx_
zq~?S^7wsvr0!`@iY1v?|!;(5LEzMSSQ!qD}txS9^sSDFG%vAU_Wx6;mQ%roUOkYaN
zYbLH{6^A0W)ml@zE=8M}_-whpl9tsb{;^zNO-qyQFkz6aOv|$-E~wDg)2L3wFDmrS
zw2V(7-jmX|)3U(CWhrIu`@+OrrP)mPR3biHsqdv_nTc;z>icQQnVB-GN<T=;!zMma
zr5~bbO<Y^0AERQ;Kp$JJpQPmx6Q8cuKQRZJ_(8RPO2Vd&?H=V{xu25$jk2a^0rZ@U
z+y1{3#|8R~v(0H9qF7@6haQ(cNpB3f2Y7kNg}eVYZudD`1RrO61E=cp3K=+%Em3Tv
z8D$Ln9guJKvTe-tUM=#&{y`(kZCrm;CZmFZ$Sg8&pQYJ9u)0(8zfrT(?55Lqk(vAF
zm&@DX8OYBkbY;0LPV9+%Su(q>T<%O-*hiDu%PVA2vJ3LZ$qbvb><=K1DziL|vyQdd
z`o_qVxmx@5ay<{j;T+rDy4LN!-ZmypX1|NaIhb*ZH%6$#?cImQxyR}F8lab{T<W;-
z^trdzvD0&>jUTQac$w{@u`M<;z>@Xf49t>!A)rP~X1ZM%$Q#}ZjuRAr6l9N_HQKdK
zpP*7K%7^h=F86!yBo>rg&o{+Q)XDE?KXk2?<G*oliSWDXK4MLle<q<WGKU86m<akl
zO2eLE*h7zxX2c8ih@$(K_9v#epV=LO;qKNb-k-XEF&m%hllyGk+u??Ms~fO_snOGS
z)y?;Gtvbxf&7QlIdz7I}40KB9<^~POe+YG@%F<Bp2<2nbHu-Et{rP7)+_ot{^4X>w
zK^;Zo<m=93mHU&*AqNfRAuG#%r`zdPH{btUnOV}SF)+CygKSx`Yv1R1qTQ}K+iqX|
zMjvqY=udR*oB<p!(lP8ucs--1h+bs(-q$-)rl66Z;xUy<Y4i7C18j7l^HSWQSm36m
z*fBGwWucC$ln=wr-lmj%RJQM$luRtwWhv8x$YUz@z|(qDSOE={1gb!Oe8MSw^NFYS
zSpMJd|E+<N8tCLB2RJzc`WzIGsK~9vkM*Z->QjiTaQw1(ORty8U*>;%?k8`@aWaK7
zN-rH>dXkqP#*a~YX?yWm*bUqG+g=(L&({rKnwS3xa*9k8=$V)8cnFjpOWUs?7mj$1
z^pzd$)eVMyibp(_`Yq^ue|;zWFk3!f=59Vp{S`u3n{C@}R+gS%I&|C57x*_y-3$Kh
zxb4T{*fxH$+-Ypj@3wAVmfp7hwioADwaK>O3+LObqr$bXdn}Fn%jCZ%jnX*&tKt4q
zn9}Rkmwo_teD(JD_+I|#-w~g8$sc#kANS?RlbX_>V>QR29HV|w=A@GI3*YsG*YFHl
zg3L56N0C6taTPno<s8T0-)vBus(sig9YkZ`Bkm_=Ip-kVAk7a)OkTEDqzlJB1SX28
zk7HOypU*ox2U*@Xa@<~D&U^dP!-?md-*?ajL(b|q<f6z=vU*D_HI%0o>YyGPpb>J=
z1kKO_t<VPT&;en&lO3T3YM~D5p#d5p2TjlnEzk;W&<-6CRuCR)pcd+&9vYw#a?k|L
z&;qT{2JO%RVT$lj1GP{G_0Rx~kb@>@h8AdrHfV<q2rCH>HBbw6P!A2z2svniW@v#{
zXoGg>fUt`2Py@A42ldbZjgW&TXoePOg*Ir14hX9W4>eE=bx;ot&<Htbf@WxeR%nBE
z=zuUyc&LF|sDpZFfJVqc6Es5$v_c!SLkENz!b1(zLLJmY12jSonxGk4pcUGn9XcTF
zLU^cwTBw71Xn;n@K@&7X3$#KTv_l7kT?r30Pz!ZX4-L==IcS1rXn|H}gLdeEFiUu-
zfm*18dT4+~$Uze{LkqM*8?-|QggX!(YM>VCpdK2a5pvK3&Cmj^&<5?$0pX5>hZ?Ab
zI;e*RXoMUzK{K>KE3`p7bU@gR@K6J_PzUwU0F97?CTNBhXoWUthYkpLB0SVUE!06h
zG(aQdpb46x1zMpE+Mxr&?u3ULsD(PHhX!bb95g{Qv_LDgK|6Fn*n{v;1GP{G_0Rx~
zkb@>@h8AdrHfV<q2zMqt)IcrNK|M4;Bjlh7nxO?+p$*!h1Hx|+9%`T#>YyGPpb>J=
z1kKO_t<VPT&;j8tgohfag*vE*255vFG(j`8Kr6ICJ9I#}E8(FAYM~D5p#d5p2Tjln
zEzk;W&<-6C?nZd1fm*18dT4+~$Uze{LkqM*8?-|QggprlHBbw6P!A2z2svniW@v#{
zXoGg>fN*!hLk-kI9n?buG(rxVpcz`A722R3Iw0JG@K6J_PzUwU0F97?CTNBhXoWUt
zhYkq8O?aq*TBw71Xn;n@K@&7X3$#KTv_l7kdlDXMpcd+&9vYw#a?k|L&;qT{2JO%R
z;a-G?8mNUjsD}n<gd8+MGqgY}v_U&`Kv+X~sDWCjgL-IyM#w=EG(!utLL0P02ZVbQ
z9%`T#>YyGPpb>J=1kKO_t<VPT&;cPY(by4cpcd+&9vYw#a?k|L&;qT{2JO%RVK2f%
z4b(y%)I$R_LJpds8Cswf+MpdeAl#SmPy@A42ldbZjgW&TXoePOg*Ir14hZ)nJk&rf
z)ImKoKqKU!37Vk=TA>Zvp##GG2@f?;3w2Nr4bTWVXo6;FfmUdPcIbfr(I0HZzn9N3
zefu8PbDv{Q_-U`6hxD%P{T-3s7Y)2<$lxJooh`k8alysC2cC7&K<VB8R~KCLtMlXI
zkipV>@PPBoEfy|3Z;13h=Yn(i9x`Ak-wm8_X;A;OhMXn62Mj!;Venb!4<NpN{mvLL
zwBLXWhnzwD=izd}pdozs8!~9{MMNGS&h1A67Bos_@SrHwv(7)KU+hXWgGl4-iwMzg
z(D~;NxM0X%QQ2nGcVLIxde&@zBaOjcSl?R98Qf-z?0<8&HGy&FKgMeT>wV_O)&{$P
ztq;tftsx9sI}|>Jp1KzfWnlhntzg(%p)_4v^YFAv(Vwj?3|n)UKYkKk+)w;2vc+v{
z7AZplTh|mmg>?S`hl0N}evFU4UGNo`!OHTz5`VV;WL)@IA(q&mh3Z@4&(=`Jwre%>
zM>Rz0TE2(k$GFxiApa?Z`7!5~iup@^OkB|a4NmeO%bR_8JgDgJyv4p4r_@B3qOXF#
z^EtD6viP3;)Q>2v!^~r$L>J{{pX2(nK-PceN9#KCW1m8Nzect&<}X<uNRm6bg}mcb
z^mi$8!CxAGY5W!9DD{^s@wXHHcEaCBB_0cLkHMd{ZImwSy=12^8}jEIiv8dg<U+a<
z=^f%U5BX0a>f1Rl__MX_PQ-A$Ep+oA^Jmz5C@l|`?!X>w;giP|$c0ZKf0J>r_zucn
bFn_iVE`01-0gJ2fxfp-b3MU-RkA40h&BWLe

diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/Makefile b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/Makefile
deleted file mode 100644
index 0e22650..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/Makefile
+++ /dev/null
@@ -1,8 +0,0 @@
-LIST=VARIANT
-ifndef QRECURSE
-QRECURSE=recurse.mk
-ifdef QCONFIG
-QRDIR=$(dir $(QCONFIG))
-endif
-endif
-include $(QRDIR)$(QRECURSE)
diff --git a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/so/Makefile b/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/so/Makefile
deleted file mode 100644
index 2c76089..0000000
--- a/plugin/org.apache.cordova.blackberry10.pimlib/src/blackberry10/native/x86/so/Makefile
+++ /dev/null
@@ -1 +0,0 @@
-include ../../common.mk
-- 
1.7.10.msysgit.1

