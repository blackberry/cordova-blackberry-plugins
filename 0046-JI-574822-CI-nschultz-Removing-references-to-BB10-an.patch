From cb7091f94ddf72d55c975ab59383d738a30a44d5 Mon Sep 17 00:00:00 2001
From: Marc Lapierre <mlapierre@qnx.com>
Date: Thu, 9 Jan 2014 14:41:11 -0500
Subject: [PATCH 46/61] JI:574822 CI:nschultz Removing references to BB10 and
 updating readme for QNX CAR

---
 README.md                                          |   72 +---
 test/unit/com.blackberry.app/client.js             |  224 -----------
 test/unit/com.blackberry.app/index.js              |  284 -------------
 test/unit/com.blackberry.bbm.platform/BBMEvents.js |   78 ----
 test/unit/com.blackberry.bbm.platform/client.js    |  153 -------
 test/unit/com.blackberry.bbm.platform/index.js     |  418 --------------------
 test/unit/com.blackberry.connection/client.js      |   83 ----
 test/unit/com.blackberry.connection/index.js       |  152 -------
 test/unit/com.blackberry.identity/client.js        |   99 -----
 test/unit/com.blackberry.identity/index.js         |   96 -----
 test/unit/com.blackberry.invoke.card/client.js     |  260 ------------
 test/unit/com.blackberry.invoke.card/index.js      |  334 ----------------
 test/unit/com.blackberry.invoke/client.js          |  274 -------------
 test/unit/com.blackberry.invoke/index.js           |  390 ------------------
 .../unit/com.blackberry.invoke/invocationEvents.js |  100 -----
 test/unit/com.blackberry.invoked/client.js         |   79 ----
 test/unit/com.blackberry.invoked/index.js          |  132 -------
 .../com.blackberry.invoked/invocationEvents.js     |  106 -----
 test/unit/com.blackberry.io.filetransfer/client.js |  178 ---------
 test/unit/com.blackberry.io.filetransfer/index.js  |  237 -----------
 test/unit/com.blackberry.io/client.js              |   83 ----
 test/unit/com.blackberry.io/index.js               |   91 -----
 test/unit/com.blackberry.notification/client.js    |  182 ---------
 test/unit/com.blackberry.notification/index.js     |  232 -----------
 test/unit/com.blackberry.payment/client.js         |  313 ---------------
 test/unit/com.blackberry.payment/index.js          |  265 -------------
 .../com.blackberry.pim.calendar/CalendarEvent.js   |  240 -----------
 .../com.blackberry.pim.calendar/calendarUtils.js   |   61 ---
 test/unit/com.blackberry.pim.calendar/client.js    |  181 ---------
 test/unit/com.blackberry.pim.calendar/index.js     |  350 ----------------
 test/unit/com.blackberry.pim.contacts/Contact.js   |  227 -----------
 test/unit/com.blackberry.pim.contacts/client.js    |  359 -----------------
 .../com.blackberry.pim.contacts/contactUtils.js    |   81 ----
 test/unit/com.blackberry.pim.contacts/index.js     |  303 --------------
 test/unit/com.blackberry.push/client.js            |  414 -------------------
 test/unit/com.blackberry.push/index.js             |  126 ------
 test/unit/com.blackberry.sensors/client.js         |  102 -----
 test/unit/com.blackberry.sensors/index.js          |  129 ------
 test/unit/com.blackberry.sensors/sensorEvents.js   |  164 --------
 test/unit/com.blackberry.system/client.js          |  220 -----------
 test/unit/com.blackberry.system/index.js           |  336 ----------------
 test/unit/com.blackberry.ui.contextmenu/client.js  |  122 ------
 test/unit/com.blackberry.ui.contextmenu/index.js   |  219 ----------
 test/unit/com.blackberry.ui.cover/client.js        |   95 -----
 test/unit/com.blackberry.ui.cover/index.js         |  121 ------
 test/unit/com.blackberry.ui.dialog/client.js       |   70 ----
 test/unit/com.blackberry.ui.dialog/index.js        |  133 -------
 test/unit/com.blackberry.ui.toast/client.js        |   80 ----
 test/unit/com.blackberry.ui.toast/index.js         |   99 -----
 49 files changed, 4 insertions(+), 9143 deletions(-)
 delete mode 100755 test/unit/com.blackberry.app/client.js
 delete mode 100755 test/unit/com.blackberry.app/index.js
 delete mode 100755 test/unit/com.blackberry.bbm.platform/BBMEvents.js
 delete mode 100755 test/unit/com.blackberry.bbm.platform/client.js
 delete mode 100755 test/unit/com.blackberry.bbm.platform/index.js
 delete mode 100755 test/unit/com.blackberry.connection/client.js
 delete mode 100755 test/unit/com.blackberry.connection/index.js
 delete mode 100755 test/unit/com.blackberry.identity/client.js
 delete mode 100755 test/unit/com.blackberry.identity/index.js
 delete mode 100755 test/unit/com.blackberry.invoke.card/client.js
 delete mode 100755 test/unit/com.blackberry.invoke.card/index.js
 delete mode 100755 test/unit/com.blackberry.invoke/client.js
 delete mode 100755 test/unit/com.blackberry.invoke/index.js
 delete mode 100755 test/unit/com.blackberry.invoke/invocationEvents.js
 delete mode 100755 test/unit/com.blackberry.invoked/client.js
 delete mode 100755 test/unit/com.blackberry.invoked/index.js
 delete mode 100755 test/unit/com.blackberry.invoked/invocationEvents.js
 delete mode 100755 test/unit/com.blackberry.io.filetransfer/client.js
 delete mode 100755 test/unit/com.blackberry.io.filetransfer/index.js
 delete mode 100755 test/unit/com.blackberry.io/client.js
 delete mode 100755 test/unit/com.blackberry.io/index.js
 delete mode 100755 test/unit/com.blackberry.notification/client.js
 delete mode 100755 test/unit/com.blackberry.notification/index.js
 delete mode 100755 test/unit/com.blackberry.payment/client.js
 delete mode 100755 test/unit/com.blackberry.payment/index.js
 delete mode 100755 test/unit/com.blackberry.pim.calendar/CalendarEvent.js
 delete mode 100755 test/unit/com.blackberry.pim.calendar/calendarUtils.js
 delete mode 100755 test/unit/com.blackberry.pim.calendar/client.js
 delete mode 100755 test/unit/com.blackberry.pim.calendar/index.js
 delete mode 100755 test/unit/com.blackberry.pim.contacts/Contact.js
 delete mode 100755 test/unit/com.blackberry.pim.contacts/client.js
 delete mode 100755 test/unit/com.blackberry.pim.contacts/contactUtils.js
 delete mode 100755 test/unit/com.blackberry.pim.contacts/index.js
 delete mode 100755 test/unit/com.blackberry.push/client.js
 delete mode 100755 test/unit/com.blackberry.push/index.js
 delete mode 100755 test/unit/com.blackberry.sensors/client.js
 delete mode 100755 test/unit/com.blackberry.sensors/index.js
 delete mode 100755 test/unit/com.blackberry.sensors/sensorEvents.js
 delete mode 100755 test/unit/com.blackberry.system/client.js
 delete mode 100755 test/unit/com.blackberry.system/index.js
 delete mode 100755 test/unit/com.blackberry.ui.contextmenu/client.js
 delete mode 100755 test/unit/com.blackberry.ui.contextmenu/index.js
 delete mode 100755 test/unit/com.blackberry.ui.cover/client.js
 delete mode 100755 test/unit/com.blackberry.ui.cover/index.js
 delete mode 100755 test/unit/com.blackberry.ui.dialog/client.js
 delete mode 100755 test/unit/com.blackberry.ui.dialog/index.js
 delete mode 100755 test/unit/com.blackberry.ui.toast/client.js
 delete mode 100755 test/unit/com.blackberry.ui.toast/index.js

diff --git a/README.md b/README.md
index 15ce30b..8c5b83b 100755
--- a/README.md
+++ b/README.md
@@ -1,57 +1,11 @@
 #BlackBerry 10 Cordova Plugins
-This repo contains plugins for Apache Cordova that expose functionality of the BlackBerry 10 platform.
+This repo contains plugins for Apache Cordova that expose functionality of QNX CAR.
 
 ##Prerequisites
-1. Install [node and npm](http://nodejs.org/download/) and add to path.
-2. Install [BlackBerry Native SDK](https://bdsc.webapps.blackberry.com/native/).
-3. [*Windows*] Add git bin to PATH. i.e. `*Installation Directory*\bin`
-4. Install [jake] globally (npm install --global jake).
-5. Install [jshint] globall (npm install --global jshint).
+1. Install the [cordova-qnxcar](https://github.com/qnxcar/cordova-qnxcar) project
 
-##Setup and Build
-1. `git clone http://github.rim.net/webworks/BB10-WebWorks-Cordova.git`
-2. `cd BB10-WebWorks-Cordova`
-3. `npm install` to install dependencies
-4. `git checkout master`
-5. **Setup bbndk environment variables:** (must be done within each session, prior to jake)
-    - [*Mac/Linux*] `source *BBNDK installation directory*/bbndk-env.sh`
-    - [*Windows*] `*BBNDK installation directory*\bbndk-env.bat`
-6. Run `jake build` from the command prompt and check that there are no errors.
-
-##Running Tests
-1. `jake test`  - to run js tests using nodejs
-2. `jake hint`  - to run jshint on the JavaScript source
-3. `jake`   - default is to build, run tests and jshint
-
-*Note: To see a full list of commands available with jake, use `jake -T`.*
-
-##Dependencies
-1. cpplint is used for linting Cpp code. Source code is located under dependencies/cpplint
-2. JNEXT 1.0.8.3 is used to build extensions.
-Original source of JNEXT was downloaded from here - http://jnext.googlecode.com/files/jnext-src-1.0.8.3.zip
-Modifications are available in source code and located under dependencies/jnext_1_0_8_3
-
-## Authors
-* [Bryan Higgins](http://github.com/bryanhiggins)
-* [Chris Del Col](http://github.com/cdelcol)
-* [Daniel Audino](http://github.com/danielaudino)
-* [Danyi Lin](http://github.com/dylin)
-* [Derek Watson](http://github.com/derek-watson)
-* [Eric Li](http://github.com/ericleili)
-* [Eric Pearson](http://github.com/pagey)
-* [Erik Johnson](http://github.com/erikj54)
-* [Gord Tanner](http://github.com/gtanner)
-* [Hasan Ahmad](http://github.com/haahmad)
-* [Hoyoung Jang](http://github.com/hoyoungjang)
-* [Igor Shneur](http://github.com/ishneur)
-* [James Keshavarzi](http://github.com/jkeshavarzi)
-* [Jeffrey Heifetz](http://github.com/jeffheifetz)
-* [Nukul Bhasin](http://github.com/nukulb)
-* [Rosa Tse](http://github.com/rwmtse)
-* [Rowell Cruz](http://github.com/rcruz)
-* [Sergey Golod](http://github.com/tohman)
-* [Stephan Leroux](http://github.com/sleroux)
-* [Tracy Li](http://github.com/tracyli)
+##Setup 
+1. `git clone https://github.com/qnxcar/cordova-qnxcar-plugins.git`
 
 ## General Architecture
 
@@ -77,21 +31,3 @@ There is sample:  https://github.com/blackberry/WebWorks-Community-APIs/tree/mas
 
 For detailed docs please visit
 https://developer.blackberry.com/html5/documentation/creating_extensions_for_bb10_apps.html
-
-## Contributing
-**To contribute code to this repository you must be [signed up as an official contributor](http://blackberry.github.com/howToContribute.html).**
-
-1. Fork the **BB10-WebWorks-Cordova** repository
-2. Make the changes/additions to your fork
-3. Send a pull request from your fork back to the **BB10-WebWorks-Cordova** repository
-4. If you made changes to code which you own, send a message via github messages to one of the Committers listed below to have your code merged.
-
-## Committers
-* [Bryan Higgins](http://github.com/bryanhiggins)
-* [Chris Del Col](http://github.com/cdelcol)
-* [Jeffrey Heifetz](http://github.com/jeffheifetz)
-* [Nukul Bhasin](http://github.com/nukulb)
-
-## Other related Repos
- * [cordova-js](https://github.com/apache/cordova-js)
- * [cordova-blackberry10](https://github.com/apache/cordova-blackberry10)
diff --git a/test/unit/com.blackberry.app/client.js b/test/unit/com.blackberry.app/client.js
deleted file mode 100755
index 368ce12..0000000
--- a/test/unit/com.blackberry.app/client.js
+++ /dev/null
@@ -1,224 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
-*/
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.app",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    MockedChannel,
-    channelRegistry = {},
-    mockData = {
-        author: "testAuthor",
-        authorEmail: "testEmail",
-        authorURL: "testURL",
-        copyright: "testCopyright",
-        description: {
-            "default": "testDescription",
-            "fr-FR": "testDescription-FR",
-            "en": "testDescription-en"
-        },
-        id : "testId",
-        license: "testLicense",
-        licenseURL: "testLicenseURL",
-        name: {
-            "default": "testName",
-            "fr-FR": "testName-FR",
-            "en": "testName-EN"
-        },
-        version: "testVersion",
-        orientation: "portrait-primary",
-        windowState: "fullscreen"
-    };
-
-describe("app client", function () {
-
-    beforeEach(function () {
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy().andCallFake(function (success, fail, ID, func) {
-                if (func === "getReadOnlyFields") {
-                    success(mockData);
-                }
-            }),
-            require: function () {
-                return cordova.exec;
-            },
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andCallFake(function (eventName) {
-                channelRegistry[eventName] = new MockedChannel();
-                return channelRegistry[eventName];
-            }),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent")
-        };
-        GLOBAL.window = {
-            orientation: 0,
-            cordova: GLOBAL.cordova
-        };
-        GLOBAL.navigator = {
-            language: ""
-        };
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-        delete GLOBAL.navigator;
-        client = null;
-    });
-
-    it("exec should have been called once for all app fields", function () {
-        expect(window.cordova.exec).toHaveBeenCalled();
-        expect(window.cordova.exec.callCount).toEqual(1);
-    });
-
-    describe("author", function () {
-        it("should be populated", function () {
-            expect(client.author === mockData.author);
-        });
-    });
-
-    describe("authorEmail", function () {
-        it("should be populated", function () {
-            expect(client.authorEmail === mockData.authorEmail);
-        });
-    });
-
-    describe("authorURL", function () {
-        it("should be populated", function () {
-            expect(client.authorURL === mockData.authorURL);
-        });
-    });
-
-    describe("copyright", function () {
-        it("should be populated", function () {
-            expect(client.copyright === mockData.copyright);
-        });
-    });
-
-    describe("description", function () {
-        it("should be populated with default localized value", function () {
-            navigator.language = "IDoNotExist";
-            expect(client.description === mockData.description["default"]);
-        });
-
-        it("should be populated with localized value when provided", function () {
-            navigator.language = "fr-FR";
-            expect(client.description === mockData.description["fr-FR"]);
-        });
-
-        it("should be populated with localized language value, when region value not available", function () {
-            navigator.language = "en-FR";
-            expect(client.description === mockData.description["en"]);
-        });
-    });
-
-    describe("id", function () {
-        it("should be populated", function () {
-            expect(client.id === mockData.id);
-        });
-    });
-
-    describe("license", function () {
-        it("should be populated", function () {
-            expect(client.license === mockData.license);
-        });
-    });
-
-    describe("licenseURL", function () {
-        it("should be populated", function () {
-            expect(client.licenseURL === mockData.licenseURL);
-        });
-    });
-
-    describe("name", function () {
-        it("should be populated with default localized value", function () {
-            GLOBAL.window.navigator = {language: "IDoNotExist"};
-            expect(client.name === mockData.name["default"]);
-        });
-
-        it("should be populated with localized value when provided", function () {
-            GLOBAL.window.navigator = {language: "fr-FR"};
-            expect(client.name === mockData.name["fr-FR"]);
-        });
-
-        it("should be populated with localized language value, when region value not availble", function () {
-            GLOBAL.window.navigator = {language: "en-FR"};
-            expect(client.name === mockData.name["en"]);
-        });
-    });
-
-    describe("version", function () {
-        it("should be populated", function () {
-            expect(client.version === mockData.version);
-        });
-    });
-
-    describe("minimize", function () {
-        it("should call exec", function () {
-            client.minimize();
-            expect(window.cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "minimize");
-        });
-    });
-
-    describe("exit", function () {
-        it("should call exec", function () {
-            client.exit();
-            expect(window.cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "exit");
-        });
-    });
-
-    describe("orientation", function () {
-        it("should be populated", function () {
-            expect(client.orientation === mockData.orientation);
-        });
-    });
-
-    describe("windowState", function () {
-        it("should be populated", function () {
-            expect(client.windowState === mockData.windowState);
-        });
-    });
-    
-    describe("lockOrientation", function () {
-        it("should call exec", function () {
-            client.lockOrientation('portrait-primary', false);
-            expect(window.cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "lockOrientation", { orientation: 'portrait-primary', receiveRotateEvents: false });
-        });
-    });
-
-    describe("unlockOrientation", function () {
-        it("should call exec", function () {
-            client.unlockOrientation();
-            expect(window.cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "unlockOrientation");
-        });
-    });
-
-    describe("rotate", function () {
-        it("should call exec", function () {
-            client.rotate('landscape');
-            expect(window.cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "rotate", {orientation: 'landscape'});
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.app/index.js b/test/unit/com.blackberry.app/index.js
deleted file mode 100755
index 7341f0a..0000000
--- a/test/unit/com.blackberry.app/index.js
+++ /dev/null
@@ -1,284 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.app/",
-    _libDir = __dirname + "/../../../lib/",
-    events = require(_libDir + "event"),
-    index,
-    mockedMinimize,
-    mockedExit,
-    mockedRotate,
-    mockedLockRotation,
-    mockedUnlockRotation,
-    mockedWindowState,
-    mockedQnx,
-    mockedPluginResult,
-    config;
-
-function getWebPlatformEventName(e) {
-    switch (e) {
-    case "pause":
-        return "inactive";
-    case "resume":
-        return "active";
-    case "windowstatechanged":
-        return "stateChange";
-    case "orientationchange":
-        return [ 'rotate', 'rotateWhenLocked' ];
-    default:
-        return e;
-    }
-}
-
-
-describe("app index", function () {
-
-    beforeEach(function () {
-        config = require(_libDir + "config");
-        index = require(_apiDir + "index");
-        mockedMinimize = jasmine.createSpy("minimize");
-        mockedExit = jasmine.createSpy("exit");
-        mockedRotate = jasmine.createSpy();
-        mockedLockRotation = jasmine.createSpy();
-        mockedUnlockRotation = jasmine.createSpy();
-        mockedWindowState = jasmine.createSpy("windowState");
-        mockedQnx = {
-            webplatform: {
-                getApplication: function () {
-                    return {
-                        minimizeWindow: mockedMinimize,
-                        exit: mockedExit,
-                        rotate: mockedRotate,
-                        lockRotation: mockedLockRotation,
-                        unlockRotation: mockedUnlockRotation,
-                        windowState: mockedWindowState
-                    };
-                }
-            }
-        };
-        GLOBAL.window = {
-            qnx: mockedQnx
-        };
-        GLOBAL.qnx = mockedQnx;
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        config = null;
-        index = null;
-        mockedMinimize = null;
-        mockedExit = null;
-        mockedRotate = null;
-        mockedLockRotation = null;
-        mockedUnlockRotation = null;
-        mockedWindowState = null;
-        mockedQnx = null;
-        delete GLOBAL.window;
-        delete GLOBAL.qnx;
-        config = null;
-        delete require.cache[require.resolve(_libDir + "config")];
-        index = null;
-        delete require.cache[require.resolve(_apiDir + "index")];
-        mockedPluginResult = null;
-        delete GLOBAL.PluginResult;
-    });
-
-    describe("getReadOnlyFields", function () {
-        it("can call ok", function () {
-            var success = jasmine.createSpy(),
-                expectedReturn = {
-                    author : "Me",
-                    authorEmail : "guocat@gmail.com",
-                    authorURL : "http://bbtools_win7_01/yui",
-                    copyright : "@Rebecca",
-                    description : "this is the description",
-                    id : "",
-                    license : "This is a license",
-                    licenseURL : "",
-                    name : "wwTest",
-                    version : "1.0.0.0"
-                };
-            index.getReadOnlyFields(success, null, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(expectedReturn, false);
-        });
-    });
-
-    describe("lockOrientation", function () {
-        it("calls webplatform rotate and lock methods", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                mockArgs = { orientation : encodeURIComponent("\"landscape-primary\""), recieveRotateEvents: undefined };
-
-            index.lockOrientation(success, fail, mockArgs, null);
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(true, false);
-            expect(mockedRotate).toHaveBeenCalledWith("left_up");
-            expect(mockedLockRotation).toHaveBeenCalledWith(true);
-        });
-        it("allows recieveRotateEvents to be set to false", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                mockArgs = { recieveRotateEvents: false, orientation : encodeURIComponent("\"landscape-primary\"") };
-
-            index.lockOrientation(success, fail, mockArgs, null);
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(true, false);
-            expect(mockedRotate).toHaveBeenCalledWith("left_up");
-            expect(mockedLockRotation).toHaveBeenCalledWith(false);
-        });
-    });
-
-    describe("unlockOrientation", function () {
-        it("calls webplatform unlockRotation method", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-
-            index.unlockOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            expect(mockedUnlockRotation).toHaveBeenCalled();
-        });
-    });
-
-    describe("rotate", function () {
-        it("calls webplatform rotate method", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-
-            index.rotate(success, fail, {orientation: encodeURIComponent("\"landscape\"")}, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            expect(mockedRotate).toHaveBeenCalledWith('left_up');
-        });
-    });
-
-    describe("currentOrientation", function () {
-        it("converts 0 degrees from window.orientation to portrait-primary", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-            window.orientation = 0;
-
-            index.currentOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("portrait-primary", false);
-        });
-
-        it("converts 90 degrees from window.orientation to portrait-primary", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-            window.orientation = 90;
-
-            index.currentOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("landscape-secondary", false);
-        });
-
-        it("converts 180 degrees from window.orientation to portrait-primary", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-            window.orientation = 180;
-
-            index.currentOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("portrait-secondary", false);
-        });
-
-        it("converts -90 degrees from window.orientation to portrait-primary", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-            window.orientation = -90;
-
-            index.currentOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("landscape-primary", false);
-        });
-
-        it("converts 270 degrees from window.orientation to portrait-primary", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy();
-            window.orientation = 270;
-            index.currentOrientation(success, fail, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("landscape-primary", false);
-        });
-    });
-
-    describe("minimize", function () {
-        it("can call minimize on the qnx.weblplatform Application", function () {
-            var success = jasmine.createSpy();
-            index.minimize(success, null, null, null);
-            expect(mockedMinimize).toHaveBeenCalled();
-        });
-    });
-
-    describe("exit", function () {
-        it("can call exit on the qnx.weblplatform Application", function () {
-            var success = jasmine.createSpy();
-            index.exit(success, null, null, null);
-            expect(mockedExit).toHaveBeenCalled();
-        });
-    });
-
-    describe("windowState", function () {
-        it("can call ok with windowState", function () {
-            var success = jasmine.createSpy();
-            index.windowState(success, null, null, null);
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(mockedWindowState, false);
-        });
-    });
-
-    describe("events", function () {
-
-        var noop = function () {};
-
-        it("startEvent", function () {
-            var applicationEvents = require(_libDir + "events/applicationEvents"),
-                eventName = "windowstatechanged",
-                env = {webview: {id: 42 }};
-
-            spyOn(applicationEvents, "addEventListener");
-            spyOn(applicationEvents, "removeEventListener");
-
-            index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.addEventListener).toHaveBeenCalledWith("stateChange", jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-
-            //Will remove if adding twice
-            index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.removeEventListener).toHaveBeenCalledWith("stateChange", jasmine.any(Function));
-        });
-
-        it("stopEvent", function () {
-            var applicationEvents = require(_libDir + "events/applicationEvents"),
-                eventName = "windowstatechanged",
-                env = {webview: {id: 42 }};
-
-            spyOn(applicationEvents, "addEventListener");
-            spyOn(applicationEvents, "removeEventListener");
-
-            index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.removeEventListener).toHaveBeenCalledWith("stateChange", jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-
-            //Will not stop an unstarted event
-            index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(mockedPluginResult.error).toHaveBeenCalledWith("Underlying listener for " + eventName + " never started for webview " + env.webview.id);
-        });
-
-    });
-
-});
diff --git a/test/unit/com.blackberry.bbm.platform/BBMEvents.js b/test/unit/com.blackberry.bbm.platform/BBMEvents.js
deleted file mode 100755
index 7850274..0000000
--- a/test/unit/com.blackberry.bbm.platform/BBMEvents.js
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.bbm.platform/",
-    BBMEvents;
-
-describe("bbm.platform BBMEvents", function () {
-    beforeEach(function () {
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("1"),
-            invoke: jasmine.createSpy().andReturn(2),
-            registerEvents: jasmine.createSpy().andReturn(true),
-            BBM: function () {}
-        };
-        BBMEvents = require(_apiDir + "BBMEvents");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        BBMEvents = null;
-    });
-
-    it("checks that JNEXT was not initialized on require", function () {
-        expect(JNEXT.require).not.toHaveBeenCalledWith("libbbm");
-        expect(JNEXT.createObject).not.toHaveBeenCalledWith("libbbm.BBM");
-    });
-
-    describe("onaccesschanged event", function () {
-        describe("addEventListener", function () {
-            var trigger = function () {};
-
-            it("invokes JNEXT startEvents for 'onaccesschanged' event", function () {
-                BBMEvents.addEventListener("onaccesschanged", trigger);
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startEvents");
-            });
-        });
-
-        describe("removeEventListener", function () {
-            it("invokes JNEXT stopEvents for 'onaccesschanged' event", function () {
-                BBMEvents.removeEventListener("onaccesschanged");
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopEvents");
-            });
-        });
-    });
-
-    describe("onupdate event", function () {
-        describe("addEventListener", function () {
-            var trigger = function () {};
-
-            it("invokes JNEXT startContactEvents for 'onupdate' event", function () {
-                BBMEvents.addEventListener("onupdate", trigger);
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startContactEvents");
-            });
-        });
-
-        describe("removeEventListener", function () {
-            it("invokes JNEXT stopContactEvents for 'onupdate' event", function () {
-                BBMEvents.removeEventListener("onupdate");
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopContactEvents");
-            });
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.bbm.platform/client.js b/test/unit/com.blackberry.bbm.platform/client.js
deleted file mode 100755
index 22d120a..0000000
--- a/test/unit/com.blackberry.bbm.platform/client.js
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
-*/
-
-var root = __dirname + "/../../../",
-    apiDir = root + "plugin/com.blackberry.bbm.platform/",
-    _ID = "com.blackberry.bbm.platform",
-    client = null,
-    MockedChannel,
-    mockedCordova;
-
-describe("bbm.platform client", function () {
-    beforeEach(function () {
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-
-        mockedCordova = {
-            exec: jasmine.createSpy(),
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andReturn(new MockedChannel()),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent"),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-
-        GLOBAL.window = {
-            cordova: mockedCordova
-        };
-
-        GLOBAL.cordova = mockedCordova;
-
-        client = require(apiDir + "www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(apiDir + "www/client")];
-    });
-
-    describe("bbm.platform.register", function () {
-        it("registers an application", function () {
-            var options = { uuid : "blah" };
-
-            client.register(options);
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "register", { "options" : options });
-        });
-    });
-
-    describe("bbm.platform.self", function () {
-        it("getDisplayPicture calls exec", function () {
-            client.self.getDisplayPicture(function (img) { });
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/getDisplayPicture", {});
-        });
-
-        it("setStatus calls exec", function () {
-            client.self.setStatus("available", "Hello");
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/setStatus", { "status" : "available", "statusMessage" : "Hello" });
-        });
-
-        it("setPersonalMessage calls exec", function () {
-            client.self.setPersonalMessage("Hello World");
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/setPersonalMessage", { "personalMessage" : "Hello World" });
-        });
-
-        it("setDisplayPicture calls exec", function () {
-            client.self.setDisplayPicture("/tmp/avatar.gif");
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/setDisplayPicture", { "displayPicture" : "/tmp/avatar.gif"});
-        });
-    });
-
-    describe("bbm.platform.self.profilebox", function () {
-        it("addItem calls exec", function () {
-            var args = {
-                    options : {
-                        text : "hello",
-                        cookie : "hellocookie"
-                    }
-                };
-
-            client.self.profilebox.addItem(args.options, function (item) { });
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/addItem", args);
-        });
-
-        it("removeItem calls exec", function () {
-            var args = {
-                    options : {
-                        id : "hello123"
-                    }
-                };
-
-            client.self.profilebox.removeItem(args.options);
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/removeItem", args);
-        });
-
-        it("clearItems calls exec", function () {
-            client.self.profilebox.clearItems();
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/clearItems", undefined);
-        });
-
-        it("registerIcon calls exec", function () {
-            var args = {
-                    options : {
-                        text : "hello",
-                        cookie : "hellocookie",
-                        iconId : 123
-                    }
-                };
-
-            client.self.profilebox.registerIcon(args.options);
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/registerIcon", args);
-        });
-
-        it("accessible property calls exec", function () {
-            var accessible = client.self.profilebox.accessible;
-            accessible = accessible;
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/getAccessible", undefined);
-        });
-
-        it("item property calls exec", function () {
-            var item = client.self.profilebox.item;
-            item = item;
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "self/profilebox/getItems", undefined);
-        });
-    });
-
-    describe("bbm.platform.users", function () {
-        it("inviteToDownload calls exec", function () {
-            client.users.inviteToDownload();
-            expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "users/inviteToDownload", undefined);
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.bbm.platform/index.js b/test/unit/com.blackberry.bbm.platform/index.js
deleted file mode 100755
index dd90b14..0000000
--- a/test/unit/com.blackberry.bbm.platform/index.js
+++ /dev/null
@@ -1,418 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.bbm.platform/",
-    _libDir = __dirname + "/../../../lib/",
-    MockPluginResult,
-    index = null,
-    context = null;
-
-describe("bbm.platform index", function () {
-
-    beforeEach(function () {
-
-        MockPluginResult = function () {};
-        MockPluginResult.prototype.callbackOk = jasmine.createSpy("PluginResult.callbackOk");
-        MockPluginResult.prototype.callbackError = jasmine.createSpy("PluginResult.callbackError");
-        MockPluginResult.prototype.ok = jasmine.createSpy("PluginResult.ok");
-        MockPluginResult.prototype.error = jasmine.createSpy("PluginResult.error");
-        MockPluginResult.prototype.noResult = jasmine.createSpy("PluginResult.noResult");
-
-        GLOBAL.PluginResult = MockPluginResult;
-
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("1"),
-            invoke: jasmine.createSpy().andReturn(2),
-            registerEvents: jasmine.createSpy().andReturn(true),
-            getgid: jasmine.createSpy().andReturn(jasmine.any(String))
-        };
-
-        context = require(_apiDir + "BBMEvents.js");
-        spyOn(context, "addEventListener");
-        spyOn(context, "removeEventListener");
-
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.PluginResult;
-        delete GLOBAL.JNEXT;
-        index = null;
-        delete require.cache[require.resolve(_apiDir + "index")];
-    });
-
-    describe("bbm.platform", function () {
-        describe("register", function () {
-            it("can call success", function () {
-                var options = { "uuid": "464d3ba0-caba-11e1-9b23-0800200c9a66" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.register(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "register " + JSON.stringify(options));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call fail", function () {
-                var options = { "uuid": "9b23-0800200c9a66" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.register(null, null, args, null);
-
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith("UUID is not valid length");
-            });
-        });
-    });
-
-    describe("bbm.platform.self", function () {
-        describe("self profile", function () {
-
-            it("appVersion", function () {
-                var success = jasmine.createSpy();
-
-                index.self.appVersion(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "appVersion");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("bbmsdkVersion", function () {
-                var success = jasmine.createSpy();
-
-                index.self.bbmsdkVersion(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "bbmsdkVersion");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("displayName", function () {
-                var success = jasmine.createSpy();
-
-                index.self.displayName(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "displayName");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("handle", function () {
-                var success = jasmine.createSpy();
-
-                index.self.handle(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "handle");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("personalMessage", function () {
-                var success = jasmine.createSpy();
-
-                index.self.personalMessage(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "personalMessage");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("ppid", function () {
-                var success = jasmine.createSpy();
-
-                index.self.ppid(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "ppid");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("status", function () {
-                var success = jasmine.createSpy();
-
-                index.self.status(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "status");
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("statusMessage", function () {
-                var success = jasmine.createSpy();
-
-                index.self.statusMessage(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getProfile " + "statusMessage");
-                expect(success).toHaveBeenCalled();
-            });
-        });
-
-        describe("getDisplayPicture", function () {
-            it("can call getDisplayPicture", function () {
-                var args = {};
-
-                index.self.getDisplayPicture(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.getDisplayPicture");
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-        });
-
-        describe("setStatus", function () {
-            it("can call setStatus and succeed", function () {
-                var success = jasmine.createSpy(),
-                    args,
-                    status = "available",
-                    statusMessage = "Hello World";
-
-                status = encodeURIComponent(status);
-                statusMessage = encodeURIComponent(statusMessage);
-                args = { "status": JSON.stringify(status), "statusMessage": JSON.stringify(statusMessage) };
-
-                index.self.setStatus(success, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.setStatus " + JSON.stringify(args));
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("can call setStatus and fail", function () {
-                var fail = jasmine.createSpy(),
-                    args,
-                    status = "hello",
-                    statusMessage = "";
-
-                status = encodeURIComponent(status);
-                statusMessage = encodeURIComponent(statusMessage);
-                args = { "status": JSON.stringify(status), "statusMessage": JSON.stringify(statusMessage) };
-
-                index.self.setStatus(null, fail, args, null);
-
-                expect(fail).toHaveBeenCalled();
-            });
-        });
-
-        describe("setPersonalMessage", function () {
-            it("can call setPersonalMessage and succeed", function () {
-                var success = jasmine.createSpy(),
-                    args,
-                    personalMessage = "Hello World";
-
-                args = { "personalMessage": encodeURIComponent(JSON.stringify(personalMessage)) };
-
-                index.self.setPersonalMessage(success, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.setPersonalMessage " + personalMessage);
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("can call setPersonalMessage and fail", function () {
-                var fail = jasmine.createSpy(),
-                    args,
-                    personalMessage = "";
-
-                args = { "personalMessage": encodeURIComponent(JSON.stringify(personalMessage)) };
-
-                index.self.setPersonalMessage(null, fail, args, null);
-
-                expect(fail).toHaveBeenCalled();
-            });
-        });
-
-        describe("setDisplayPicture", function () {
-            it("can call setDisplayPicture and succeed", function () {
-                var displayPicture = "/tmp/avatar.gif",
-                    args = {"displayPicture": encodeURIComponent(JSON.stringify(displayPicture))};
-
-                index.self.setDisplayPicture(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.setDisplayPicture " + displayPicture);
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call setDisplayPicture and fail", function () {
-                var args,
-                    displayPicture = "";
-
-                args = {"displayPicture": encodeURIComponent(JSON.stringify(displayPicture))};
-
-                index.self.setDisplayPicture(null, null, args, null);
-
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith(jasmine.any(String));
-            });
-        });
-    });
-
-    describe("bbm.platform.users.profilebox", function () {
-        describe("addItem", function () {
-            it("can call addItem and succeed", function () {
-                var options = { "text": "hello", "cookie": "hello" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.addItem(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.profilebox.addItem " + JSON.stringify(options));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call addItem and fail", function () {
-                var options = { "text": "", "cookie": "" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.addItem(null, null, args, null);
-
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith(jasmine.any(String));
-            });
-        });
-
-        describe("removeItem", function () {
-            it("can call removeItem and succeed", function () {
-                var options = { "text": "", "cookie" : "", "id": "abc123" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.removeItem(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.profilebox.removeItem " + JSON.stringify(options));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call removeItem and fail", function () {
-                var options = { "text": "", "cookie": "" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.removeItem(null, null, args, null);
-
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith(jasmine.any(String));
-            });
-        });
-
-        describe("clearItems", function () {
-            it("can call clearItems and succeed", function () {
-                var success = jasmine.createSpy();
-
-                index.self.profilebox.clearItems(success, null, null, null);
-
-                expect(success).toHaveBeenCalled();
-            });
-        });
-
-        describe("registerIcon", function () {
-            it("can call registerIcon and succeed", function () {
-                var options = { "icon": "/tmp/icon.png", "iconId": 123 },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.registerIcon(null, null, args, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.profilebox.registerIcon " + JSON.stringify(options));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call registerIcon and fail", function () {
-                var options = { "icon": "" },
-                    args = { "options": encodeURIComponent(JSON.stringify(options)) };
-
-                index.self.profilebox.registerIcon(null, null, args, null);
-
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith(jasmine.any(String));
-            });
-        });
-
-        describe("getAccessible", function () {
-            it("can call getAccessible and succeed", function () {
-                var success = jasmine.createSpy();
-
-                index.self.profilebox.getAccessible(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.profilebox.getAccessible");
-                expect(success).toHaveBeenCalled();
-            });
-        });
-
-        describe("getItems", function () {
-            it("can call getItems and succeed", function () {
-                var success = jasmine.createSpy();
-
-                index.self.profilebox.getItems(success, null, null, null);
-
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "self.profilebox.getItems");
-                expect(success).toHaveBeenCalled();
-            });
-        });
-    });
-
-    describe("bbm.platform.users", function () {
-        beforeEach(function () {
-            GLOBAL.window = {};
-            GLOBAL.qnx = {
-                webplatform: {
-                    getApplication: function () {
-                        return {
-                            cards: {
-                                bbm: {
-                                    inviteToDownload: {
-                                        open: function (details, done, cancel, callback) {
-                                            callback();
-                                        }
-                                    }
-                                }
-                            }
-                        };
-                    }
-                }
-            };
-        });
-
-        afterEach(function () {
-            delete GLOBAL.window;
-            delete GLOBAL.qnx;
-        });
-
-        it("calls users inviteToDownload", function () {
-            var success = jasmine.createSpy("success"),
-                fail = jasmine.createSpy("fail");
-
-            index.users.inviteToDownload(success, fail, null);
-            expect(success).toHaveBeenCalled();
-            expect(fail).not.toHaveBeenCalled();
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "users.inviteToDownload");
-        });
-    });
-
-    describe("bbm platform events", function () {
-
-        describe("onaccesschanged", function () {
-            it("can be registered, triggered and unregistered", function () {
-                var eventName = "onaccesschanged",
-                    args = { "eventName": encodeURIComponent(JSON.stringify(eventName)) },
-                    env = { webview: { id: 42} },
-                    trigger;
-
-                context.addEventListener.andCallFake(function (eventName, listener) {
-                    trigger = listener;
-                });
-
-
-                index.startEvent(null, null, args, env);
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(context.addEventListener).toHaveBeenCalledWith(eventName, jasmine.any(Function));
-
-                trigger({});
-                expect(MockPluginResult.prototype.callbackOk).toHaveBeenCalled();
-
-                index.stopEvent(null, null, args, env);
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalledWith(true);
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(context.removeEventListener).toHaveBeenCalledWith(eventName, jasmine.any(Function));
-            });
-
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.connection/client.js b/test/unit/com.blackberry.connection/client.js
deleted file mode 100755
index dd310f5..0000000
--- a/test/unit/com.blackberry.connection/client.js
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.connection",
-    _ID = "com.blackberry.connection",
-    client,
-    channelRegistry = {},
-    MockedChannel;
-
-describe("connection", function () {
-    beforeEach(function () {
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy().andCallFake(function (success) {
-                success("wifi");
-            }),
-            require: function () {
-                return cordova.exec;
-            },
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andCallFake(function (eventName) {
-                channelRegistry[eventName] = new MockedChannel();
-                return channelRegistry[eventName];
-            }),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent")
-        };
-        client = require(_apiDir + "/www/client");
-        spyOn(console, "error");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-    });
-
-    describe("connection constants", function () {
-
-        it("defines constants", function () {
-            expect(client["UNKNOWN"]).toBeDefined();
-            expect(client["ETHERNET"]).toBeDefined();
-            expect(client["WIFI"]).toBeDefined();
-            expect(client["BLUETOOTH_DUN"]).toBeDefined();
-            expect(client["USB"]).toBeDefined();
-            expect(client["VPN"]).toBeDefined();
-            expect(client["BB"]).toBeDefined();
-            expect(client["CELL_4G"]).toBeDefined();
-            expect(client["NONE"]).toBeDefined();
-            expect(client["CELL_2G"]).toBeDefined();
-            expect(client["CELL_3G"]).toBeDefined();
-        });
-    });
-
-    describe("connection.type", function () {
-        it("calls exec and equals to exec return value", function () { 
-            expect(client.type).toEqual("wifi");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "type");
-        });
-
-        it("return UNKNOWN if exec throws error", function () {
-            cordova.exec.andThrow("Too bad"); 
-            expect(client.type).toEqual("unknown");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "type");
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.connection/index.js b/test/unit/com.blackberry.connection/index.js
deleted file mode 100755
index 70ecda6..0000000
--- a/test/unit/com.blackberry.connection/index.js
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.connection/",
-    _libDir = __dirname + "/../../../lib/",
-    deviceEvents = require(_libDir + "events/deviceEvents"),
-    mockedQnx,
-    mockedPluginResult,
-    index;
-
-describe("connection index", function () {
-    beforeEach(function () {
-        GLOBAL.qnx = mockedQnx = {
-            webplatform: {
-                device: {
-                    activeConnection: {
-                        type: 'wifi',
-                        technology: ''
-                    }
-                }
-            }
-        };
-        GLOBAL.window = { 
-            qnx: mockedQnx
-        };
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult"),
-            callbackOk: jasmine.createSpy("PluginResult.callbackOk")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.qnx;
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-        mockedPluginResult = null;
-    });
-
-    describe("connection", function () {
-        describe("type", function () {
-            it("can call success", function () {
-                var success = jasmine.createSpy();
-
-                index.type(success);
-
-                expect(mockedPluginResult.ok).toHaveBeenCalledWith("wifi", false);
-            });
-
-            it("can call fail", function () {
-                var fail = jasmine.createSpy();
-                delete mockedQnx.webplatform.device;
-
-                index.type(null, fail, null, null);
-
-                expect(mockedPluginResult.error).toHaveBeenCalledWith(jasmine.any(Object), false);
-                expect(mockedPluginResult.error.calls[0].args[0].message).toEqual("Cannot read property 'activeConnection' of undefined");
-            });
-
-            it('maps device connection types to constants', function () {
-                var map = {
-                    'wired': 'ethernet',
-                    'wifi': 'wifi',
-                    'bluetooth_dun': 'bluetooth_dun',
-                    'usb': 'usb',
-                    'vpn': 'vpn',
-                    'bb': 'rim-bb',
-                    'unknown': 'unknown',
-                    'none': 'none',
-                };
-                Object.getOwnPropertyNames(map).forEach(function (type) {
-                    var success = jasmine.createSpy();
-                    mockedQnx.webplatform.device.activeConnection.type = type;
-                    index.type(success);
-                    expect(mockedPluginResult.ok).toHaveBeenCalledWith(map[type], false);
-                });
-            });
-
-            it('maps cellular technologies to appropriate constants', function () {
-                var map = {
-                    'edge': '2g',
-                    'evdo': '3g',
-                    'umts': '3g',
-                    'lte': '4g'
-                };
-
-                mockedQnx.webplatform.device.activeConnection.type = 'cellular';
-                Object.getOwnPropertyNames(map).forEach(function (technology) {
-                    var success = jasmine.createSpy();
-                    mockedQnx.webplatform.device.activeConnection.technology = technology;
-                    index.type(success);
-                    expect(mockedPluginResult.ok).toHaveBeenCalledWith(map[technology], false);
-                });
-            });
-        });
-
-        describe("connectionChange", function () {
-
-            var noop = function () {};
-
-            it("startEvent", function () {
-                var eventName = "connectionchange",
-                    env = {webview: {id: 42 }};
-
-                spyOn(deviceEvents, "addEventListener");
-                spyOn(deviceEvents, "removeEventListener");
-
-                index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-                expect(deviceEvents.addEventListener).toHaveBeenCalledWith("connectionChange", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-
-                //Will remove if adding twice
-                index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-                expect(deviceEvents.removeEventListener).toHaveBeenCalledWith("connectionChange", jasmine.any(Function));
-            });
-
-            it("stopEvent", function () {
-                var eventName = "connectionchange",
-                    env = {webview: {id: 42 }};
-
-                spyOn(deviceEvents, "addEventListener");
-                spyOn(deviceEvents, "removeEventListener");
-
-                index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-                index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-                expect(deviceEvents.removeEventListener).toHaveBeenCalledWith("connectionChange", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-
-                //Will not stop an unstarted event
-                index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-                expect(mockedPluginResult.error).toHaveBeenCalledWith("Underlying listener for " + eventName + " never started for webview " + env.webview.id);
-            });
-
-        });
-
-    });
-});
diff --git a/test/unit/com.blackberry.identity/client.js b/test/unit/com.blackberry.identity/client.js
deleted file mode 100755
index 3d6e3f8..0000000
--- a/test/unit/com.blackberry.identity/client.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
-  Licensed to the Apache Software Foundation (ASF) under one
-  or more contributor license agreements.  See the NOTICE file
-  distributed with this work for additional information
-  regarding copyright ownership.  The ASF licenses this file
-  to you under the Apache License, Version 2.0 (the
-  "License"); you may not use this file except in compliance
-  with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing,
-  software distributed under the License is distributed on an
-  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  KIND, either express or implied.  See the License for the
-  specific language governing permissions and limitations
-  under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.identity",
-    _ID = "com.blackberry.identity",
-    anyFunc = jasmine.any(Function),
-    client;
-
-describe("identity client", function () {
-
-    describe("when user has specified correct permission", function () {
-
-        beforeEach(function () {
-            GLOBAL.cordova = {
-                exec: jasmine.createSpy().andCallFake(function (success, fail, service, action) {
-                    var result = "Unsupported action";
-                    if (action === "getFields") {
-                        result = {
-                            uuid: "0x12345678",
-                            IMSI: "310150123456789",
-                            IMEI: "AA-BBBBBB-CCCCCC-D"
-                        };
-                    }
-                    success(result);
-                }),
-                require: function () {
-                    return cordova.exec;
-                }
-            };
-            client = require(_apiDir + "/www/client");
-        });
-
-        afterEach(function () {
-            delete require.cache[require.resolve(_apiDir + "/www/client")];
-            client = null;
-            delete GLOBAL.cordova;
-        });
-
-        it("exec should have been called once for all fields", function () {
-            expect(cordova.exec.callCount).toEqual(1);
-        });
-
-        it("uuid should call exec and value should be defined", function () {
-            expect(cordova.exec).toHaveBeenCalledWith(anyFunc, anyFunc, _ID, "getFields", null);
-            expect(cordova.exec).not.toHaveBeenCalledWith(anyFunc, anyFunc, _ID, "uuid", null);
-            expect(client.uuid).toEqual("0x12345678");
-        });
-
-        it("IMSI value should be defined", function () {
-            expect(cordova.exec).not.toHaveBeenCalledWith(anyFunc, anyFunc, _ID, "IMSI", null);
-            expect(client.IMSI).toEqual("310150123456789");
-        });
-
-        it("IMSI value should be defined", function () {
-            expect(cordova.exec).not.toHaveBeenCalledWith(anyFunc, anyFunc, _ID, "IMEI", null);
-            expect(client.IMEI).toEqual("AA-BBBBBB-CCCCCC-D");
-        });
-    });
-
-    describe("when user hasn't specified correct permission", function () {
-        beforeEach(function () {
-            GLOBAL.cordova = {
-                exec: jasmine.createSpy().andThrow("Cannot read PPS object"),
-                require: function () {
-                    return cordova.exec;
-                }
-            };
-            client = require(_apiDir + "/www/client");
-        });
-
-        afterEach(function () {
-            delete require.cache[require.resolve(_apiDir + "/www/client")];
-            delete GLOBAL.cordova;
-        });
-
-        it("uuid should call exec and catch error and return null", function () {
-            var uuid = client.uuid;
-            expect(uuid).toEqual(null);
-            expect(cordova.exec).toHaveBeenCalledWith(anyFunc, anyFunc, _ID, "getFields", null);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.identity/index.js b/test/unit/com.blackberry.identity/index.js
deleted file mode 100755
index 70a232a..0000000
--- a/test/unit/com.blackberry.identity/index.js
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.identity/",
-    mockedPluginResult,
-    index;
-
-describe("identity index", function () {
-    beforeEach(function () {
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        index = null;
-    });
-
-    describe("getFields", function () {
-        beforeEach(function () {
-            GLOBAL.window = {
-                qnx: {
-                    webplatform: {
-                        device: {
-                        }
-                    }
-                }
-            };
-            mockedPluginResult = {
-                ok: jasmine.createSpy("PluginResult.ok"),
-                error: jasmine.createSpy("PluginResult.error"),
-                noResult: jasmine.createSpy("PluginResult.noResult"),
-                callbackOk: jasmine.createSpy("PluginResult.callbackOk")
-            };
-            GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        });
-
-        afterEach(function () {
-            delete GLOBAL.window;
-            delete GLOBAL.PluginResult;
-        });
-
-        it("can call ok", function () {
-            var mockedDevice = {
-                devicePin: (new Date()).getTime(),
-                IMSI: "310150123456789",
-                IMEI: "AA-BBBBBB-CCCCCC-D"
-            };
-
-            window.qnx.webplatform.device = mockedDevice;
-
-            index.getFields();
-
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith({
-                uuid: mockedDevice.devicePin,
-                IMSI: mockedDevice.IMSI,
-                IMEI: mockedDevice.IMEI
-            }, false);
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("will call fail when the fields are missing", function () {
-
-            index.getFields();
-
-            expect(mockedPluginResult.ok).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith("Cannot retrieve data from system");
-        });
-
-
-        it("will call fail when an error occurs", function () {
-            var errMsg = "Something bad happened";
-
-            Object.defineProperty(window.qnx.webplatform.device, "devicePin", {
-                get: function () {
-                    throw new Error(errMsg);
-                }
-            });
-
-            index.getFields();
-
-            expect(mockedPluginResult.ok).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith(errMsg);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.invoke.card/client.js b/test/unit/com.blackberry.invoke.card/client.js
deleted file mode 100755
index 90890d2..0000000
--- a/test/unit/com.blackberry.invoke.card/client.js
+++ /dev/null
@@ -1,260 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin/",
-    _ID = "com.blackberry.invoke.card",
-    _apiDir = _extDir + _ID,
-    client,
-    events;
-
-describe("invoke.card client", function () {
-    beforeEach(function () {
-        events = {};
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andCallFake(function () {
-                return cordova.exec;
-            }),
-            exec: jasmine.createSpy("cordova.exec")
-        };
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        client = null;
-        events = null;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-    });
-
-
-    describe("invoke camera ", function () {
-        var done,
-            cancel,
-            invokeCallback;
-        beforeEach(function () {
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-        it("should call exec with correct mode", function () {
-            client.invokeCamera("photo");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeCamera", {mode: "photo"});
-            client.invokeCamera("video");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeCamera", {mode: "video"});
-            client.invokeCamera("full");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeCamera", {mode: "full"});
-        });
-        it("should define photo|video|full", function () {
-            expect(client.CAMERA_MODE_PHOTO).toEqual("photo");
-            expect(client.CAMERA_MODE_FULL).toEqual("full");
-            expect(client.CAMERA_MODE_VIDEO).toEqual("video");
-        });
-    });
-
-    describe("invoke File Picker ", function () {
-        var details,
-            done,
-            cancel,
-            invokeCallback;
-        beforeEach(function () {
-            details = {
-                mode: "Picker"
-            };
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-        it("should call exec with correct mode", function () {
-            details = { mode: "Picker" };
-            client.invokeFilePicker(details);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeFilePicker", {options: details});
-
-            details = { mode: "PickerMultiple" };
-            client.invokeFilePicker(details);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeFilePicker", {options: details});
-
-            details = { mode: "Saver" };
-            client.invokeFilePicker(details);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeFilePicker", {options: details});
-
-            details = { mode: "SaverMultiple" };
-            client.invokeFilePicker(details);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeFilePicker", {options: details});
-        });
-        it("should define all file picker constants", function () {
-            expect(client["FILEPICKER_MODE_PICKER"]).toEqual("Picker");
-            expect(client["FILEPICKER_MODE_SAVER"]).toEqual("Saver");
-            expect(client["FILEPICKER_MODE_PICKER_MULTIPLE"]).toEqual("PickerMultiple");
-            expect(client["FILEPICKER_MODE_SAVER_MULTIPLE"]).toEqual("SaverMultiple");
-
-            expect(client["FILEPICKER_VIEWER_MODE_LIST"]).toEqual("ListView");
-            expect(client["FILEPICKER_VIEWER_MODE_GRID"]).toEqual("GridView");
-            expect(client["FILEPICKER_VIEWER_MODE_DEFAULT"]).toEqual("Default");
-
-            expect(client["FILEPICKER_SORT_BY_NAME"]).toEqual("Name");
-            expect(client["FILEPICKER_SORT_BY_DATE"]).toEqual("Date");
-            expect(client["FILEPICKER_SORT_BY_SUFFIX"]).toEqual("Suffix");
-            expect(client["FILEPICKER_SORT_BY_SIZE"]).toEqual("Size");
-
-            expect(client["FILEPICKER_SORT_ORDER_ASCENDING"]).toEqual("Ascending");
-            expect(client["FILEPICKER_SORT_ORDER_DESCENDING"]).toEqual("Descending");
-
-            expect(client["FILEPICKER_TYPE_PICTURE"]).toEqual('picture');
-            expect(client["FILEPICKER_TYPE_DOCUMENT"]).toEqual('document');
-            expect(client["FILEPICKER_TYPE_MUSIC"]).toEqual('music');
-            expect(client["FILEPICKER_TYPE_VIDEO"]).toEqual('video');
-            expect(client["FILEPICKER_TYPE_OTHER"]).toEqual('other');
-        });
-    });
-
-    describe("invoke target picker", function () {
-
-        it("should have an invokeTargerPicker method", function () {
-            expect(client.invokeTargetPicker).toBeDefined();
-        });
-        it("should properly invoke the target picker", function () {
-            var request = {
-                    uri : "http://testuri.com",
-                    action : 'bb.action.SHARE',
-                    target_type : ['CARD', 'APPLICATION']
-                },
-                onSuccess,
-                onError,
-                title = 'Test';
-
-            client.invokeTargetPicker(request, title, onSuccess, onError);
-        });
-
-    });
-
-    describe("invoke calendarPicker", function () {
-        var details,
-            done,
-            cancel,
-            invokeCallback;
-
-        beforeEach(function () {
-            details = {
-                filepath : "/path/to/save/the/file/to.vcs"
-            };
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-
-        it("should call exec with the correct options", function () {
-            client.invokeCalendarPicker(details, done, cancel, invokeCallback);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeCalendarPicker", {options: details});
-        });
-    });
-
-    describe("invoke Media Player", function () {
-        var details,
-            done,
-            cancel,
-            invokeCallback;
-
-        beforeEach(function () {
-            details = {
-                contentTitle: "Test Title",
-                contentUri: "file:///accounts/1000/shared/camera/VID_00000001.mp4",
-                imageUri: "file:///accounts/1000/shared/camera/AUD_00000001.mp4"
-            };
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-
-        it("should call exec with correct details passed", function () {
-            client.invokeMediaPlayer(details);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeMediaPlayer", {options: details});
-        });
-    });
-
-    describe("invoke calendarComposer", function () {
-        var details,
-            done,
-            cancel,
-            invokeCallback;
-
-        beforeEach(function () {
-            details = {
-                subject: "Some event",
-                body: "something about this event",
-                location: "here and there",
-                startTime: "Wed Jun 21 11:00:01 3412",
-                endTime: "Mon Jun 22 11:00:01 3423",
-                attendees: ["a@a.com", "b@b.com"]
-            };
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-
-        it("should call exec with the correct options", function () {
-            client.invokeCalendarComposer(details, done, cancel, invokeCallback);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeCalendarComposer", {options: details});
-        });
-    });
-
-    describe("invoke emailComposer", function () {
-        var details,
-            done,
-            cancel,
-            invokeCallback;
-
-        beforeEach(function () {
-            details = {
-                to: "mission-control@nasa.gov",
-                cc: "obama@whitehouse.org",
-                subject: "[STATUS] Manned Mission to Mars",
-                body: "It worked...",
-                attachment : ["/pictures/mission/astronauts-playing-hockey-on-mars.png"]
-            };
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-
-        it("should call exec with the correct options", function () {
-            client.invokeEmailComposer(details, done, cancel, invokeCallback);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeEmailComposer", {options: details});
-        });
-    });
-
-    describe("invoke ics viewer", function () {
-        var done,
-            cancel,
-            invokeCallback;
-
-        beforeEach(function () {
-            done = jasmine.createSpy("done");
-            cancel = jasmine.createSpy("cancel");
-            invokeCallback = jasmine.createSpy("invokeCallback");
-        });
-
-        it("should call exec with uri and accountId", function () {
-            client.invokeIcsViewer({uri: "file://path"});
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeIcsViewer", {options: {uri: "file://path"}});
-            client.invokeIcsViewer({uri: "file://path", accountId: 1});
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeIcsViewer", {options: {uri: "file://path", accountId: 1}});
-        });
-    });
-
-});
diff --git a/test/unit/com.blackberry.invoke.card/index.js b/test/unit/com.blackberry.invoke.card/index.js
deleted file mode 100755
index 0d9b967..0000000
--- a/test/unit/com.blackberry.invoke.card/index.js
+++ /dev/null
@@ -1,334 +0,0 @@
-/*
- * Copyright 2011-2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.invoke.card/",
-    _libDir = __dirname + "/../../../lib/",
-    mockedController,
-    mockedWebview,
-    mockedMediaPlayer,
-    mockedCamera,
-    mockedFile,
-    mockedIcs,
-    mockedCalPicker,
-    mockedCalComposer,
-    mockedEmailComposer,
-    mockedPluginResult,
-    index,
-    successCB,
-    failCB;
-
-describe("invoke.card index", function () {
-
-    beforeEach(function () {
-        mockedWebview = {
-            invocationlist: {
-                show : jasmine.createSpy()
-            }
-        };
-        mockedController = {
-            addEventListener: jasmine.createSpy().andCallFake(function (evt, callback) {
-                callback(mockedWebview);
-            })
-        };
-        mockedMediaPlayer = {
-            open: jasmine.createSpy("mediaplayerPreviewer.open")
-        };
-        mockedCamera = {
-            open: jasmine.createSpy("camera.open")
-        };
-        mockedFile = {
-            open: jasmine.createSpy("file.open")
-        };
-        mockedIcs = {
-            open: jasmine.createSpy("ics.open")
-        };
-        mockedCalPicker = {
-            open: jasmine.createSpy("calendarPicker.open")
-        };
-        mockedCalComposer = {
-            open: jasmine.createSpy("calendarComposer.open")
-        };
-        mockedEmailComposer = {
-            open: jasmine.createSpy("emailComposer.open")
-        };
-
-        GLOBAL.window = {
-            qnx: {
-                callExtensionMethod : function () {},
-                webplatform: {
-                    getApplication: function () {
-                        return {
-                            invocation : {
-                                TARGET_TYPE_MASK_APPLICATION : 1,
-                                TARGET_TYPE_MASK_CARD : 2,
-                                TARGET_TYPE_MASK_VIEWER : 4
-                            },
-                            cards: {
-                                mediaplayerPreviewer: mockedMediaPlayer,
-                                camera: mockedCamera,
-                                filePicker: mockedFile,
-                                icsViewer: mockedIcs,
-                                email: {
-                                    composer: mockedEmailComposer
-                                },
-                                calendar: {
-                                    picker: mockedCalPicker,
-                                    composer: mockedCalComposer
-                                }
-                            }
-                        };
-                    },
-                    getController: function () {
-                        return mockedController;
-                    },
-                }
-            }
-        };
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy(),
-            callbackError: jasmine.createSpy(),
-            noResult: jasmine.createSpy(),
-            ok: jasmine.createSpy(),
-            error: jasmine.createSpy()
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        GLOBAL.qnx = GLOBAL.window.qnx;
-        index = require(_apiDir + "index");
-        successCB = jasmine.createSpy("success callback");
-        failCB = jasmine.createSpy("fail callback");
-    });
-
-    afterEach(function () {
-        mockedMediaPlayer = null;
-        mockedCamera = null;
-        delete GLOBAL.window;
-        delete GLOBAL.qnx;
-        mockedFile = null;
-        mockedCalPicker = null;
-        mockedCalComposer = null;
-        mockedEmailComposer = null;
-        mockedIcs = null;
-        index = null;
-        delete require.cache[require.resolve(_apiDir + "index")];
-        successCB = null;
-        failCB = null;
-    });
-
-    describe("invoke camera", function () {
-        it("can invoke camera with mode", function () {
-            var mockedArgs = {
-                    "mode": encodeURIComponent(JSON.stringify({mode: "photo"}))
-                };
-
-            index.invokeCamera(successCB, null, mockedArgs);
-            expect(mockedCamera.open).toHaveBeenCalledWith({
-                mode: "photo"
-            }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke file picker", function () {
-        it("can invoke file picker with options", function () {
-            var mockedArgs = {
-                    "options": encodeURIComponent(JSON.stringify({mode: "Picker"}))
-                };
-
-            index.invokeFilePicker(successCB, null, mockedArgs);
-            expect(mockedFile.open).toHaveBeenCalledWith({
-                    mode: "Picker"
-                }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke mediaplayer", function () {
-        it("can invoke mediaplayer previewer with options", function () {
-            var contentTitle = "Test Title",
-                contentUri = "file:///accounts/1000/shared/camera/VID_00000001.mp4",
-                imageUri = "",
-                mockedArgs = {
-                    contentTitle: contentTitle,
-                    contentUri: contentUri,
-                    imageUri: imageUri
-                };
-
-            index.invokeMediaPlayer(successCB, null, {options: encodeURIComponent(JSON.stringify(mockedArgs))});
-
-            expect(mockedMediaPlayer.open).toHaveBeenCalledWith({
-                    contentTitle: decodeURIComponent(contentTitle),
-                    contentUri: decodeURIComponent(contentUri),
-                    imageUri: decodeURIComponent(imageUri)
-                }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke ICS viewer", function () {
-        it("can invoke ICS viewer with options", function () {
-            var successCB = jasmine.createSpy(),
-                mockedArgs = {
-                    options: encodeURIComponent(JSON.stringify({options: {uri: "file://path/to/file.ics"}}))
-                };
-            index.invokeIcsViewer(successCB, null, mockedArgs);
-            expect(mockedIcs.open).toHaveBeenCalledWith({
-                options: { uri : "file://path/to/file.ics" }
-            }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-        });
-    });
-
-    describe("invoke calendar picker", function () {
-        it("can invoke calendar picker with options", function () {
-            var successCB = jasmine.createSpy(),
-                mockedArgs = {
-                    options: encodeURIComponent(JSON.stringify({options: {filepath: "/path/to/file.vcs"}}))
-                };
-            index.invokeCalendarPicker(successCB, null, mockedArgs);
-            expect(mockedCalPicker.open).toHaveBeenCalledWith({
-                options: { filepath : "/path/to/file.vcs" }
-            }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke calendar composer", function () {
-        it("can invoke calendar composer with", function () {
-            var subject = "Subject",
-                body = "Body",
-                startTime = "Wed Jun 21 12:21:21 2012",
-                duration = '20',
-                mockedArgs = {
-                    "subject": subject,
-                    "body": body,
-                    "startTime": startTime,
-                    "duration": duration
-                };
-
-            index.invokeCalendarComposer(successCB, null, {options: encodeURIComponent(JSON.stringify(mockedArgs))});
-
-            expect(mockedCalComposer.open).toHaveBeenCalledWith({
-                    subject: decodeURIComponent(subject),
-                    body: decodeURIComponent(body),
-                    startTime: decodeURIComponent(startTime),
-                    duration: decodeURIComponent(duration)
-                }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke email composer", function () {
-        it("can invoke email composer with", function () {
-            var subject = "Subject",
-                body = "Body",
-                mockedArgs = {
-                    "subject": subject,
-                    "body": body,
-                };
-
-            index.invokeEmailComposer(successCB, null, {options: encodeURIComponent(JSON.stringify(mockedArgs))});
-
-            expect(mockedEmailComposer.open).toHaveBeenCalledWith({
-                    subject: decodeURIComponent(subject),
-                    body: decodeURIComponent(body),
-                }, jasmine.any(Function), jasmine.any(Function), jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("invoke targetPicker", function () {
-
-        it("expects invokeTargetPicker to be defined", function () {
-            expect(index.invokeTargetPicker).toBeDefined();
-        });
-
-        it("can invoke the target picker ", function () {
-            var mockedArgs = {
-                    title : encodeURIComponent(JSON.stringify('A test title')),
-                    request : encodeURIComponent(JSON.stringify({
-                        uri : 'file:///a test uri.jpg',
-                        target_type : ['CARD', 'APPLICATION', 'VIEWER']
-                    }))
-                },
-            request;
-
-            index.invokeTargetPicker(successCB, null, mockedArgs);
-            request = JSON.parse(decodeURIComponent(mockedArgs.request));
-            request.target_type_mask = 7;
-            delete request.target_type;
-
-            expect(mockedWebview.invocationlist.show).toHaveBeenCalledWith(
-                request,
-                JSON.parse(decodeURIComponent(mockedArgs.title)),
-                jasmine.any(Function),
-                jasmine.any(Function)
-            );
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can invoke the target picker with meta data", function () {
-            var mockedArgs = {
-                    title : encodeURIComponent(JSON.stringify('A test title')),
-                    request : encodeURIComponent(JSON.stringify({
-                        uri : 'file:///a test uri.jpg',
-                        target_type : ['CARD', 'APPLICATION', 'VIEWER'],
-                        metadata : {some: 'data'}
-                    }))
-                },
-            request;
-
-            index.invokeTargetPicker(successCB, null, mockedArgs);
-            request = JSON.parse(decodeURIComponent(mockedArgs.request));
-            request.target_type_mask = 7;
-            delete request.target_type;
-            request.metadata = JSON.stringify(request.metadata);
-
-            expect(mockedWebview.invocationlist.show).toHaveBeenCalledWith(
-                request,
-                JSON.parse(decodeURIComponent(mockedArgs.title)),
-                jasmine.any(Function),
-                jasmine.any(Function)
-            );
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-
-        it("can invoke the target picker with no target-type", function () {
-            var mockedArgs = {
-                    title : encodeURIComponent(JSON.stringify('A test title')),
-                    request : encodeURIComponent(JSON.stringify({
-                        action : 'bb.action.SHARE',
-                        uri : 'file:///a test uri.jpg',
-                        metadata : {some: 'data'}
-                    }))
-                },
-            request;
-
-            index.invokeTargetPicker(successCB, null, mockedArgs);
-            request = JSON.parse(decodeURIComponent(mockedArgs.request));
-            request.metadata = JSON.stringify(request.metadata);
-
-            expect(mockedWebview.invocationlist.show).toHaveBeenCalledWith(
-                request,
-                JSON.parse(decodeURIComponent(mockedArgs.title)),
-                jasmine.any(Function),
-                jasmine.any(Function)
-            );
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-    });
-});
diff --git a/test/unit/com.blackberry.invoke/client.js b/test/unit/com.blackberry.invoke/client.js
deleted file mode 100755
index f02b5be..0000000
--- a/test/unit/com.blackberry.invoke/client.js
+++ /dev/null
@@ -1,274 +0,0 @@
-/*
-  Licensed to the Apache Software Foundation (ASF) under one
-  or more contributor license agreements.  See the NOTICE file
-  distributed with this work for additional information
-  regarding copyright ownership.  The ASF licenses this file
-  to you under the Apache License, Version 2.0 (the
-  "License"); you may not use this file except in compliance
-  with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing,
-  software distributed under the License is distributed on an
-  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  KIND, either express or implied.  See the License for the
-  specific language governing permissions and limitations
-  under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.invoke",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    mockedChannel,
-    MockedChannel;
-
-describe("invoke client", function () {
-    beforeEach(function () {
-
-        GLOBAL.window = {
-            btoa: jasmine.createSpy("window.btoa").andReturn("base64 string")
-        };
-
-        mockedChannel = {
-            onHasSubscribersChange: undefined,
-            numHandlers: 0,
-            subscribe: jasmine.createSpy().andCallFake(function () {
-                this.numHandlers++;
-                this.onHasSubscribersChange();
-            }),
-            unsubscribe: jasmine.createSpy().andCallFake(function () {
-                this.numHandlers--;
-                this.onHasSubscribersChange();
-            }),
-            fire: jasmine.createSpy()
-        };
-
-        MockedChannel = function () {
-            return mockedChannel;
-        };
-
-        GLOBAL.cordova = {
-            addDocumentEventHandler: jasmine.createSpy().andReturn({
-                onHasSubscribersChange: jasmine.createSpy()
-            }),
-            
-            fireWindowEvent: jasmine.createSpy(),
-
-            require: jasmine.createSpy().andCallFake(function (module) {
-                if (module === "cordova/channel") {
-                    return {
-                        create: jasmine.createSpy().andReturn(new MockedChannel())
-                    };
-                } else if (module === "cordova/exec") {
-                    return cordova.exec;
-                }
-            }),
-
-            exec: jasmine.createSpy("exec").andCallFake(function (success, error, service, action) {
-                if (action === "invoke") {
-                    if (success) {
-                        success();
-                    } else {
-                        error();
-                    }
-                }
-            })
-
-        };
-
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-        client = null;
-    });
-
-    describe("invoke", function () {
-
-        it("blackberry.invoke constants should be properly defined", function () {
-            expect(client["FILE_TRANSFER_PRESERVE"]).toEqual("PRESERVE");
-            expect(client["FILE_TRANSFER_COPY_RO"]).toEqual("COPY_RO");
-            expect(client["FILE_TRANSFER_COPY_RW"]).toEqual("COPY_RW");
-            expect(client["FILE_TRANSFER_LINK"]).toEqual("LINK");
-        });
-
-        it("should call error callback if request is not valid", function () {
-            var onError = jasmine.createSpy("client onError");
-
-            client.invoke(null, null, onError);
-            expect(onError).toHaveBeenCalled();
-        });
-
-        it("should call exec", function () {
-            var request = {
-                    target: "abc.xyz"
-                },
-                callback = jasmine.createSpy("client callback");
-
-            client.invoke(request, callback);
-
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), undefined, _ID, "invoke", {"request": request});
-        });
-
-        it("should encode data to base64 string", function () {
-            var request = {
-                    target: "abc.xyz",
-                    data: "my string"
-                },
-                callback = jasmine.createSpy("client callback");
-
-            client.invoke(request, callback);
-
-            expect(window.btoa).toHaveBeenCalledWith("my string");
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), undefined, _ID, "invoke", {
-                "request": {
-                    target: request.target,
-                    data: "base64 string"
-                }
-            });
-        });
-
-        it("should call onError if failed to encode data to base64", function () {
-            var request = {
-                    target: "abc.xyz",
-                    data: "my string"
-                },
-                onError = jasmine.createSpy("client onError");
-
-            window.btoa.andThrow("bad string");
-            client.invoke(request, null, onError);
-            expect(onError).toHaveBeenCalledWith("bad string");
-        });
-
-        it("should call onSuccess if invocation is successful", function () {
-            var request = {
-                    target: "abc.xyz"
-                },
-                onSuccess = jasmine.createSpy("client onSuccess"),
-                onError = jasmine.createSpy("client onError");
-
-            client.invoke(request, onSuccess);
-
-            expect(onSuccess).toHaveBeenCalled();
-            expect(onError).not.toHaveBeenCalled();
-        });
-
-        it("should call onError if invocation failed", function () {
-            var request = {
-                    target: "abc.xyz"
-                },
-                onSuccess = jasmine.createSpy("client onSuccess"),
-                onError = jasmine.createSpy("client onError");
-
-            client.invoke(request, null, onError);
-
-            expect(onSuccess).not.toHaveBeenCalled();
-            expect(onError).toHaveBeenCalled();
-        });
-    });
-
-    describe("query", function () {
-
-        beforeEach(function () {
-            cordova.exec.andCallFake(function (success, error, id, action, args) {
-                //Validate the args
-                if (args && args.request && (args.request["type"] || args.request["uri"]) &&
-                        args.request["target_type"]) {
-                    success({"error": "", "response": {}});
-                } else {
-                    error("invalid_argument");
-                }
-            });
-        });
-
-        it("should register an event callback to be triggered by the server side", function () {
-            var request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["APPLICATION"]
-                },
-                onSuccess = jasmine.createSpy("client onSuccess"),
-                onError = jasmine.createSpy("client onError");
-
-            client.query(request, onSuccess, onError);
-
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "query", {"request": request });
-        });
-
-        it("should call success callback if the invocation is successful", function () {
-            var request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": "ALL"
-                },
-                onSuccess = jasmine.createSpy("client onSuccess"),
-                onError = jasmine.createSpy("client onError");
-
-            client.query(request, onSuccess, onError);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "query", {"request": request});
-            expect(onSuccess).toHaveBeenCalledWith(jasmine.any(Object));
-            expect(onError).not.toHaveBeenCalled();
-        });
-
-        it("should trigger error callback if the invocation is unsuccessful", function () {
-            var request = {
-                    "action": "bb.action.OPEN",
-                    "target_type": "ALL"
-                },
-                onSuccess = jasmine.createSpy("client onSuccess"),
-                onError = jasmine.createSpy("client onError");
-
-            client.query(request, onSuccess, onError);
-            expect(onSuccess).not.toHaveBeenCalled();
-            expect(onError).toHaveBeenCalledWith(jasmine.any(String));
-        });
-
-
-    });
-
-    describe("invoke interruption", function () {
-
-        it("can successfully register as an interrupter", function () {
-            var handler = function () {};
-            client.interrupter = handler;
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'startEvent', {eventName: 'invocation.interrupted'});
-        });
-
-        it("can successfully clear an interrupter", function () {
-            mockedChannel.numHandlers = 1;
-            client.interrupter = null;
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'stopEvent', {eventName: 'invocation.interrupted'});
-        });
-
-        it("can successfully register an interrupter multiple times and only the last one is registered", function () {
-            var handler = function () {};
-            client.interrupter = handler;
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'startEvent', {eventName: 'invocation.interrupted'});
-
-            client.interrupter = handler;
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'stopEvent', {eventName: 'invocation.interrupted'});
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'startEvent', {eventName: 'invocation.interrupted'});
-        });
-
-
-        it("can successfully register an interrupter and retreive its value", function () {
-            var handler = function () {};
-            client.interrupter = handler;
-            expect(client.interrupter).toEqual(handler);
-        });
-
-    });
-
-    describe("closeChildCard", function () {
-        it("should call exec for closeChildCard", function () {
-            expect(client.closeChildCard).toBeDefined();
-            client.closeChildCard();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "closeChildCard");
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.invoke/index.js b/test/unit/com.blackberry.invoke/index.js
deleted file mode 100755
index 17f2948..0000000
--- a/test/unit/com.blackberry.invoke/index.js
+++ /dev/null
@@ -1,390 +0,0 @@
-/*
- * Copyright 2011-2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.invoke/",
-    _libDir = __dirname + "/../../../lib/",
-    _extDir = __dirname + "/../../../plugin/",
-    mockedInvocation,
-    mockedApplication,
-    mockedController,
-    mockedPluginResult,
-    index,
-    successCB,
-    failCB,
-    errorCode = -1;
-
-describe("invoke index", function () {
-
-    beforeEach(function () {
-        mockedInvocation = {
-            invoke: jasmine.createSpy("invocation.invoke").andCallFake(function (request, callback) {
-                callback();
-            }),
-            queryTargets: jasmine.createSpy("invocation.queryTargets").andCallFake(function (request, callback) {
-                callback();
-            }),
-            TARGET_TYPE_MASK_APPLICATION: 1,
-            TARGET_TYPE_MASK_CARD: 2,
-            TARGET_TYPE_MASK_VIEWER: 4,
-            interrupter : false
-        };
-        mockedController = {
-            dispatchEvent : jasmine.createSpy(),
-            addEventListener : jasmine.createSpy(),
-            removeEventListener : jasmine.createSpy()
-        };
-        mockedApplication = {
-            invocation: mockedInvocation,
-            addEventListener : jasmine.createSpy().andCallFake(function (eventName, callback) {
-                    callback();
-                }),
-            removeEventListener : jasmine.createSpy()
-        };
-        GLOBAL.window = {};
-        GLOBAL.window.qnx = {
-            callExtensionMethod : function () {},
-            webplatform: {
-                getApplication: function () {
-                    return mockedApplication;
-                },
-                getController : function () {
-                    return mockedController;
-                }
-            }
-        };
-
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy(),
-            callbackError: jasmine.createSpy(),
-            noResult: jasmine.createSpy(),
-            ok: jasmine.createSpy(),
-            error: jasmine.createSpy()
-        };
-
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        GLOBAL.qnx = GLOBAL.window.qnx;
-        index = require(_apiDir + "index");
-        successCB = jasmine.createSpy("success callback");
-        failCB = jasmine.createSpy("fail callback");
-    });
-
-    afterEach(function () {
-        mockedInvocation = null;
-        GLOBAL.window.qnx = null;
-        delete GLOBAL.PluginResult;
-        index = null;
-        successCB = null;
-        failCB = null;
-    });
-
-    describe("invoke", function () {
-
-        it("can invoke with target", function () {
-            var successCB = jasmine.createSpy(),
-                mockedArgs = {
-                    "request": encodeURIComponent(JSON.stringify({target: "abc.xyz"}))
-                };
-
-            index.invoke(successCB, null, mockedArgs);
-            expect(mockedInvocation.invoke).toHaveBeenCalledWith({
-                target: "abc.xyz"
-            }, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith(undefined, false);
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can invoke with uri", function () {
-            var successCB = jasmine.createSpy(),
-                mockedArgs = {
-                    "request": encodeURIComponent(JSON.stringify({uri: "http://www.rim.com"}))
-                };
-
-            index.invoke(successCB, null, mockedArgs);
-            expect(mockedInvocation.invoke).toHaveBeenCalledWith({
-                uri: "http://www.rim.com"
-            }, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith(undefined, false);
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can invoke with uri using the file_transfer_mode property", function () {
-            var successCB = jasmine.createSpy(),
-                mockedArgs = {
-                    "request": encodeURIComponent(JSON.stringify({uri: "http://www.rim.com", file_transfer_mode: "PRESERVE"}))
-                };
-
-            index.invoke(successCB, null, mockedArgs);
-            expect(mockedInvocation.invoke).toHaveBeenCalledWith({
-                uri: "http://www.rim.com",
-                file_transfer_mode : "PRESERVE"
-            }, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith(undefined, false);
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-    });
-
-    describe("query", function () {
-        var APPLICATION = 1,
-            CARD = 2,
-            VIEWER = 4;
-
-        it("can query the invocation framework", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["APPLICATION", "VIEWER", "CARD"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            delete request["target_type"];
-            request["target_type_mask"] = APPLICATION | VIEWER | CARD;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can perform a query for application targets", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["APPLICATION"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            delete request["target_type"];
-            request["target_type_mask"] = APPLICATION;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can perform a query for viewer targets", function  () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["VIEWER"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            delete request["target_type"];
-            request["target_type_mask"] = VIEWER;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can perform a query for card targets", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["CARD"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            delete request["target_type"];
-            request["target_type_mask"] = CARD;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("can perform a query for all targets", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["APPLICATION", "VIEWER", "CARD"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            delete request["target_type"];
-            request["target_type_mask"] = APPLICATION | VIEWER | CARD;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("will not generate a target_type property in the request if it is not an array", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": "APPLICATION"
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("will only use valid entries in the target type array to generate the target type mask", function () {
-            var success = jasmine.createSpy(),
-                fail = jasmine.createSpy(),
-                request = {
-                    "action": "bb.action.OPEN",
-                    "type": "image/*",
-                    "target_type": ["APPLICATION", "VIEWER", "CARD", "INVALID_ENTRY"]
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.query(success, fail, args);
-            request["target_type"] = ["INVALID_ENTRY"];
-            request["target_type_mask"] = APPLICATION | VIEWER | CARD;
-            expect(mockedInvocation.queryTargets).toHaveBeenCalledWith(request, jasmine.any(Function));
-            expect(mockedPluginResult.callbackOk).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-    });
-
-    describe("card", function () {
-        beforeEach(function () {
-            mockedInvocation.closeChildCard = jasmine.createSpy("invocation.closeChildCard");
-        });
-
-        afterEach(function () {
-            delete mockedInvocation.closeChildCard;
-        });
-
-        describe("methods", function () {
-            it("can call closeChildCard with success callback at the end", function () {
-                index.closeChildCard(successCB, failCB);
-                expect(mockedInvocation.closeChildCard).toHaveBeenCalled();
-                expect(mockedPluginResult.ok).toHaveBeenCalled();
-                expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            });
-        });
-
-        describe("events", function () {
-            var invocationEvents;
-
-            beforeEach(function () {
-                invocationEvents = require(_apiDir + "invocationEvents");
-            });
-
-            afterEach(function () {
-                invocationEvents = null;
-            });
-
-            it("can call startEvent", function () {
-                var env = {
-                        webview: {
-                            id: 42
-                        }
-                    };
-
-                spyOn(invocationEvents, "addEventListener");
-
-                index.startEvent(successCB, failCB, {eventName: encodeURIComponent(JSON.stringify("onchildcardclosed"))}, env);
-
-                expect(invocationEvents.addEventListener).toHaveBeenCalledWith("onchildcardclosed", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can call stopEvent", function () {
-                var env = {
-                        webview: {
-                            id: 42
-                        }
-                    };
-
-                spyOn(invocationEvents, "removeEventListener");
-
-                index.stopEvent(successCB, failCB, {eventName: encodeURIComponent(JSON.stringify("onchildcardclosed"))}, env);
-
-                expect(invocationEvents.removeEventListener).toHaveBeenCalledWith("onchildcardclosed", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-            });
-        });
-
-        describe("interrupt invocation", function () {
-            var invocationEvents;
-
-            beforeEach(function () {
-                invocationEvents = require(_apiDir + "invocationEvents");
-            });
-
-            afterEach(function () {
-                invocationEvents = null;
-            });
-
-            it("expect returnInterruption to be defined", function () {
-                expect(index.returnInterruption).toBeDefined();
-            });
-
-            it("can properly register for invocation interruption", function () {
-                var env = {
-                        webview: {
-                            id: 42
-                        }
-                    };
-
-                spyOn(invocationEvents, "addEventListener");
-
-                index.startEvent(successCB, failCB, {eventName: encodeURIComponent(JSON.stringify("invocation.interrupted"))}, env);
-                expect(invocationEvents.addEventListener).toHaveBeenCalledWith("invocation.interrupted", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-            });
-
-            it("can properly unregister for invocation interruption", function () {
-                var env = {
-                        webview: {
-                            id: 42
-                        }
-                    };
-
-                spyOn(invocationEvents, "removeEventListener");
-
-                index.stopEvent(successCB, failCB, {eventName: encodeURIComponent(JSON.stringify("invocation.interrupted"))}, env);
-                expect(invocationEvents.removeEventListener).toHaveBeenCalledWith("invocation.interrupted", jasmine.any(Function));
-                expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-            });
-
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.invoke/invocationEvents.js b/test/unit/com.blackberry.invoke/invocationEvents.js
deleted file mode 100755
index 2b185f3..0000000
--- a/test/unit/com.blackberry.invoke/invocationEvents.js
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.invoke/",
-    invocationEvents,
-    startupMode,
-    mockedInvocation,
-    trigger;
-
-describe("invoke invocationEvents", function () {
-    beforeEach(function () {
-        mockedInvocation = {
-            addEventListener: jasmine.createSpy("invocation addEventListener"),
-            removeEventListener: jasmine.createSpy("invocation removeEventListener"),
-            interrupter: undefined
-        };
-        GLOBAL.window.qnx = {
-            webplatform: {
-                getApplication: function () {
-                    return {
-                        invocation: mockedInvocation
-                    };
-                }
-            }
-        };
-
-        //since multiple tests are requiring invocation events we must unrequire
-        var name = require.resolve(_apiDir + "invocationEvents");
-        delete require.cache[name];
-        invocationEvents = require(_apiDir + "invocationEvents");
-        trigger = function () {};
-    });
-
-    afterEach(function () {
-        mockedInvocation = null;
-        GLOBAL.window.qnx = null;
-        trigger = null;
-    });
-
-    describe("onchildcardstartpeek", function () {
-        it("add proper event to invocation for 'onchildcardstartpeek'", function () {
-            invocationEvents.addEventListener("onchildcardstartpeek", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("cardPeekStarted", trigger);
-        });
-
-        it("remove proper event from invocation for 'onchildcardstartpeek", function () {
-            invocationEvents.removeEventListener("onchildcardstartpeek", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("cardPeekStarted", trigger);
-        });
-    });
-
-    describe("onchildcardendpeek", function () {
-        it("add proper event to invocation for 'onchildcardendpeek'", function () {
-            invocationEvents.addEventListener("onchildcardendpeek", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("cardPeekEnded", trigger);
-        });
-
-        it("remove proper event from invocation for 'onchildcardendpeek", function () {
-            invocationEvents.removeEventListener("onchildcardendpeek", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("cardPeekEnded", trigger);
-        });
-    });
-
-    describe("onchildcardclosed", function () {
-        it("add proper event to invocation for 'onchildcardclosed'", function () {
-            invocationEvents.addEventListener("onchildcardclosed", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("childCardClosed", trigger);
-        });
-
-        it("remove proper event from invocation for 'onchildcardclosed", function () {
-            invocationEvents.removeEventListener("onchildcardclosed", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("childCardClosed", trigger);
-        });
-    });
-
-    describe("invocation.interrupted", function () {
-        it("add proper event to invocation for 'invocation.interrupted'", function () {
-            invocationEvents.addEventListener("invocation.interrupted", trigger);
-            expect(mockedInvocation.interrupter).toEqual(trigger);
-        });
-
-        it("remove proper event from invocation for 'invocation.interrupted", function () {
-            invocationEvents.removeEventListener("invocation.interrupted", trigger);
-            expect(mockedInvocation.interrupter).toEqual(undefined);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.invoked/client.js b/test/unit/com.blackberry.invoked/client.js
deleted file mode 100755
index 44cd657..0000000
--- a/test/unit/com.blackberry.invoked/client.js
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.invoked",
-    _apiDir = _extDir + "/" + _ID,
-    client;
-
-describe("invoked client", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            addDocumentEventHandler: jasmine.createSpy().andReturn({
-                onHasSubscribersChange: jasmine.createSpy(),
-                fire: jasmine.createSpy()
-            }),
-            require: jasmine.createSpy().andCallFake(function () {
-                return cordova.exec;
-            }),
-            exec: jasmine.createSpy("cordova.exec")
-        };
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-        client = null;
-    });
-
-    describe("cardResizeDone", function () {
-        it("should call exec for cardResizeDone", function () {
-            expect(client.cardResizeDone).toBeDefined();
-            client.cardResizeDone();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "cardResizeDone");
-        });
-    });
-
-    describe("cardStartPeek", function () {
-        var peekType = "root";
-
-        it("should call exec for cardStartPeek", function () {
-            expect(client.cardStartPeek).toBeDefined();
-            client.cardStartPeek(peekType);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "cardStartPeek", {'peekType': peekType});
-        });
-    });
-
-    describe("cardRequestClosure", function () {
-        var request = {
-            reason: "Request Reason",
-            type: "mime/type",
-            data: "Request data"
-        };
-
-        it("should call exec for cardRequestClosure", function () {
-            expect(client.cardRequestClosure).toBeDefined();
-            client.cardRequestClosure(request);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "cardRequestClosure", {'request': request});
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.invoked/index.js b/test/unit/com.blackberry.invoked/index.js
deleted file mode 100755
index 680f1df..0000000
--- a/test/unit/com.blackberry.invoked/index.js
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Copyright 2011-2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.invoked/",
-    _libDir = __dirname + "/../../../lib/",
-    mockedInvocation,
-    mockedPluginResult,
-    index,
-    successCB,
-    failCB,
-    errorCode = -1;
-
-describe("invoked index", function () {
-
-    beforeEach(function () {
-        mockedInvocation = {
-            getRequest: jasmine.createSpy("invocation.getRequest"),
-            getStartupMode: jasmine.createSpy("invocation.getStartupMode").andCallFake(function () {
-                return 0;
-            }),
-            LAUNCH: 0
-        };
-        GLOBAL.window = {};
-        GLOBAL.window.qnx = {
-            callExtensionMethod : function () {},
-            webplatform: {
-                getApplication: function () {
-                    return {
-                        invocation: mockedInvocation
-                    };
-                }
-            }
-        };
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy(),
-            callbackError: jasmine.createSpy(),
-            noResult: jasmine.createSpy(),
-            ok: jasmine.createSpy(),
-            error: jasmine.createSpy()
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        //since multiple tests are requiring invocation events we must unrequire
-        var name = require.resolve(_apiDir + "invocationEvents");
-        delete require.cache[name];
-        index = require(_apiDir + "index");
-        successCB = jasmine.createSpy("success callback");
-        failCB = jasmine.createSpy("fail callback");
-    });
-
-    afterEach(function () {
-        mockedInvocation = null;
-        GLOBAL.window.qnx = null;
-        index = null;
-        successCB = null;
-        failCB = null;
-    });
-
-    describe("methods", function () {
-        beforeEach(function () {
-            mockedInvocation.cardResized = jasmine.createSpy("invocation.cardResized");
-            mockedInvocation.cardPeek = jasmine.createSpy("invocation.cardPeek");
-            mockedInvocation.sendCardDone = jasmine.createSpy("invocation.sendCardDone");
-        });
-
-        afterEach(function () {
-            delete mockedInvocation.cardResizeDone;
-            delete mockedInvocation.cardStartPeek;
-            delete mockedInvocation.cardRequestClosure;
-        });
-
-        // Positive
-        it("can call cardResizeDone with success callback at the end", function () {
-            index.cardResizeDone(successCB, failCB);
-            expect(mockedInvocation.cardResized).toHaveBeenCalled();
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-        });
-
-        it("can call cardStartPeek with success callback at the end", function () {
-            var cartType = "root",
-                args = {
-                    'peekType': encodeURIComponent(cartType)
-                };
-
-            index.cardStartPeek(successCB, failCB, args);
-            expect(mockedInvocation.cardPeek).toHaveBeenCalledWith(cartType);
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-        });
-
-        it("can call cardRequestClosure with success callback at the end", function () {
-            var request = {
-                    reason: "Close Reason",
-                    type: "mime/type",
-                    data: "Close Data"
-                },
-                args = {
-                    "request": encodeURIComponent(JSON.stringify(request))
-                };
-
-            index.cardRequestClosure(successCB, failCB, args);
-            expect(mockedInvocation.sendCardDone).toHaveBeenCalledWith(request);
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-        });
-
-        // Negative
-        it("can call cardStartPeek with fail callback when missing required parameter", function () {
-            index.cardStartPeek(successCB, failCB);
-            expect(mockedInvocation.cardResized).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalled();
-        });
-
-        it("can call cardRequestClosure with fail callback when missing required parameter", function () {
-            index.cardRequestClosure(successCB, failCB);
-            expect(mockedInvocation.sendCardDone).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalled();
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.invoked/invocationEvents.js b/test/unit/com.blackberry.invoked/invocationEvents.js
deleted file mode 100755
index e35d9c7..0000000
--- a/test/unit/com.blackberry.invoked/invocationEvents.js
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.invoked/",
-    _libDir = __dirname + "/../../../lib/",
-    invocationEvents,
-    startupMode,
-    mockedInvocation,
-    trigger;
-
-describe("invoked invocationEvents", function () {
-    beforeEach(function () {
-        mockedInvocation = {
-            addEventListener: jasmine.createSpy("invocation addEventListener"),
-            removeEventListener: jasmine.createSpy("invocation removeEventListener"),
-            getStartupMode: jasmine.createSpy("getStartupMode").andCallFake(function () {
-                return startupMode;
-            }),
-            getRequest: jasmine.createSpy("invocation getRequest"),
-            LAUNCH: 0
-        };
-        GLOBAL.window = {
-            qnx: {
-                webplatform: {
-                    getApplication: function () {
-                        return {
-                            invocation: mockedInvocation
-                        };
-                    }
-                }
-            }
-        };
-        startupMode = 1;
-        //since multiple tests are requiring invocation events we must unrequire
-        var name = require.resolve(_apiDir + "invocationEvents");
-        delete require.cache[name];
-        invocationEvents = require(_apiDir + "invocationEvents");
-        trigger = function () {};
-    });
-
-    afterEach(function () {
-        mockedInvocation = null;
-        delete GLOBAL.window.qnx;
-        delete GLOBAL.window;
-    });
-
-    describe("addEventListener", function () {
-        var trigger = jasmine.createSpy("trigger");
-
-        it("calls framework setOnInvoked for 'invoked' event", function () {
-            invocationEvents.addEventListener("invoked", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("Invoked", trigger);
-        });
-
-        it("calls framework setOnInvoked right away when startupMode is Invoke", function () {
-            invocationEvents.addEventListener("invoked", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("Invoked", trigger);
-            expect(trigger).toHaveBeenCalled();
-        });
-    });
-
-    describe("removeEventListener", function () {
-        it("calls framework setOnInvoked for 'invoked' event", function () {
-            invocationEvents.removeEventListener("invoked", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("Invoked", trigger);
-        });
-    });
-
-    describe("onCardResize", function () {
-        it("add proper event to invocation for 'oncardresize'", function () {
-            invocationEvents.addEventListener("oncardresize", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("cardResize", trigger);
-        });
-
-        it("remove proper event from invocation for 'oncardresize", function () {
-            invocationEvents.removeEventListener("oncardresize", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("cardResize", trigger);
-        });
-    });
-
-    describe("onCardClosed", function () {
-        it("add proper event to invocation for 'oncardclosed'", function () {
-            invocationEvents.addEventListener("oncardclosed", trigger);
-            expect(mockedInvocation.addEventListener).toHaveBeenCalledWith("cardClosed", trigger);
-        });
-
-        it("remove proper event from invocation for 'oncardclosed", function () {
-            invocationEvents.removeEventListener("oncardclosed", trigger);
-            expect(mockedInvocation.removeEventListener).toHaveBeenCalledWith("cardClosed", trigger);
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.io.filetransfer/client.js b/test/unit/com.blackberry.io.filetransfer/client.js
deleted file mode 100755
index c7c379d..0000000
--- a/test/unit/com.blackberry.io.filetransfer/client.js
+++ /dev/null
@@ -1,178 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _ID = "com.blackberry.io.filetransfer",
-    _apiDir = __dirname + "/../../../plugin/" + _ID + "/",
-    client,
-    successCB;
-
-describe("io.filetransfer client", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy().andCallFake(function (success) {
-                successCB = success;
-            }),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(_apiDir + "www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = null;
-    });
-
-    describe("io.filetransfer constants", function () {
-
-        it("should return constant", function () {
-            expect(client.FILE_NOT_FOUND_ERR).toEqual(1);
-            expect(client.INVALID_URL_ERR).toEqual(2);
-            expect(client.CONNECTION_ERR).toEqual(3);
-        });
-
-    });
-
-    describe("io.filetransfer upload", function () {
-        var filePath = "a",
-            server = "b",
-            options = { "c": "d" },
-            callback = function () {};
-
-        it("should call cordova.exec", function () {
-            var expected_args = {
-                "filePath": filePath,
-                "server": server,
-                "options": options
-            };
-
-            client.upload(filePath, server, callback, callback, options);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "upload", expected_args);
-        });
-
-        it("should call success callback on success event", function () {
-            var success = jasmine.createSpy(),
-                failure = jasmine.createSpy(),
-                mocked_args = {
-                    "result": "success",
-                    "bytesSent": "someBytesSent",
-                    "responseCode": "someResponseCode",
-                    "response": escape("someResponse!")
-                },
-                expected_args = {
-                    "bytesSent": "someBytesSent",
-                    "responseCode": "someResponseCode",
-                    "response": "someResponse!"
-                };
-
-            client.upload(filePath, server, success, failure, options);
-            successCB(mocked_args);
-
-            expect(success).toHaveBeenCalledWith(expected_args);
-            expect(failure).not.toHaveBeenCalled();
-        });
-
-        it("should call failure callback on error event", function () {
-            var success = jasmine.createSpy(),
-                failure = jasmine.createSpy(),
-                mocked_args = {
-                    "result": "error",
-                    "code": "someCode",
-                    "source": "someSource",
-                    "target": "someTarget"
-                },
-                expected_args = {
-                    "code": "someCode",
-                    "source": "someSource",
-                    "target": "someTarget"
-                };
-
-            client.upload(filePath, server, success, failure, options);
-            successCB(mocked_args);
-
-            expect(success).not.toHaveBeenCalled();
-            expect(failure).toHaveBeenCalledWith(expected_args);
-        });
-    });
-
-    describe("io.filetransfer download", function () {
-        var source = "a",
-            target = "b",
-            callback = function () {};
-
-        it("should call cordova.exec", function () {
-            var expected_args = {
-                "source": source,
-                "target": target
-            };
-
-            client.download(source, target, callback, callback);
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "download", expected_args);
-        });
-
-        it("should call success callback on success event", function () {
-            var success = jasmine.createSpy(),
-                failure = jasmine.createSpy(),
-                mocked_args = {
-                    "result": "success",
-                    "isFile": true,
-                    "isDirectory": false,
-                    "name": "someName",
-                    "fullPath": escape("someFullPath!")
-                },
-                expected_args = {
-                    "isFile": true,
-                    "isDirectory": false,
-                    "name": "someName",
-                    "fullPath": "someFullPath!"
-                };
-
-            client.download(source, target, success, failure);
-            successCB(mocked_args);
-
-            expect(success).toHaveBeenCalledWith(expected_args);
-            expect(failure).not.toHaveBeenCalled();
-        });
-
-
-        it("should call failure callback on error event", function () {
-            var success = jasmine.createSpy(),
-                failure = jasmine.createSpy(),
-                mocked_args = {
-                    "result": "error",
-                    "code": "someCode",
-                    "source": "someSource",
-                    "target": "someTarget"
-                },
-                expected_args = {
-                    "code": "someCode",
-                    "source": "someSource",
-                    "target": "someTarget"
-                };
-
-            client.download(source, target, success, failure);
-            successCB(mocked_args);
-
-            expect(success).not.toHaveBeenCalled();
-            expect(failure).toHaveBeenCalledWith(expected_args);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.io.filetransfer/index.js b/test/unit/com.blackberry.io.filetransfer/index.js
deleted file mode 100755
index f0db0dc..0000000
--- a/test/unit/com.blackberry.io.filetransfer/index.js
+++ /dev/null
@@ -1,237 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var root = __dirname + "/../../../",
-    webview = require(root + "lib/webview"),
-    mockedPluginResult,
-    index;
-
-describe("io.filetransfer index", function () {
-    beforeEach(function () {
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("0"),
-            registerEvents: jasmine.createSpy(),
-            invoke: jasmine.createSpy("invoke")
-        };
-
-        GLOBAL.window = {
-            qnx : {
-                webplatform : {
-                    getApplication : function () {
-                        return {
-                            getEnv : function () {
-                                return "ROOT";
-                            }
-                        };
-                    }
-                }
-            }
-        };
-
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult"),
-            callbackOk: jasmine.createSpy("PluginResult.callbackOk")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        spyOn(webview, "windowGroup").andReturn(42);
-        index = require(root + "plugin/com.blackberry.io.filetransfer/index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        delete require.cache[require.resolve(root + "plugin/com.blackberry.io.filetransfer/index")];
-        index = null;
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-    });
-
-    it("makes sure JNEXT was not initialized on require", function () {
-        expect(JNEXT.require).not.toHaveBeenCalledWith("libfiletransfer");
-        expect(JNEXT.createObject).not.toHaveBeenCalledWith("libfiletransfer.FileTransfer");
-    });
-
-    describe("filetransfer upload", function () {
-        it("should call JNEXT.invoke with custom params", function () {
-            var mocked_args = {
-                    "callbackId": encodeURIComponent(JSON.stringify("123")),
-                    "filePath": encodeURIComponent(JSON.stringify("2")),
-                    "server": encodeURIComponent(JSON.stringify("3")),
-                    "options": encodeURIComponent(JSON.stringify({
-                        "fileKey": "test",
-                        "fileName": "test.gif",
-                        "mimeType": "image/gif",
-                        "params": { "test": "test" },
-                        "chunkedMode": false,
-                        "chunkSize": 512
-                    }))
-                },
-                expected_args = {
-                    "filePath": "2",
-                    "server": "3",
-                    "options": {
-                        "fileKey": "test",
-                        "fileName": "test.gif",
-                        "mimeType": "image/gif",
-                        "params": { "test": "test" },
-                        "chunkedMode": false,
-                        "chunkSize": 512,
-                        "windowGroup" : 42
-                    },
-                    "callbackId": "123"
-                };
-
-            index.upload(null, null, mocked_args, null);
-
-            expect(JNEXT.invoke).toHaveBeenCalledWith("0", "upload " + JSON.stringify(expected_args));
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("should call JNEXT.invoke with default params", function () {
-            var mocked_args = {
-                    "filePath": encodeURIComponent(JSON.stringify("2")),
-                    "server": encodeURIComponent(JSON.stringify("3")),
-                    "callbackId": encodeURIComponent(JSON.stringify("1"))
-                },
-                expected_default_args = {
-                    "filePath": "2",
-                    "server": "3",
-                    "options": {
-                        "fileKey": "file",
-                        "fileName": "image.jpg",
-                        "mimeType": "image/jpeg",
-                        "params": {},
-                        "chunkedMode": true,
-                        "chunkSize": 1024,
-                        "windowGroup" : 42
-                    },
-                    "callbackId": "1"
-                };
-
-            index.upload(null, null, mocked_args);
-
-            expect(JNEXT.invoke).toHaveBeenCalledWith("0", "upload " + JSON.stringify(expected_default_args));
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("should call failure callback with null parameters", function () {
-            var mocked_args = {
-                    "filePath": encodeURIComponent(JSON.stringify("")),
-                    "server": encodeURIComponent(JSON.stringify("")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123"))
-                };
-
-            index.upload(null, null, mocked_args, null);
-
-            expect(mockedPluginResult.noResult).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalled();
-        });
-
-        it("should fail if chunkSize is not positive", function () {
-            var mocked_args = {
-                    "filePath": encodeURIComponent(JSON.stringify("2")),
-                    "server": encodeURIComponent(JSON.stringify("3")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123")),
-                    "options": encodeURIComponent(JSON.stringify({
-                        "chunkSize": -1
-                    }))
-                };
-
-            index.upload(null, null, mocked_args, null);
-
-            expect(mockedPluginResult.noResult).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalled();
-        });
-
-        it("should translate local path", function () {
-            var params,
-                mocked_args = {
-                    "filePath": encodeURIComponent(JSON.stringify("local:///persistent/test.txt")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123")),
-                    "server": encodeURIComponent(JSON.stringify("3"))
-                };
-
-            JNEXT.invoke = jasmine.createSpy().andCallFake(function () {
-                params = JSON.parse(arguments[1].substring(7, arguments[1].length));
-            });
-
-            index.upload(null, null, mocked_args, null);       
-
-            expect(JNEXT.invoke).toHaveBeenCalled();
-            expect(params.filePath).toEqual("/ROOT/../app/native/persistent/test.txt");
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-        });
-    });
-
-    describe("filetransfer download", function () {
-        it("should call JNEXT.invoke", function () {
-            var mocked_args = {
-                    "source": encodeURIComponent(JSON.stringify("2")),
-                    "target": encodeURIComponent(JSON.stringify("3")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123"))
-                },
-                expected_args = {
-                    "source": "2",
-                    "target": "3",
-                    "callbackId": "123",
-                    "windowGroup": 42
-                };
-
-            index.download(null, null, mocked_args, null);
-
-            expect(JNEXT.invoke).toHaveBeenCalledWith("0", "download " + JSON.stringify(expected_args));
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("should call failure callback with null parameters", function () {
-            var mocked_args = {
-                    "filePath": encodeURIComponent(JSON.stringify("")),
-                    "server": encodeURIComponent(JSON.stringify("")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123"))
-                };
-
-            index.download(null, null,  mocked_args, null);
-
-            expect(mockedPluginResult.noResult).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalled();
-        });
-
-        it("should translate local path", function () {
-            var params,
-                mocked_args = {
-                    "target": encodeURIComponent(JSON.stringify("local:///persistent/test.txt")),
-                    "source": encodeURIComponent(JSON.stringify("3")),
-                    "callbackId": encodeURIComponent(JSON.stringify("123"))
-                };
-
-            JNEXT.invoke = jasmine.createSpy("JNEXT.invoke").andCallFake(function () {
-                params = JSON.parse(arguments[1].substring(9, arguments[1].length));
-            });
-
-            index.download(null, null, mocked_args, null);       
-
-            expect(JNEXT.invoke).toHaveBeenCalled();
-            expect(params.target).toEqual("/ROOT/../app/native/persistent/test.txt");
-            expect(mockedPluginResult.noResult).toHaveBeenCalled();
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.io/client.js b/test/unit/com.blackberry.io/client.js
deleted file mode 100755
index 292f66f..0000000
--- a/test/unit/com.blackberry.io/client.js
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.io",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    sandbox,
-    mockedCordova = {
-        exec: jasmine.createSpy("exec").andCallFake(function (success, fail, service, action, args) {
-            if (action === "home") {
-                success("/home");
-            } else if (action === "sharedFolder") {
-                success("/shared");
-            } else if (action === "SDCard") {
-                success("/sdcard");
-            } else if (action === "sandbox") {
-                if (args) {
-                    sandbox = args.sandbox;
-                } else {
-                    success(false);
-                }
-            }
-        }),
-        require: function () {
-            return cordova.exec;
-        }
-    };
-
-describe("io client", function () {
-
-    beforeEach(function () {
-        GLOBAL.cordova = mockedCordova;
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-    });
-
-    it("sandbox getter calls exec", function () {
-        expect(client.sandbox).toEqual(false);
-        expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "sandbox");
-    });
-
-    it("sandbox setter calls exec", function () {
-        client.sandbox = false;
-        expect(sandbox).toBeFalsy();
-        expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "sandbox", {"sandbox": false});
-    });
-
-    it("home calls exec", function () {
-        expect(client.home).toEqual("/home");
-        expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "home");
-    });
-
-    it("sharedFolder calls exec", function () {
-        expect(client.sharedFolder).toEqual("/shared");
-        expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "sharedFolder");
-    });
-
-    it("SDCard calls exec", function () {
-        expect(client.SDCard).toEqual("/sdcard");
-        expect(mockedCordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "SDCard");
-    });
-});
diff --git a/test/unit/com.blackberry.io/index.js b/test/unit/com.blackberry.io/index.js
deleted file mode 100755
index 1ff2e02..0000000
--- a/test/unit/com.blackberry.io/index.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.io/",
-    _libDir = __dirname + "/../../../lib/",
-    index = require(_apiDir + "/index"),
-    utils = require(_libDir + "/utils"),
-    mockedWebview = {
-        setSandbox: jasmine.createSpy("setSandbox"),
-        getSandbox: jasmine.createSpy("getSandbox").andReturn("0")
-    },
-    mockedApplication = {
-        getEnv: jasmine.createSpy("getEnv").andReturn("/home")
-    },
-    mockedPluginResult = {
-        ok: jasmine.createSpy("PluginResult.ok"),
-        error: jasmine.createSpy("PluginResult.error"),
-        noResult: jasmine.createSpy("PluginResult.noResult"),
-        callbackOk: jasmine.createSpy("PluginResult.callbackOk")
-    };
-
-describe("blackberry.io index", function () {
-    beforeEach(function () {
-        GLOBAL.qnx = {
-            webplatform: {
-                getApplication: function () {
-                    return mockedApplication;
-                }
-            }
-        };
-        GLOBAL.window = {
-            qnx: qnx
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-    });
-
-    describe("sandbox", function () {
-        beforeEach(function () {
-            spyOn(utils, "requireWebview").andReturn(mockedWebview);
-        });
-
-        it("sandbox called with args will set webview sandbox", function () {
-            index.sandbox(null, null, {
-                "sandbox": encodeURIComponent(JSON.stringify(false))
-            }, null);
-            expect(mockedWebview.setSandbox).toHaveBeenCalledWith(false);
-            expect(mockedPluginResult.ok).toHaveBeenCalled();
-        });
-
-        it("sandbox called without args will get webview sandbox", function () {
-            var success = jasmine.createSpy("success");
-            index.sandbox(success, null, null, null);
-            expect(mockedWebview.getSandbox).toHaveBeenCalled();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(false, false);
-        });
-    });
-
-    it("home calls getEnv('HOME')", function () {
-        index.home();
-        expect(mockedApplication.getEnv).toHaveBeenCalledWith("HOME");
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith("/home", false);
-    });
-
-    it("sharedFolder calls getEnv('HOME')", function () {
-        index.sharedFolder();
-        expect(mockedApplication.getEnv).toHaveBeenCalledWith("HOME");
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith("/home/../shared", false);
-    });
-
-    it("SDCard calls getEnv('HOME')", function () {
-        index.SDCard();
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith("/accounts/1000/removable/sdcard", false);
-    });
-});
diff --git a/test/unit/com.blackberry.notification/client.js b/test/unit/com.blackberry.notification/client.js
deleted file mode 100755
index eaa1009..0000000
--- a/test/unit/com.blackberry.notification/client.js
+++ /dev/null
@@ -1,182 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.notification",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    Notification;
-
-describe("notification client creates Notification object attached to window", function () {
-    var onShow,
-        onError;
-
-    beforeEach(function () {
-        GLOBAL.window = {
-            isFinite: isFinite
-        };
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy(),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(_apiDir + "/www/client");
-        Notification = window.Notification;
-        onShow = jasmine.createSpy("Notification onshow");
-        onError = jasmine.createSpy("Notification onerror");
-    });
-
-    afterEach(function () {
-        Notification = null;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = null;
-        onShow = null;
-        onError = null;
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-    });
-
-    describe("Namespace, methods and properties", function () {
-        it("should have a Notification object attached to window", function () {
-            expect(Notification).toBeDefined();
-        });
-
-        it("should have static permission field that equal to 'granted'", function () {
-            expect(Notification.permission).toEqual("granted");
-        });
-
-        it("should have static 'requestPermission' method", function () {
-            expect(Notification.requestPermission).toBeDefined();
-            expect(typeof Notification.requestPermission).toEqual("function");
-        });
-
-        it("should have static 'remove' method", function () {
-            expect(Notification.remove).toBeDefined();
-            expect(typeof Notification.remove).toEqual("function");
-        });
-
-        it("should have 'close' method belongs to instance", function () {
-            var notification = new Notification("N Title");
-            expect(notification.close).toBeDefined();
-            expect(typeof notification.close).toEqual("function");
-        });
-    });
-
-    describe("Constructor", function () {
-        it("should be able to construct Notification object", function () {
-            var notification = new Notification("N Title");
-            expect(notification).toBeDefined();
-            expect(typeof notification).toEqual("object");
-        });
-
-        it("should have 'close' method belongs to Notification instance", function () {
-            var notification = new Notification("N Title");
-            expect(notification.close).toBeDefined();
-            expect(typeof notification.close).toEqual("function");
-        });
-
-        it("should call exec when Notification object is created", function () {
-            new Notification("N Title");
-
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "notify", jasmine.any(Object));
-            expect(cordova.exec.mostRecentCall.args[4].id).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].title).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].options).toBeDefined();
-            expect(typeof cordova.exec.mostRecentCall.args[4].options).toEqual("object");
-            expect(cordova.exec.mostRecentCall.args[4].options.tag).toBeDefined();
-        });
-
-        it("should call exec with all required fields when calling Notification constructor", function () {
-            new Notification("N Title");
-
-            expect(cordova.exec.mostRecentCall.args[4].id).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].title).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].options).toBeDefined();
-            expect(typeof cordova.exec.mostRecentCall.args[4].options).toEqual("object");
-            expect(cordova.exec.mostRecentCall.args[4].options.tag).toBeDefined();
-        });
-
-
-        it("should throw an exception when title is not provided", function () {
-            expect(function () {
-                new Notification();
-            }).toThrow();
-        });
-
-        it("should throw an exception when title is not a string", function () {
-            expect(function () {
-                new Notification(1);
-            }).toThrow();
-        });
-    });
-
-    describe("'remove' method", function () {
-        it("should call exec when 'remove' method called", function () {
-            Notification.remove("TheTag");
-
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-        });
-
-        it("should call exec with tag when 'remove' method called", function () {
-            var tag = "TheTag";
-
-            Notification.remove(tag);
-
-            expect(cordova.exec.mostRecentCall.args[4].tag).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].tag).toEqual(tag);
-        });
-
-
-        it("should not call exec when not tag passed to 'remove'", function () {
-            Notification.remove();
-
-            expect(cordova.exec).not.toHaveBeenCalled();
-        });
-    });
-
-    describe("'close' method", function () {
-        it("should call exec with for method 'remove' when 'close' method is called", function () {
-            var notification = new Notification("TheTitle");
-
-            notification.close();
-
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-        });
-
-        it("should call exec with corresponding tag when 'close' method called", function () {
-            var tag = "TheTag",
-                notification = new Notification("TheTitle", {'tag': tag});
-
-            notification.close();
-
-            expect(cordova.exec.mostRecentCall.args[4].tag).toBeDefined();
-            expect(cordova.exec.mostRecentCall.args[4].tag).toEqual(tag);
-        });
-
-        it("should always call exec with tag set even if no tag was provided to 'close' method", function () {
-            var notification = new Notification("TheTitle");
-            cordova.exec.reset();
-
-            notification.close();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-            expect(cordova.exec.mostRecentCall.args[4].tag).toBeDefined();
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.notification/index.js b/test/unit/com.blackberry.notification/index.js
deleted file mode 100755
index 8441c6f..0000000
--- a/test/unit/com.blackberry.notification/index.js
+++ /dev/null
@@ -1,232 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.notification/",
-    _libDir = __dirname + "/../../../lib/",
-    index,
-    mockNotification,
-    MockPluginResult,
-    successCB,
-    failCB;
-
-describe("notification index", function () {
-    beforeEach(function () {
-        mockNotification = {
-            notify: jasmine.createSpy("Notification 'notify' method"),
-            remove: jasmine.createSpy("Notification 'remove' method")
-        };
-
-        MockPluginResult = function () {};
-        MockPluginResult.prototype.callbackOk = jasmine.createSpy("PluginResult.callbackOk");
-        MockPluginResult.prototype.callbackError = jasmine.createSpy("PluginResult.callbackError");
-        MockPluginResult.prototype.ok = jasmine.createSpy("PluginResult.ok");
-        MockPluginResult.prototype.error = jasmine.createSpy("PluginResult.error");
-        MockPluginResult.prototype.noResult = jasmine.createSpy("PluginResult.noResult");
-
-
-        GLOBAL.qnx = {
-            webplatform: {
-                notification: mockNotification
-            }
-        };
-
-        GLOBAL.PluginResult = MockPluginResult;
-
-        index = require(_apiDir + "index");
-        successCB = jasmine.createSpy("success callback");
-        failCB = jasmine.createSpy("fail callback");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.qnx;
-        delete GLOBAL.PluginResult;
-        mockNotification = null;
-        index = null;
-        successCB = null;
-        failCB = null;
-        delete require.cache[require.resolve(_apiDir + "index")];
-    });
-
-    describe("methods", function () {
-        var args,
-            notifyArgs;
-
-        beforeEach(function () {
-            args = {
-                id : "100",
-                title : JSON.stringify(encodeURIComponent("TheTitle")),
-                options: encodeURIComponent(JSON.stringify({
-                    tag: "TheTag"
-                }))
-            };
-            notifyArgs = {
-                id: 100,
-                title: "TheTitle",
-                options: {
-                    tag: "TheTag"
-                }
-            };
-        });
-
-        afterEach(function () {
-            args = null;
-            notifyArgs = null;
-        });
-
-        it("Should have 'notify' method defined", function () {
-            expect(index.notify).toBeDefined();
-            expect(typeof index.notify).toEqual("function");
-        });
-
-        it("Should have 'remove' method defined", function () {
-            expect(index.remove).toBeDefined();
-            expect(typeof index.remove).toEqual("function");
-        });
-
-        describe("notify method", function () {
-            it("Should invoke notification notify method when making a call with required parameters", function () {
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should invoke notification notify method when making a call with all parameters", function () {
-                args.options = JSON.stringify({
-                    tag: encodeURIComponent("TheTag"),
-                    'body': encodeURIComponent("TheSubtitle"),
-                    'target': encodeURIComponent("The.Target"),
-                    'targetAction': encodeURIComponent("The.Target.Action"),
-                    'payload': encodeURIComponent("Payload"),
-                    'payloadType': encodeURIComponent("PayloadType"),
-                    'payloadURI': encodeURIComponent("http://www.payload.uri")
-                });
-
-                notifyArgs.options.body = "TheSubtitle";
-                notifyArgs.options.target = "The.Target";
-                notifyArgs.options.targetAction = "The.Target.Action";
-                notifyArgs.options.payload = "Payload";
-                notifyArgs.options.payloadType = "PayloadType";
-                notifyArgs.options.payloadURI = "http://www.payload.uri";
-
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should invoke notification notify with default targetAction if target is provided but no targetAction wasn't", function () {
-                var defaultTargetAction = "bb.action.OPEN";
-
-                args.options = JSON.stringify({tag: encodeURIComponent("TheTag"), 'target': encodeURIComponent("The.Target")});
-                notifyArgs.options.target = "The.Target";
-                notifyArgs.options.targetAction = defaultTargetAction;
-
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should invoke notificatoin notify with no default targetAction if target is an empty string", function () {
-                args.options = JSON.stringify({tag: encodeURIComponent("TheTag"), 'target': ""});
-                notifyArgs.options.target = "";
-
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(mockNotification.notify.mostRecentCall.args[0].targetAction).not.toBeDefined();
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should invoke notification notify with no default targetAction if target is not provided", function () {
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(args.options.target).not.toBeDefined();
-                expect(args.options.targetAction).not.toBeDefined();
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should set target from first occurrence of applicaiton type target in config and pass it to notify method", function () {
-                var viewerTarget = "bb.notification.target.viewer",
-                    appTargetFirst = "bb.notification.target.app.first",
-                    appTargetSecond = "bb.notification.target.app.second",
-                    defaultTargetAction = "bb.action.OPEN",
-                    config = require(_libDir + "config");
-
-
-                config["invoke-target"] = [{
-                    "@": {"id": viewerTarget},
-                    "type": "VIEWER"
-                },
-                {
-                    "@": {"id": appTargetFirst},
-                    "type": "APPLICATION"
-                },
-                {
-                    "@": {"id": appTargetSecond},
-                    "type": "APPLICATION"
-                }];
-
-                this.after(function () {
-                    delete require.cache[require.resolve(_libDir + "config")];
-                });
-
-                notifyArgs.options.target = appTargetFirst;
-                notifyArgs.options.targetAction = defaultTargetAction;
-
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should not set target and targetAction if not provided and no in config", function () {
-                index.notify(successCB, failCB, args);
-                expect(mockNotification.notify).toHaveBeenCalledWith(notifyArgs, jasmine.any(Function));
-                expect(args.options.target).not.toBeDefined();
-                expect(args.options.targetAction).not.toBeDefined();
-                expect(MockPluginResult.prototype.noResult).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-        });
-        describe("remove method", function () {
-            it("Should call notification remove method when remove is called.", function () {
-                index.remove(successCB, failCB, {tag: encodeURIComponent(JSON.stringify("TheTag"))});
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-                expect(MockPluginResult.prototype.ok).toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).not.toHaveBeenCalled();
-                expect(mockNotification.remove).toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-
-            it("Should throw an error when no tag is provided.", function () {
-                index.remove(successCB, failCB);
-                expect(mockNotification.remove).not.toHaveBeenCalledWith(notifyArgs.options.tag);
-                expect(MockPluginResult.prototype.ok).not.toHaveBeenCalled();
-                expect(MockPluginResult.prototype.error).toHaveBeenCalledWith(jasmine.any(String));
-                expect(mockNotification.remove).not.toHaveBeenCalledWith(notifyArgs.options.tag);
-            });
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.payment/client.js b/test/unit/com.blackberry.payment/client.js
deleted file mode 100755
index 2916329..0000000
--- a/test/unit/com.blackberry.payment/client.js
+++ /dev/null
@@ -1,313 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.payment",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    mockedWebworks;
-
-describe("payment client", function () {
-    beforeEach(function () {
-        mockedWebworks = {
-            exec: jasmine.createSpy("exec")
-        };
-        GLOBAL.window = {
-            webworks: mockedWebworks
-        };
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        mockedWebworks = null;
-        delete GLOBAL.window;
-        client = null;
-    });
-
-    describe("developmentMode", function () {
-        it("getting developmentMode should return value from exec", function () {
-            mockedWebworks.exec = jasmine.createSpy("exec").andCallFake(function (success, fail, service, action, args) {
-                success(false);
-            });
-            expect(client.developmentMode).toEqual(false);
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "developmentMode");
-        });
-
-        it("setting developmentMode should call exec with user-specified value", function () {
-            mockedWebworks.exec = jasmine.createSpy("exec");
-            client.developmentMode = true;
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "developmentMode", {
-                "developmentMode": true
-            });
-        });
-    });
-
-    describe("purchase", function () {
-        it("calling purchase() with invalid params will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.purchase(123, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Purchase argument is not provided or is not a object."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling purchase() with right params should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error"),
-                args = {
-                    "digitalGoodID": "12345",
-                    "digitalGoodSKU": "12345",
-                    "digitalGoodName": "Hello World",
-                    "metaData": "meta",
-                    "purchaseAppName": "test app",
-                    "purchaseAppIcon": "icon",
-                    "extraParameters": {}
-                };
-
-            client.purchase(args, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "purchase", args, true);
-        });
-    });
-
-    describe("getExistingPurchases", function () {
-        it("calling getExistingPurchases() with non-boolean will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getExistingPurchases(123, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Refresh argument is not provided or is not a boolean value."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling getExistingPurchases() with right params should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getExistingPurchases(true, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "getExistingPurchases", {
-                "refresh": true
-            }, true);
-        });
-    });
-
-    describe("cancelSubscription", function () {
-        it("calling cancelSubscription with non-string will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.cancelSubscription(123, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Transaction ID is not provided or not a string value."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling cancelSubscription with right params should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.cancelSubscription("abc", successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "cancelSubscription", {
-                "transactionID": "abc"
-            }, true);
-        });
-    });
-
-    describe("getPrice", function () {
-        it("calling getPrice with non-string will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getPrice(123, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Either ID or SKU needs to be provided as string."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling getPrice with missing sku or id will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting({
-                foo: "bar"
-            }, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Either ID or SKU needs to be provided as string."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling getPrice with sku should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getPrice({
-                "sku": "abc"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "getPrice", {
-                "id": "",
-                "sku": "abc"
-            }, true);
-        });
-
-        it("calling getPrice with id should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getPrice({
-                "id": "123"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "getPrice", {
-                "sku": "",
-                "id": "123"
-            }, true);
-        });
-
-        it("calling getPrice with both id and sku should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.getPrice({
-                "sku": "abc",
-                "id": "123"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "getPrice", {
-                "sku": "abc",
-                "id": "123"
-            }, true);
-        });
-    });
-
-    describe("checkExisting", function () {
-        it("calling checkExisting with non-string will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting(123, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Either ID or SKU needs to be provided as string."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling checkExisting with missing sku or id will invoke error callback", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting({
-                foo: "bar"
-            }, successCb, errorCb);
-
-            expect(successCb).not.toHaveBeenCalled();
-            expect(errorCb).toHaveBeenCalledWith({
-                errorID: "-1",
-                errorText: "Either ID or SKU needs to be provided as string."
-            });
-            expect(mockedWebworks.exec).not.toHaveBeenCalled();
-        });
-
-        it("calling checkExisting with sku should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting({
-                "sku": "abc"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "checkExisting", {
-                "sku": "abc",
-                "id": ""
-            }, true);
-        });
-
-        it("calling checkExisting with id should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting({
-                "id": "123"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "checkExisting", {
-                "sku": "",
-                "id": "123"
-            }, true);
-        });
-
-        it("calling checkExisting with both id and sku should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkExisting({
-                "sku": "abc",
-                "id": "123"
-            }, successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "checkExisting", {
-                "sku": "abc",
-                "id": "123"
-            }, true);
-        });
-    });
-
-    describe("checkAppSubscription", function () {
-        it("calling checkExisting with right params should call exec", function () {
-            var successCb = jasmine.createSpy("success"),
-                errorCb = jasmine.createSpy("error");
-
-            client.checkAppSubscription(successCb, errorCb);
-
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "checkExisting", {
-                "sku": "",
-                "id": "-1"
-            }, true);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.payment/index.js b/test/unit/com.blackberry.payment/index.js
deleted file mode 100755
index 9d88a46..0000000
--- a/test/unit/com.blackberry.payment/index.js
+++ /dev/null
@@ -1,265 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.payment/",
-    _libDir = __dirname + "/../../../lib/",
-    index,
-    mockJnextObjId = 123,
-    mockWindowGroup = "bar1234",
-    bpsSuccess,
-    mockSuccessResult = {
-        successState: {
-            state: "SUCCESS"
-        }
-    },
-    mockErrorResult;
-
-function getMockErrorObj(msg) {
-    return {
-        successState: {
-            state: "BPS_FAILURE"
-        },
-        errorObject: {
-            errorID: "-1",
-            errorText: msg
-        }
-    };
-}
-
-function testPurchase(mockSuccess) {
-    var successCb = jasmine.createSpy("success"),
-        failCb = jasmine.createSpy("fail"),
-        args = {};
-
-    args.digitalGoodID = encodeURIComponent(JSON.stringify("12345"));
-    args.digitalGoodSKU = encodeURIComponent(JSON.stringify("abcde"));
-    args.digitalGoodName = encodeURIComponent(JSON.stringify("foo"));
-    args.metaData = encodeURIComponent(JSON.stringify("xyz"));
-    args.purchaseAppName = encodeURIComponent(JSON.stringify("app name"));
-    args.purchaseAppIcon = encodeURIComponent(JSON.stringify("app icon"));
-    args.extraParameters = encodeURIComponent(JSON.stringify(""));
-
-    bpsSuccess = mockSuccess;
-
-    index.purchase(successCb, failCb, args);
-
-    Object.getOwnPropertyNames(args).forEach(function (key) {
-        args[key] = JSON.parse(decodeURIComponent(args[key]));
-    });
-
-    args.windowGroup = mockWindowGroup;
-
-    expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "purchase " + JSON.stringify(args));
-    expect(successCb).toHaveBeenCalledWith(mockSuccess ? mockSuccessResult : getMockErrorObj("Purchase Failed. Payment Service Error."));
-}
-
-function testCancelSubscription(mockSuccess) {
-    var successCb = jasmine.createSpy("success"),
-        failCb = jasmine.createSpy("fail"),
-        args = {};
-
-    args.transactionID = encodeURIComponent(JSON.stringify("12345"));
-
-    bpsSuccess = mockSuccess;
-
-    index.cancelSubscription(successCb, failCb, args);
-
-    Object.getOwnPropertyNames(args).forEach(function (key) {
-        args[key] = JSON.parse(decodeURIComponent(args[key]));
-    });
-
-    args.windowGroup = mockWindowGroup;
-
-    expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "cancelSubscription " + JSON.stringify(args));
-    expect(successCb).toHaveBeenCalledWith(mockSuccess ? mockSuccessResult : getMockErrorObj("cancelSubscription Failed. Payment Service Error."));
-}
-
-function testGetPrice(mockSuccess) {
-    var successCb = jasmine.createSpy("success"),
-        failCb = jasmine.createSpy("fail"),
-        args = {};
-
-    args.id = encodeURIComponent(JSON.stringify("123"));
-    args.sku = encodeURIComponent(JSON.stringify("abc"));
-
-    bpsSuccess = mockSuccess;
-
-    index.getPrice(successCb, failCb, args);
-
-    Object.getOwnPropertyNames(args).forEach(function (key) {
-        args[key] = JSON.parse(decodeURIComponent(args[key]));
-    });
-
-    args.windowGroup = mockWindowGroup;
-
-    expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getPrice " + JSON.stringify(args));
-    expect(successCb).toHaveBeenCalledWith(mockSuccess ? mockSuccessResult : getMockErrorObj("getPrice Failed. Payment Service Error."));
-}
-
-function testGetExistingPurchases(mockSuccess) {
-    var successCb = jasmine.createSpy("success"),
-        failCb = jasmine.createSpy("fail"),
-        args = {};
-
-    args.refresh = encodeURIComponent(JSON.stringify(true));
-
-    bpsSuccess = mockSuccess;
-
-    index.getExistingPurchases(successCb, failCb, args);
-
-    Object.getOwnPropertyNames(args).forEach(function (key) {
-        args[key] = JSON.parse(decodeURIComponent(args[key]));
-    });
-
-    args.windowGroup = mockWindowGroup;
-
-    expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getExistingPurchases " + JSON.stringify(args));
-    expect(successCb).toHaveBeenCalledWith(mockSuccess ? mockSuccessResult : getMockErrorObj("getExistingPurchases Failed. Payment Service Error."));
-}
-
-function testCheckExisting(mockSuccess) {
-    var successCb = jasmine.createSpy("success"),
-        failCb = jasmine.createSpy("fail"),
-        args = {};
-
-    args.id = encodeURIComponent(JSON.stringify("123"));
-    args.sku = encodeURIComponent(JSON.stringify("abc"));
-
-    bpsSuccess = mockSuccess;
-
-    index.checkExisting(successCb, failCb, args);
-
-    Object.getOwnPropertyNames(args).forEach(function (key) {
-        args[key] = JSON.parse(decodeURIComponent(args[key]));
-    });
-
-    args.windowGroup = mockWindowGroup;
-
-    expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "checkExisting " + JSON.stringify(args));
-    expect(successCb).toHaveBeenCalledWith(mockSuccess ? mockSuccessResult : getMockErrorObj("checkExisting Failed. Payment Service Error."));
-}
-
-describe("payment index", function () {
-    beforeEach(function () {
-        GLOBAL.window = GLOBAL;
-        GLOBAL.window.qnx = {
-            webplatform: {
-                getController: function () {
-                    return {
-                        windowGroup: mockWindowGroup
-                    };
-                }
-            }
-        };
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy("JNEXT.require").andCallFake(function () {
-                return true;
-            }),
-            createObject: jasmine.createSpy("JNEXT.createObject").andCallFake(function () {
-                return mockJnextObjId;
-            }),
-            invoke: jasmine.createSpy("JNEXT.invoke").andCallFake(function () {
-                if (bpsSuccess) {
-                    return JSON.stringify(mockSuccessResult);
-                } else {
-                    return "-1";
-                }
-            }),
-            registerEvents: jasmine.createSpy("JNEXT.registerEvent")
-        };
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        index = null;
-    });
-
-    describe("developmentMode", function () {
-        it("calling it with arg invoke jnext setDevelopmentMode", function () {
-            var successCb = jasmine.createSpy("success"),
-                failCb = jasmine.createSpy("fail"),
-                args = {};
-
-            args.developmentMode = encodeURIComponent(JSON.stringify(true));
-
-            index.developmentMode(successCb, failCb, args);
-
-            Object.getOwnPropertyNames(args).forEach(function (key) {
-                args[key] = JSON.parse(decodeURIComponent(args[key]));
-            });
-
-            expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "setDevelopmentMode " + JSON.stringify(args));
-        });
-
-        it("calling it without arg invoke jnext getDevelopmentMode", function () {
-            var successCb = jasmine.createSpy("success"),
-                failCb = jasmine.createSpy("fail");
-
-            index.developmentMode(successCb, failCb);
-
-            expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getDevelopmentMode");
-        });
-    });
-
-    describe("purchase", function () {
-        it("invoke jnext purchase, invoke callback with success", function () {
-            testPurchase(true);
-        });
-
-        it("invoke jnext purchase, invoke callback with error", function () {
-            testPurchase(false);
-        });
-    });
-
-    describe("cancelSubscription", function () {
-        it("invoke jnext cancelSubscription, invoke callback with success", function () {
-            testCancelSubscription(true);
-        });
-
-        it("invoke jnext cancelSubscription, invoke callback with error", function () {
-            testCancelSubscription(false);
-        });
-    });
-
-    describe("getPrice", function () {
-        it("invoke jnext getPrice, invoke callback with success", function () {
-            testGetPrice(true);
-        });
-
-        it("invoke jnext getPrice, invoke callback with error", function () {
-            testGetPrice(false);
-        });
-    });
-
-    describe("getExistingPurchases", function () {
-        it("invoke jnext getExistingPurchases, invoke callback with success", function () {
-            testGetExistingPurchases(true);
-        });
-
-        it("invoke jnext getExistingPurchases, invoke callback with error", function () {
-            testGetExistingPurchases(false);
-        });
-    });
-
-    describe("checkExisting", function () {
-        it("invoke jnext checkExisting, invoke callback with success", function () {
-            testCheckExisting(true);
-        });
-
-        it("invoke jnext checkExisting, invoke callback with error", function () {
-            testCheckExisting(false);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.pim.calendar/CalendarEvent.js b/test/unit/com.blackberry.pim.calendar/CalendarEvent.js
deleted file mode 100755
index ad1c966..0000000
--- a/test/unit/com.blackberry.pim.calendar/CalendarEvent.js
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
-*/
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.pim.calendar",
-    _ID = "com.blackberry.pim.calendar",
-    CalendarEvent,
-    CalendarError,
-    mockedExec = jasmine.createSpy("exec");
-
-describe("pim.calendar CalendarEvent", function () {
-    beforeEach(function () {
-        GLOBAL.window = {
-            parseInt: jasmine.createSpy().andCallFake(function (obj) {
-                return Number(obj);
-            }),
-            isNaN: jasmine.createSpy().andCallFake(function (obj) {
-                return obj === "abc";
-            })
-        };
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(mockedExec)
-        };
-        CalendarEvent = require(_apiDir + "/www/CalendarEvent");
-        CalendarError = require(_apiDir + "/CalendarError");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-    });
-
-    describe("constructor", function () {
-        it("can set the default values", function () {
-            var evt = new CalendarEvent(),
-                field;
-
-            for (field in evt) {
-                if (evt.hasOwnProperty(field)) {
-                    if (field === "reminder") {
-                        expect(evt[field]).toBe(15);
-                    } else if (field === "transparency") {
-                        expect(evt[field]).toBe(2);
-                    } else if (field === "status") {
-                        expect(evt[field]).toBe(0);
-                    } else if (field === "description" || field === "location" || field === "summary" || field === "timezone" || field === "url") {
-                        expect(evt[field]).toBe("");
-                    } else if (field === "birthday" || field === "allDay") {
-                        expect(evt[field]).toBeFalsy();
-                    } else if (field === "attendees") {
-                        expect(evt[field]).toEqual([]);
-                    } else if (field === "hash") {
-                        expect(evt[field]).toEqual(0);
-                    } else {
-                        expect(evt[field]).toBe(null);
-                    }
-                }
-            }
-        });
-
-        it("can populate the object based on the properties parameter", function () {
-            var evt = new CalendarEvent({
-                    "summary": "My test event",
-                    "reminder": 60,
-                    "location": "Home"
-                }),
-                field;
-
-            for (field in evt) {
-                if (evt.hasOwnProperty(field)) {
-                    if (field === "reminder") {
-                        expect(evt[field]).toBe(60);
-                    } else if (field === "transparency") {
-                        expect(evt[field]).toBe(2);
-                    } else if (field === "summary") {
-                        expect(evt[field]).toBe("My test event");
-                    } else if (field === "location") {
-                        expect(evt[field]).toBe("Home");
-                    } else if (field === "status") {
-                        expect(evt[field]).toBe(0);
-                    } else if (field === "description" || field === "timezone" || field === "url") {
-                        expect(evt[field]).toBe("");
-                    } else if (field === "birthday" || field === "allDay") {
-                        expect(evt[field]).toBeFalsy();
-                    } else if (field === "attendees") {
-                        expect(evt[field]).toEqual([]);
-                    } else if (field === "hash") {
-                        expect(evt[field]).toEqual(0);
-                    } else {
-                        expect(evt[field]).toBe(null);
-                    }
-                }
-            }
-        });
-
-        it("populates the id, parentId, and folder and makes them read-only", function () {
-            var folder = {
-                    "id": "3",
-                    "accountId": "123343",
-                    "ownerEmail": "abc@blah.com"
-                },
-                evt = new CalendarEvent({
-                    "id": "3",
-                    "folder": folder,
-                    "parentId": "2"
-                });
-
-            expect(evt.id).toBe("3");
-            expect(evt.parentId).toBe("2");
-            expect(evt.folder.id).toEqual(folder.id);
-            expect(evt.folder.accountId).toEqual(folder.accountId);
-            expect(evt.folder.ownerEmail).toEqual(folder.ownerEmail);
-            evt.id = "12345";
-            evt.parentId = "23423";
-            evt.folder = {
-                "a": "12"
-            };
-            expect(evt.id).toBe("3");
-            expect(evt.parentId).toBe("2");
-            expect(evt.folder.accountId).toEqual(folder.accountId);
-            expect(evt.folder.ownerEmail).toEqual(folder.ownerEmail);
-        });
-    });
-
-    describe("save", function () {
-        it("calls the success callback if success flag is true", function () {
-            var start = new Date("Jan 1, 2014, 12:00"),
-                end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "start": start,
-                    "end": end
-                }),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            evt.save(onSaveSuccess, onSaveError);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
-        });
-
-        it("calls the error callback if start/end date is missing", function () {
-            var end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "end": end
-                }),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            evt.save(onSaveSuccess, onSaveError);
-
-            expect(onSaveSuccess).not.toHaveBeenCalled();
-            expect(onSaveError).toHaveBeenCalledWith({"code": CalendarError.INVALID_ARGUMENT_ERROR});
-        });
-
-        it("calls the error callback if end date is before start date", function () {
-            var start = new Date("Jan 1, 2014, 13:00"),
-                end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "start": start,
-                    "end": end
-                }),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            evt.save(onSaveSuccess, onSaveError);
-
-            expect(onSaveSuccess).not.toHaveBeenCalled();
-            expect(onSaveError).toHaveBeenCalledWith({"code": CalendarError.INVALID_ARGUMENT_ERROR});
-        });
-    });
-
-    describe("remove", function () {
-        it("calls the success callback", function () {
-            var start = new Date("Jan 1, 2014, 12:00"),
-                end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "start": start,
-                    "end": end,
-                    "id": "1",
-                    "folder": {
-                        "accountId": "1"
-                    }
-                }),
-                onRemoveSuccess = jasmine.createSpy("onRemoveSuccess"),
-                onRemoveError = jasmine.createSpy("onRemoveError");
-
-            evt.remove(onRemoveSuccess, onRemoveError);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-        });
-
-        it("calls the error callback if event has no id", function () {
-            var evt = new CalendarEvent(),
-                onRemoveSuccess = jasmine.createSpy("onRemoveSuccess"),
-                onRemoveError = jasmine.createSpy("onRemoveError");
-
-            spyOn(console, "log");
-
-            evt.remove(onRemoveSuccess, onRemoveError);
-
-            expect(onRemoveSuccess).not.toHaveBeenCalled();
-            expect(onRemoveError).toHaveBeenCalledWith({"code": CalendarError.INVALID_ARGUMENT_ERROR});
-        });
-    });
-
-    describe("createExceptionEvent", function () {
-        it("returns an event with id set to null and parentId set to original event id", function () {
-            var start = new Date("Jan 1, 2014, 12:00"),
-                end = new Date("Jan 1, 2014, 12:30"),
-                evt = new CalendarEvent({
-                    "start": start,
-                    "end": end,
-                    "id": "1",
-                    "folder": {
-                        "accountId": "1"
-                    }
-                }),
-                exceptionEvt = evt.createExceptionEvent(new Date("Jan 1, 2014, 12:00"));
-
-            expect(exceptionEvt.id).toEqual(null);
-            expect(exceptionEvt.parentId).toEqual("1");
-            expect(exceptionEvt.originalStartTime.toISOString()).toEqual(new Date("Jan 1, 2014, 12:00").toISOString());
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.pim.calendar/calendarUtils.js b/test/unit/com.blackberry.pim.calendar/calendarUtils.js
deleted file mode 100755
index 39efa8d..0000000
--- a/test/unit/com.blackberry.pim.calendar/calendarUtils.js
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.pim.calendar/",
-    _libDir = __dirname + "/../../../lib/",
-    CalendarError = require(_apiDir + "CalendarError"),
-    calendarUtils = require(_apiDir + "calendarUtils");
-
-describe("pim.calendar/calendarUtils", function () {
-    it("isDate can distinguish Date correctly", function () {
-        expect(calendarUtils.isDate(new Date())).toBeTruthy();
-        expect(calendarUtils.isDate({})).toBeFalsy();
-    });
-
-    it("isObject can distinguish Object correctly", function () {
-        expect(calendarUtils.isObject({})).toBeTruthy();
-        expect(calendarUtils.isObject(3)).toBeFalsy();
-    });
-
-    it("isBeforeOrEqual works correctly", function () {
-        var date1 = new Date("Jan 1, 2012, 13:00"),
-            date2 = new Date("Jan 1, 2012, 13:01"),
-            date3 = new Date("Jan 1, 2012, 12:59"),
-            date4 = new Date("Jan 1, 2012, 13:00");
-
-        expect(calendarUtils.isBeforeOrEqual(date1, date2)).toBeTruthy();
-        expect(calendarUtils.isBeforeOrEqual(date1, date3)).toBeFalsy();
-        expect(calendarUtils.isBeforeOrEqual(date1, date4)).toBeTruthy();
-    });
-
-    it("validateFindArguments", function () {
-        var option1 = {},
-            option2 = {
-                "detail": 123
-            },
-            option3 = {
-                "filter": {
-                    "substring": "abc"
-                }
-            };
-
-        expect(calendarUtils.validateFindArguments(option1)).toBeTruthy();
-        expect(calendarUtils.validateFindArguments(option2)).toBeFalsy();
-        expect(calendarUtils.validateFindArguments(option3)).toBeTruthy();
-    });
-});
diff --git a/test/unit/com.blackberry.pim.calendar/client.js b/test/unit/com.blackberry.pim.calendar/client.js
deleted file mode 100755
index 083ee4d..0000000
--- a/test/unit/com.blackberry.pim.calendar/client.js
+++ /dev/null
@@ -1,181 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.pim.calendar",
-    _ID = "com.blackberry.pim.calendar",
-    calendar,
-    CalendarFindOptions,
-    CalendarEvent,
-    CalendarRepeatRule,
-    CalendarErr,
-    CalendarFolder,
-    CalendarEventFilter,
-    Attendee,
-    mockedExec = jasmine.createSpy("exec").andCallFake(function (success, fail, service, action, args) {
-        if (action === "getCalendarAccounts") {
-            success([
-                {id: 1, name: "account1", enterprise: false},
-                {id: 2, name: "account2", enterprise: true}
-            ]);
-        } else if (action === "getDefaultCalendarAccount") {
-            success({id: 1, name: "account1", enterprise: false});
-        } else if (action === "getCalendarFolders") {
-            success([
-                {id: 1, name: "folder1"},
-                {id: 2, name: "folder2"}
-            ]);
-        } else if (action === "getDefaultCalendarFolder") {
-            success({id: 1, name: "default folder"});
-        } else if (action === "getEvent") {
-            success({id: 1});
-        }
-    });
-
-describe("pim.calendar/client", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(mockedExec)
-        };
-        GLOBAL.window = {
-            parseInt: jasmine.createSpy().andCallFake(function (obj) {
-                return Number(obj);
-            }),
-            isNaN: jasmine.createSpy().andCallFake(function (obj) {
-                return obj === "abc";
-            })
-        };
-        calendar = require(_apiDir + "/www/client");
-        CalendarFindOptions = calendar.CalendarFindOptions;
-        CalendarEvent = calendar.CalendarEvent;
-        CalendarRepeatRule = calendar.CalendarRepeatRule;
-        CalendarErr = calendar.CalendarError;
-        CalendarFolder = calendar.CalendarFolder;
-        CalendarEventFilter = calendar.CalendarEventFilter;
-        Attendee = calendar.Attendee;
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete GLOBAL.window;
-    });
-
-    describe("Testing createEvent", function () {
-        it("has method createEvent", function () {
-            expect(calendar.createEvent).toBeDefined();
-        });
-
-        it("returns an event when call createEvent with given properties", function () {
-            var summary = "WebWorks API UNIT TEST: pim.calendar.createEvent",
-                start = new Date(),
-                end   = new Date(start.valueOf() + 60 * 60 * 1000),
-                properties = {
-                    summary: summary,
-                    start  : start,
-                    end    : end
-                },
-                event = calendar.createEvent(properties);
-            expect(event).toBeDefined();
-            expect(event.start).toEqual(start);
-            expect(event.end).toEqual(end);
-            expect(event.summary).toEqual(summary);
-        });
-    });
-
-    describe("Testing getCalendarAccounts", function () {
-        it("has method getCalendarAccounts", function () {
-            expect(calendar.getCalendarAccounts).toBeDefined();
-        });
-
-        it("returns all accounts of calendar", function () {
-            var accounts = calendar.getCalendarAccounts();
-            expect(accounts).toBeDefined();
-            expect(accounts.length).toBeGreaterThan(0);
-        });
-    });
-
-    describe("Testing getDefaultCalendarAccount", function () {
-        it("has method getDefaultCalendarAccount", function () {
-            expect(calendar.getDefaultCalendarAccount).toBeDefined();
-        });
-
-        it("returns default account of calendar", function () {
-            var account = calendar.getDefaultCalendarAccount();
-            expect(account).toBeDefined();
-        });
-    });
-
-    describe("Testing getCalendarFolders", function () {
-        it("has method getCalendarFolders", function () {
-            expect(calendar.getCalendarFolders).toBeDefined();
-        });
-
-        it("returns folders of calendar", function () {
-            var folders = calendar.getCalendarFolders();
-            expect(folders).toBeDefined();
-        });
-    });
-
-    describe("Testing getDefaultCalendarFolder", function () {
-        it("has method getDefaultCalendarFolder", function () {
-            expect(calendar.getDefaultCalendarFolder).toBeDefined();
-        });
-
-        it("returns default folder of calendar", function () {
-            var folder = calendar.getDefaultCalendarFolder();
-            expect(folder).toBeDefined();
-        });
-    });
-
-    describe("Testing getEvent", function () {
-        it("has method getEvent", function () {
-            expect(calendar.getEvent).toBeDefined();
-        });
-
-        it("returns the event with specific eventId and folder in calendar", function () {
-            var event = calendar.getEvent();
-            expect(event).toBeDefined();
-        });
-    });
-
-    describe("Testing findEvents", function () {
-        it("has method findEvents", function () {
-            expect(calendar.findEvents).toBeDefined();
-        });
-
-        it("returns the event with specific criteria in calendar", function () {
-            var findOptions = {
-                    "filter": {
-                        "substring": "wwt006",
-                        "expandRecurring": false
-                    },
-                    "detail": CalendarFindOptions.DETAIL_FULL
-                },
-                onSuccess = jasmine.createSpy("onSuccess").andCallFake(function (events) {
-                    expect(events).toBeDefined();
-                }),
-                onError   = jasmine.createSpy("onError").andCallFake(function (error) {
-                    expect(error).toBeDefined();
-                });
-            calendar.findEvents(findOptions, onSuccess, onError);
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "find", {
-                "options": findOptions
-            });
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.pim.calendar/index.js b/test/unit/com.blackberry.pim.calendar/index.js
deleted file mode 100755
index 4a9b097..0000000
--- a/test/unit/com.blackberry.pim.calendar/index.js
+++ /dev/null
@@ -1,350 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.pim.calendar/",
-    _libDir = __dirname + "/../../../lib/",
-    utils = require(_libDir + "utils"),
-    CalendarFindOptions = require(_apiDir + "CalendarFindOptions"),
-    CalendarEvent,
-    CalendarError = require(_apiDir + "CalendarError"),
-    index,
-    mockJnextObjId = 123,
-    mockedPluginResult = {
-        callbackOk: jasmine.createSpy(),
-        callbackError: jasmine.createSpy(),
-        noResult: jasmine.createSpy(),
-        ok: jasmine.createSpy(),
-        error: jasmine.createSpy()
-    },
-    mockedExec = jasmine.createSpy("exec");
-
-describe("pim.calendar/index", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(mockedExec)
-        };
-        CalendarEvent = require(_apiDir + "www/CalendarEvent");
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy("JNEXT.require").andCallFake(function () {
-                return true;
-            }),
-            createObject: jasmine.createSpy("JNEXT.createObject").andCallFake(function () {
-                return mockJnextObjId;
-            }),
-            invoke: jasmine.createSpy("JNEXT.invoke").andCallFake(function (id, command) {
-                if (command.indexOf("getCalendarFolders") !== -1) {
-                    return JSON.stringify([{
-                        id: "1",
-                        accountId: "1"
-                    }]);
-                } else if (command.indexOf("getDefaultCalendarFolder") !== -1) {
-                    return JSON.stringify({
-                        id: "1",
-                        accountId: "1"
-                    });
-                } else if (command.indexOf("getCalendarAccounts") !== -1) {
-                    return JSON.stringify([{
-                        id: "1"
-                    }]);
-                } else if (command.indexOf("getDefaultCalendarAccount") !== -1) {
-                    return JSON.stringify({
-                        id: "1"
-                    });
-                } else if (command.indexOf("getEvent") !== -1) {
-                    return JSON.stringify({
-                        _success: true,
-                        event: {
-                            id: "123"
-                        }
-                    });
-                } else {
-                    return JSON.stringify({});
-                }
-            }),
-            registerEvents: jasmine.createSpy("JNEXT.registerEvent")
-        };
-        GLOBAL.window = {
-            qnx: {
-                webplatform: {
-                    device: {
-                        timezone: "America/New_York"
-                    }
-                }
-            }
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        GLOBAL.JNEXT = null;
-        GLOBAL.cordova = null;
-        index = null;
-    });
-
-    it("JNEXT require/createObject/registerEvents are not called upon requiring index", function () {
-        expect(JNEXT.require).not.toHaveBeenCalled();
-        expect(JNEXT.createObject).not.toHaveBeenCalled();
-        expect(JNEXT.registerEvents).not.toHaveBeenCalled();
-    });
-
-    it("find - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            findOptions = {
-                limit: 5,
-                detail: CalendarFindOptions.DETAIL_AGENDA
-            },
-            args = {
-                options: encodeURIComponent(JSON.stringify(findOptions))
-            };
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.find(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        args["options"]["sourceTimezone"] = window.qnx.webplatform.device.timezone;
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "find " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("find - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            findOptions = {   
-                filter: [{
-                    fieldName: CalendarFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }], 
-                limit: 5
-            };
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.find(successCb, failCb, {
-            fields: encodeURIComponent(JSON.stringify(["name"])),
-            options: encodeURIComponent(JSON.stringify(findOptions))
-        });
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("save - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            evt = {},
-            args = {},
-            key;
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        for (key in evt) {
-            if (evt.hasOwnProperty(key)) {
-                args[key] = encodeURIComponent(JSON.stringify(evt[key]));
-            }
-        }
-
-        index.save(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        args["sourceTimezone"] = window.qnx.webplatform.device.timezone;
-        args["targetTimezone"] = "";
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "save " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("save - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            evt = new CalendarEvent({
-                "summary": "a test",
-                "location": "test",
-                "start": new Date("Jan 01, 2015, 12:00"),
-                "end": new Date("Jan 01, 2015, 12:30"),
-            }),
-            args = {},
-            key;
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        for (key in evt) {
-            if (evt.hasOwnProperty(key)) {
-                args[key] = encodeURIComponent(JSON.stringify(evt[key]));
-            }
-        }
-
-        index.save(successCb, failCb, args);
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("remove - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {
-                accountId : encodeURIComponent(JSON.stringify(1)),
-                calEventId : encodeURIComponent(JSON.stringify(2)),
-                removeAll : encodeURIComponent(JSON.stringify(true))
-            };
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.remove(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        args["sourceTimezone"] = window.qnx.webplatform.device.timezone;
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "remove " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("remove - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy();
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.remove(successCb, failCb, {
-            accountId : encodeURIComponent(JSON.stringify(1)),
-            calEventId : encodeURIComponent(JSON.stringify(2)),
-            removeAll : encodeURIComponent(JSON.stringify(true))
-        });
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getDefaultCalendarAccount - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
- 
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.getDefaultCalendarAccount(successCb, failCb, args);
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getDefaultCalendarAccount - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.getDefaultCalendarAccount(successCb, failCb, args);
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getDefaultCalendarAccount");
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith({
-            id: "1"
-        }, false);
-    });
-
-    it("getCalendarAccounts - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.getCalendarAccounts(successCb, failCb, args);
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getCalendarAccounts - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
- 
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.getCalendarAccounts(successCb, failCb, args);
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getCalendarAccounts");
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith([{
-            id: "1"
-        }], false);
-    });
-
-    it("getEvent - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {
-                eventId: encodeURIComponent(JSON.stringify("123")),
-                accountId: encodeURIComponent(JSON.stringify("1"))
-            };
- 
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.getEvent(successCb, failCb, args);
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(CalendarError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getEvent - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {
-                eventId: encodeURIComponent(JSON.stringify("123")),
-                accountId: encodeURIComponent(JSON.stringify("1"))
-            };
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.getEvent(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getEvent " + JSON.stringify(args));
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith({
-            id: "123"
-        }, false);
-    });
-
-    it("getDefaultCalendarFolder  - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy();
-
-        spyOn(utils, "hasPermission").andReturn(true);
- 
-        index.getDefaultCalendarFolder(successCb, failCb, {});
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getDefaultCalendarFolder");
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-    });
-});
diff --git a/test/unit/com.blackberry.pim.contacts/Contact.js b/test/unit/com.blackberry.pim.contacts/Contact.js
deleted file mode 100755
index 1c744cc..0000000
--- a/test/unit/com.blackberry.pim.contacts/Contact.js
+++ /dev/null
@@ -1,227 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.pim.contacts",
-    _ID = "com.blackberry.pim.contacts",
-    Contact,
-    ContactError,
-    mockedExec = jasmine.createSpy("exec");
-
-describe("pim.contacts Contact", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(mockedExec)
-        };
-        GLOBAL.window = {
-            parseInt: jasmine.createSpy().andCallFake(function (obj) {
-                return Number(obj);
-            }),
-            isNaN: jasmine.createSpy().andCallFake(function (obj) {
-                return obj === "abc";
-            })
-        };
-        Contact = require(_apiDir + "/www/Contact");
-        ContactError = require(_apiDir + "/ContactError");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete GLOBAL.window;
-    });
-
-    describe("constructor", function () {
-        it("can set the default values", function () {
-            var contact = new Contact(),
-                field;
-
-            for (field in contact) {
-                if (contact.hasOwnProperty(field)) {
-                    if (field === "favorite") {
-                        expect(contact[field]).toBe(false);
-                    } else {
-                        expect(contact[field]).toBe(null);
-                    }
-                }
-            }
-        });
-
-        it("can populate the object based on the properties parameter", function () {
-            var contact = new Contact({"displayName": "John Smith"}),
-                field;
-
-            for (field in contact) {
-                if (contact.hasOwnProperty(field)) {
-                    if (field === "displayName") {
-                        expect(contact[field]).toBe("John Smith");
-                    } else if (field === "favorite") {
-                        expect(contact[field]).toBe(false);
-                    } else {
-                        expect(contact[field]).toBe(null);
-                    }
-                }
-            }
-        });
-
-        it("populates the id and makes it read-only", function () {
-            var contact = new Contact({"id": "0"});
-
-            expect(contact.id).toBe("0");
-            contact.id = "12345";
-            expect(contact.id).toBe("0");
-        });
-    });
-
-    describe("save", function () {
-        it("calls exec", function () {
-            var contact = new Contact(),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            contact.save(onSaveSuccess, onSaveError);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
-        });
-
-        it("calls the error callback when onSaveSuccess is omitted", function () {
-            var contact = new Contact(),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            contact.save(null, onSaveError);
-
-            expect(onSaveError).toHaveBeenCalledWith({"code": ContactError.INVALID_ARGUMENT_ERROR, message : 'onSuccess should be a function'});
-        });
-
-        it("calls the error callback when arguments are incorrect", function () {
-            var contact = new Contact({"phoneNumbers": [{"value": "1234567890"}]}),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            contact.save(onSaveSuccess, onSaveError);
-
-            expect(onSaveSuccess).not.toHaveBeenCalled();
-            expect(onSaveError).toHaveBeenCalledWith({"code": ContactError.INVALID_ARGUMENT_ERROR, message: "phoneNumbers.type at index 0 should be a string"});
-        });
-
-        it("calls the error callback when the id is incorrect", function () {
-            var contact = new Contact({"id": "abc"}),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError");
-
-            contact.save(onSaveSuccess, onSaveError);
-
-            expect(onSaveSuccess).not.toHaveBeenCalled();
-            expect(onSaveError).toHaveBeenCalledWith({"code": ContactError.INVALID_ARGUMENT_ERROR, message : 'id is required and must be a number'});
-        });
-
-        it("converts Date objects to strings", function () {
-            var contact = new Contact({
-                    "birthday": new Date("January 1, 1970"),
-                    "anniversary": new Date("July 1, 1990")
-                }),
-                onSaveSuccess = jasmine.createSpy("onSaveSuccess"),
-                onSaveError = jasmine.createSpy("onSaveError"),
-                result;
-
-            contact.save(onSaveSuccess, onSaveError);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "save", jasmine.any(Object));
-
-            result = mockedExec.mostRecentCall.args[4];
-            expect(result.birthday).toBe("Thu Jan 01 1970");
-            expect(result.anniversary).toBe("Sun Jul 01 1990");
-        });
-    });
-
-    describe("clone", function () {
-        it("returns a Contact with a null id", function () {
-            var contact = new Contact({"id": "0"}),
-                clonedContact;
-
-            clonedContact = contact.clone();
-
-            expect(clonedContact.id).toBe(null);
-            expect(contact.id).toBe("0");
-        });
-
-        it("copies all properties to the new Contact", function () {
-            var contact = new Contact({
-                    id: "0",
-                    name: { "givenName": "John", "familyName": "Smith", "middleName": "H" },
-                    displayName: "John",
-                    nickname: "Johnny",
-                    emails: [],
-                    birthday: new Date("January 1, 1970")
-                }),
-                clonedContact,
-                field;
-
-            clonedContact = contact.clone();
-
-            for (field in contact) {
-                if (contact.hasOwnProperty(field)) {
-                    if (field !== "id") {
-                        expect(clonedContact[field]).toEqual(contact[field]);
-
-                        if (contact[field] !== null &&
-                            contact[field] !== undefined &&
-                            typeof contact[field] === "object") {
-                            expect(clonedContact[field]).not.toBe(contact[field], field + " was not deeply cloned");
-                        }
-                    }
-                }
-            }
-        });
-    });
-
-    describe("remove", function () {
-        it("calls the success callback", function () {
-            var contact = new Contact({"id": "1"}),
-                onRemoveSuccess = jasmine.createSpy("onRemoveSuccess"),
-                onRemoveError = jasmine.createSpy("onRemoveError");
-
-            contact.remove(onRemoveSuccess, onRemoveError);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "remove", jasmine.any(Object));
-        });
-
-        it("calls the error callback when the id is incorrect", function () {
-            var contact = new Contact({"id": null}),
-                onRemoveSuccess = jasmine.createSpy("onRemoveSuccess"),
-                onRemoveError = jasmine.createSpy("onRemoveError");
-
-            contact.remove(onRemoveSuccess, onRemoveError);
-            expect(onRemoveSuccess).not.toHaveBeenCalled();
-            expect(onRemoveError).toHaveBeenCalledWith({"code": ContactError.INVALID_ARGUMENT_ERROR});
-        });
-
-        it("calls the error callback when onRemoveSuccess is omitted", function () {
-            var contact = new Contact({"id": null}),
-                onRemoveError = jasmine.createSpy("onRemoveError");
-
-            contact.remove(null, onRemoveError);
-
-            expect(onRemoveError).toHaveBeenCalledWith({"code": ContactError.INVALID_ARGUMENT_ERROR});
-        });
-    });
-
-    describe("remove", function () {
-        it("has property sourceAccounts", function () {
-            var contact = new Contact();
-            expect(contact.sourceAccounts).toBeDefined();
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.pim.contacts/client.js b/test/unit/com.blackberry.pim.contacts/client.js
deleted file mode 100755
index 35f9024..0000000
--- a/test/unit/com.blackberry.pim.contacts/client.js
+++ /dev/null
@@ -1,359 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.pim.contacts",
-    _ID = "com.blackberry.pim.contacts",
-    client,
-    ContactFindOptions,
-    ContactAddress,
-    ContactError,
-    ContactField,
-    ContactName,
-    ContactOrganization,
-    ContactPhoto,
-    ContactPickerOptions,
-    mockedExec = jasmine.createSpy();
-
-describe("pim.contacts client", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(mockedExec)
-        };
-        GLOBAL.window = {
-            isNaN: jasmine.createSpy().andCallFake(function (obj) {
-                return obj === "abc";
-            }),
-            parseInt: jasmine.createSpy().andCallFake(function (obj) {
-                return obj;
-            })
-        };
-
-        client = require(_apiDir + "/www/client");
-        ContactFindOptions = client.ContactFindOptions;
-        ContactAddress = client.ContactAddress;
-        ContactError = client.ContactError;
-        ContactField = client.ContactField;
-        ContactName = client.ContactName;
-        ContactOrganization = client.ContactOrganization;
-        ContactPhoto = client.ContactPhoto;
-        ContactPickerOptions = client.ContactPickerOptions;
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete GLOBAL.window;
-    });
-
-    describe("find", function () {
-        it("exec should have been called for pim.contacts.find() if correct arguments are passed", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }],
-                limit: 5,
-                excludeAccounts: [{id: "1"}, {id: "2"}],
-                includeAccounts: [{id: "3"}, {id: "4"}]
-            }, successCb, errorCb);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "find", jasmine.any(Object));
-        });
-
-        it("error callback is invoked for pim.contacts.find() if contactFields is missing or empty", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find([], {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }], // filter
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if filter field name is missing", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldValue: "John"
-                }], // filter
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if filter field name is invalid", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldName: 2343,
-                    fieldValue: "John"
-                }], // filter
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if filter field value is missing", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME
-                }], // filter
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if limit is not a number", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], new ContactFindOptions(
-                [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }], // filter
-                null, // sort
-                "abc" // limit
-            ), successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if sort field name is missing", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }], // filter
-                sort: [{
-                    desc: true
-                }], // sort
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if sort desc property is missing", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }], // filter
-                sort: [{
-                    fieldName: ContactFindOptions.SORT_FIELD_GIVEN_NAME
-                }], // sort
-                limit: 5 // limit
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if includeAccounts is invalid", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                includeAccounts: [{id: "1"}, {id: "abc"}]
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-
-        it("error callback is invoked for pim.contacts.find() if excludeAccounts is invalid", function () {
-            var successCb = jasmine.createSpy(),
-                errorCb = jasmine.createSpy();
-
-            client.find(["name"], {
-                excludeAccounts: [{id: "1"}, {id: "abc"}]
-            }, successCb, errorCb);
-
-            expect(errorCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-            expect(successCb).not.toHaveBeenCalled();
-        });
-    });
-
-    describe("Testing getContact", function () {
-        it("has method getContact", function () {
-            expect(client.getContact).toBeDefined();
-        });
-
-        it("returns the contact with specific contactId", function () {
-            var contact = client.getContact();
-            expect(contact).toBeDefined();
-        });
-    });
-
-    describe("create", function () {
-        it("pim.contacts.create() returns a Contact object with all specified properties set", function () {
-            var contact = client.create({
-                name: {
-                    familyName: "Smith",
-                    givenName: "John",
-                    middleName: "Francis"
-                },
-                addresses: [
-                    {
-                        streetAddress: "200 University Ave W",
-                        locality: "Waterloo",
-                        country: "Canada",
-                        postalCode: "N2L3G1"
-                    }
-                ],
-                note: "This is a test",
-                emails: [
-                    { type: ContactField.HOME, value: "jsmith@blah.com" },
-                    { type: ContactField.WORK, value: "jsmith@work.com" }
-                ],
-                organizations: [
-                    {
-                        name: "RIM",
-                        department: "R&D",
-                        title: "Software Developer"
-                    }
-                ],
-                favorite: true,
-                photos: [
-                    { originalFilePath: "path/to/pic", pref: true },
-                    { originalFilePath: "path/to/anotherpic", pref: false }
-                ],
-                random: "hahaha"
-            });
-
-            expect(contact.name.familyName).toBe("Smith");
-            expect(contact.name.givenName).toBe("John");
-            expect(contact.name.middleName).toBe("Francis");
-            expect(contact.note).toBe("This is a test");
-            expect(contact.emails.length).toBe(2);
-            expect(contact.emails[0].type).toBe(ContactField.HOME);
-            expect(contact.emails[0].value).toBe("jsmith@blah.com");
-            expect(contact.emails[1].type).toBe(ContactField.WORK);
-            expect(contact.emails[1].value).toBe("jsmith@work.com");
-            expect(contact.favorite).toBe(true);
-            expect(contact.addresses.length).toBe(1);
-            expect(contact.addresses[0].streetAddress).toBe("200 University Ave W");
-            expect(contact.addresses[0].locality).toBe("Waterloo");
-            expect(contact.addresses[0].country).toBe("Canada");
-            expect(contact.addresses[0].postalCode).toBe("N2L3G1");
-            expect(contact.organizations.length).toBe(1);
-            expect(contact.organizations[0].name).toBe("RIM");
-            expect(contact.organizations[0].department).toBe("R&D");
-            expect(contact.organizations[0].title).toBe("Software Developer");
-            expect(contact.photos.length).toBe(2);
-            expect(contact.photos[0].pref).toBe(true);
-            expect(contact.photos[0].originalFilePath).toBe("path/to/pic");
-            expect(contact.photos[1].pref).toBe(false);
-            expect(contact.photos[1].originalFilePath).toBe("path/to/anotherpic");
-            expect(contact.random).not.toBeDefined();
-        });
-    });
-
-    describe("invokeContactPicker", function () {
-        it("invokeContactPicker calls onInvoke with error for invalid picker mode", function () {
-            var doneCb = jasmine.createSpy(),
-                cancelCb = jasmine.createSpy(),
-                invokeCb = jasmine.createSpy();
-
-            client.invokeContactPicker({
-                mode: "ridiculous!"
-            }, doneCb, cancelCb, invokeCb);
-
-            expect(doneCb).not.toHaveBeenCalled();
-            expect(cancelCb).not.toHaveBeenCalled();
-            expect(invokeCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-        });
-
-        it("invokeContactPicker calls onInvoke with error for mode=Attribute but filters are missing", function () {
-            var doneCb = jasmine.createSpy(),
-                cancelCb = jasmine.createSpy(),
-                invokeCb = jasmine.createSpy();
-
-            client.invokeContactPicker({
-                mode: ContactPickerOptions.MODE_ATTRIBUTE
-            }, doneCb, cancelCb, invokeCb);
-
-            expect(doneCb).not.toHaveBeenCalled();
-            expect(cancelCb).not.toHaveBeenCalled();
-            expect(invokeCb).toHaveBeenCalledWith(new ContactError(ContactError.INVALID_ARGUMENT_ERROR));
-        });
-
-        it("invokeContactPicker should register client callbacks", function () {
-            var doneCb = jasmine.createSpy(),
-                cancelCb = jasmine.createSpy(),
-                invokeCb = jasmine.createSpy();
-
-            client.invokeContactPicker({
-                mode: ContactPickerOptions.MODE_SINGLE
-            }, doneCb, cancelCb, invokeCb);
-
-            expect(mockedExec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "invokeContactPicker", jasmine.any(Object));
-        });
-    });
-
-    describe("getContactAccounts", function () {
-        beforeEach(function () {
-            var mockAccounts = [
-                    {'id': 2, 'name': 'local', 'enterprise': 'false'},
-                    {'id': 123456, 'name': 'fake account', 'enterprise': 'false'}
-                ];
-            mockedExec = jasmine.createSpy().andCallFake(function (success) {
-                console.log("what is success?");
-                console.log(success);
-                success(mockAccounts);
-            });
-        });
-
-        it("has method getContactAccounts", function () {
-            expect(client.getContactAccounts).toBeDefined();
-        });
-
-        xit("returns contact accounts", function () {
-            var accounts = client.getContactAccounts();
-            expect(accounts).toBeDefined();
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.pim.contacts/contactUtils.js b/test/unit/com.blackberry.pim.contacts/contactUtils.js
deleted file mode 100755
index e6c5e2b..0000000
--- a/test/unit/com.blackberry.pim.contacts/contactUtils.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/com.blackberry.pim.contacts",
-    _ID = "com.blackberry.pim.contacts",
-    contactUtils = require(_apiDir + "/contactUtils");
-
-describe("pim.contacts contactUtils", function () {
-    it("populates the child objects within Contact", function () {
-        var contact = {
-            "name": {"givenName": "John", "familyName": "Smith"},
-            "emails": [
-                {"type": "work", "value": "abc@rim.com"},
-                {"type": "home", "value": "def@rim.com"}
-            ],
-            "addresses": [
-                {"type": "other", "streetAddress": "123 Abc Rd.", "locality": "Town Def", "region": "Ghi County"}
-            ],
-            "photos": [
-                {"originalFilePath": "icon.png", "pref": true}
-            ],
-            "organizations": [],
-            "birthday": "January 1, 1970",
-            "anniversary": "July 1, 2000"
-        };
-
-        contactUtils.populateContact(contact);
-
-        expect(contact.name).toBeDefined();
-        expect(contact.name.givenName).toBe("John");
-        expect(contact.name.familyName).toBe("Smith");
-        expect(contact.name.middleName).toBe("");
-        expect(contact.name.honorificPrefix).toBe("");
-        expect(contact.name.honorificSuffix).toBe("");
-        expect(contact.name.phoneticGivenName).toBe("");
-        expect(contact.name.phoneticFamilyName).toBe("");
-
-        expect(contact.emails).toBeDefined();
-        expect(contact.emails.length).toBe(2);
-        expect(contact.emails[0].type).toBe("work");
-        expect(contact.emails[0].value).toBe("abc@rim.com");
-        expect(contact.emails[1].type).toBe("home");
-        expect(contact.emails[1].value).toBe("def@rim.com");
-
-        expect(contact.addresses).toBeDefined();
-        expect(contact.addresses.length).toBe(1);
-        expect(contact.addresses[0].type).toBe("other");
-        expect(contact.addresses[0].streetAddress).toBe("123 Abc Rd.");
-        expect(contact.addresses[0].streetOther).toBe("");
-        expect(contact.addresses[0].locality).toBe("Town Def");
-        expect(contact.addresses[0].region).toBe("Ghi County");
-        expect(contact.addresses[0].postalCode).toBe("");
-        expect(contact.addresses[0].country).toBe("");
-
-        expect(contact.photos).toBeDefined();
-        expect(contact.photos.length).toBe(1);
-        expect(contact.photos[0].originalFilePath).toBe("icon.png");
-        expect(contact.photos[0].pref).toBe(true);
-
-        expect(contact.organizations).toBeDefined();
-        expect(contact.organizations.length).toBe(0);
-
-        expect(contact.birthday.toDateString()).toBe("Thu Jan 01 1970");
-        expect(contact.anniversary.toDateString()).toBe("Sat Jul 01 2000");
-    });
-});
-
diff --git a/test/unit/com.blackberry.pim.contacts/index.js b/test/unit/com.blackberry.pim.contacts/index.js
deleted file mode 100755
index 8d2d062..0000000
--- a/test/unit/com.blackberry.pim.contacts/index.js
+++ /dev/null
@@ -1,303 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.pim.contacts/",
-    _libDir = __dirname + "/../../../lib/",
-    utils = require(_libDir + "utils"),
-    ContactFindOptions = require(_apiDir + "ContactFindOptions"),
-    Contact,
-    ContactName = require(_apiDir + "ContactName"),
-    ContactError = require(_apiDir + "ContactError"),
-    ContactPickerOptions = require(_apiDir + "ContactPickerOptions"),
-    index,
-    mockJnextObjId = 123,
-    mockedPluginResult;
-
-describe("pim.contacts index", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            require: jasmine.createSpy().andReturn(jasmine.createSpy())
-        };
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy("JNEXT.require").andCallFake(function () {
-                return true;
-            }),
-            createObject: jasmine.createSpy("JNEXT.createObject").andCallFake(function () {
-                return mockJnextObjId;
-            }),
-            invoke: jasmine.createSpy("JNEXT.invoke").andCallFake(function () {
-                return JSON.stringify({_success: true, contact: { id: "123" }});
-            }),
-            registerEvents: jasmine.createSpy("JNEXT.registerEvent")
-        };
-        GLOBAL.window = {
-            qnx: {
-                webplatform: {
-                    getApplication: jasmine.createSpy().andReturn({
-                        invocation: {
-                            addEventListener: jasmine.createSpy(),
-                            removeEventListener: jasmine.createSpy()
-                        },
-                        getEnv: jasmine.createSpy().andReturn("personal")
-                    })
-                }
-            },
-            parseInt: jasmine.createSpy().andCallFake(function (obj) {
-                return Number(obj);
-            }),
-            isNaN: jasmine.createSpy().andCallFake(function (obj) {
-                return obj === "abc";
-            })
-        };
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy(),
-            callbackError: jasmine.createSpy(),
-            noResult: jasmine.createSpy(),
-            ok: jasmine.createSpy(),
-            error: jasmine.createSpy()
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        Contact = require(_apiDir + "www/Contact");
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        delete GLOBAL.window;
-        delete GLOBAL.cordova;
-        delete GLOBAL.PluginResult;
-        index = null;
-    });
-
-    it("JNEXT require/createObject/registerEvents are not called upon requiring index", function () {
-        expect(JNEXT.require).not.toHaveBeenCalledWith("libpimcontacts");
-        expect(JNEXT.createObject).not.toHaveBeenCalledWith("libpimcontacts.PimContacts");
-        expect(JNEXT.registerEvents).not.toHaveBeenCalled();
-    });
-
-    it("find - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            findOptions = {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }],
-                limit: 5
-            },
-            args = {};
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        args.fields = encodeURIComponent(JSON.stringify(["name"]));
-        args.options = encodeURIComponent(JSON.stringify(findOptions));
-
-        index.find(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "find " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("find - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            findOptions = {
-                filter: [{
-                    fieldName: ContactFindOptions.SEARCH_FIELD_GIVEN_NAME,
-                    fieldValue: "John"
-                }],
-                limit: 5
-            };
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.find(successCb, failCb, {
-            fields: encodeURIComponent(JSON.stringify(["name"])),
-            options: encodeURIComponent(JSON.stringify(findOptions))
-        });
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.callbackError).toHaveBeenCalledWith(ContactError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("save - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            contact = new Contact({
-                name: {"familyName": "Smith", "givenName": "John"},
-                note: "this is a test"
-            }),
-            args = {},
-            key;
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        for (key in contact) {
-            if (key !== "id") {
-                if (contact.hasOwnProperty(key)) {
-                    args[key] = encodeURIComponent(JSON.stringify(contact[key]));
-                }
-            }
-        }
-
-        index.save(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        args["isWork"] = false;
-
-        expect(window.qnx.webplatform.getApplication().getEnv).toHaveBeenCalledWith("PERIMETER");
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "save " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("save - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            contact = new Contact({
-                name: {"familyName": "Smith", "givenName": "John"},
-                note: "this is a test"
-            }),
-            args = {},
-            key;
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        for (key in contact) {
-            if (contact.hasOwnProperty(key)) {
-                args[key] = encodeURIComponent(JSON.stringify(contact[key]));
-            }
-        }
-
-        index.save(successCb, failCb, args);
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.callbackError).toHaveBeenCalledWith(ContactError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("remove - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        args.contactId = encodeURIComponent(JSON.stringify(1));
-
-        index.remove(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "remove " + JSON.stringify(args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("remove - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy();
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.remove(successCb, failCb, {
-            contactId: encodeURIComponent(JSON.stringify(1)),
-            _eventId: encodeURIComponent(JSON.stringify("abc"))
-        });
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.callbackError).toHaveBeenCalledWith(ContactError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getContact - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {
-                contactId: encodeURIComponent(JSON.stringify("123"))
-            };
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.getContact(successCb, failCb, args);
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.error).toHaveBeenCalledWith(ContactError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("getContact - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {
-                contactId: encodeURIComponent(JSON.stringify("123"))
-            };
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        index.getContact(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "getContact " + JSON.stringify(args));
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith({
-            id: "123"
-        }, false);
-    });
-
-    it("invokeContactPicker - with correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy(),
-            args = {};
-
-        spyOn(utils, "hasPermission").andReturn(true);
-
-        args.options = encodeURIComponent(JSON.stringify({ mode: ContactPickerOptions.MODE_SINGLE }));
-
-        index.invokeContactPicker(successCb, failCb, args);
-
-        Object.getOwnPropertyNames(args).forEach(function (key) {
-            args[key] = JSON.parse(decodeURIComponent(args[key]));
-        });
-
-        expect(window.qnx.webplatform.getApplication().invocation.addEventListener).toHaveBeenCalledWith("childCardClosed", jasmine.any(Function));
-        expect(JNEXT.invoke).toHaveBeenCalledWith(mockJnextObjId, "invokePicker " + JSON.stringify(args.options));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("invokeContactPicker - without correct permission specified", function () {
-        var successCb = jasmine.createSpy(),
-            failCb = jasmine.createSpy();
-
-        spyOn(utils, "hasPermission").andReturn(false);
-
-        index.invokeContactPicker(successCb, failCb, {
-            options: encodeURIComponent(JSON.stringify({ mode: ContactPickerOptions.MODE_SINGLE }))
-        });
-
-        expect(JNEXT.invoke).not.toHaveBeenCalled();
-        expect(mockedPluginResult.callbackError).toHaveBeenCalledWith(ContactError.PERMISSION_DENIED_ERROR, false);
-    });
-
-    it("has getContactAccounts", function () {
-        expect(index.getContactAccounts).toBeDefined();
-    });
-});
diff --git a/test/unit/com.blackberry.push/client.js b/test/unit/com.blackberry.push/client.js
deleted file mode 100755
index fbd42ba..0000000
--- a/test/unit/com.blackberry.push/client.js
+++ /dev/null
@@ -1,414 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
- 
-     http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
-*/
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.push",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    mockedWebworks = {},
-    constants = {
-        "SUCCESS" : 0,
-        "INTERNAL_ERROR" : 500,
-        "INVALID_DEVICE_PIN" : 10001,
-        "INVALID_PROVIDER_APPLICATION_ID" : 10002,
-        "CHANNEL_ALREADY_DESTROYED" : 10004,
-        "CHANNEL_ALREADY_DESTROYED_BY_PROVIDER" : 10005,
-        "INVALID_PPG_SUBSCRIBER_STATE" : 10006,
-        "PPG_SUBSCRIBER_NOT_FOUND" : 10007,
-        "EXPIRED_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG" : 10008,
-        "INVALID_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG" : 10009,
-        "PPG_SUBSCRIBER_LIMIT_REACHED" : 10010,
-        "INVALID_OS_VERSION_OR_DEVICE_MODEL_NUMBER" : 10011,
-        "CHANNEL_SUSPENDED_BY_PROVIDER" : 10012,
-        "CREATE_SESSION_NOT_DONE" : 10100,
-        "MISSING_PPG_URL" : 10102,
-        "PUSH_TRANSPORT_UNAVAILABLE" : 10103,
-        "OPERATION_NOT_SUPPORTED" : 10105,
-        "CREATE_CHANNEL_NOT_DONE" : 10106,
-        "MISSING_PORT_FROM_PPG" : 10107,
-        "MISSING_SUBSCRIPTION_RETURN_CODE_FROM_PPG" : 10108,
-        "PPG_SERVER_ERROR" : 10110,
-        "MISSING_INVOKE_TARGET_ID" : 10111,
-        "SESSION_ALREADY_EXISTS" : 10112,
-        "INVALID_PPG_URL" : 10114,
-        "CREATE_CHANNEL_OPERATION" : 1,
-        "DESTROY_CHANNEL_OPERATION" : 2
-    },
-    constantsLength = 0,
-    defineROFieldArgs = [];
-
-function unloadClient() {
-    // explicitly unload client for it to be loaded again
-    delete require.cache[require.resolve(_apiDir + "/www/client")];
-    client = null;
-}
-
-describe("push", function () {
-    beforeEach(function () {
-        mockedWebworks.exec = jasmine.createSpy();
-        mockedWebworks.defineReadOnlyField = jasmine.createSpy();
-        GLOBAL.window = {
-            webworks: mockedWebworks
-        };
-        // client needs to be required for each test
-        client = require(_apiDir + "/www/client");
-        Object.getOwnPropertyNames(constants).forEach(function (c) {
-            defineROFieldArgs.push([client.PushService, c, constants[c]]);
-            constantsLength += 1;
-        });
-        spyOn(console, "error");
-    });
-
-    afterEach(function () {
-        unloadClient();
-        defineROFieldArgs = [];
-        delete GLOBAL.window;
-    });
-
-    describe("push constants", function () {
-        it("call defineReadOnlyField for each constant", function () {
-            expect(mockedWebworks.defineReadOnlyField.callCount).toEqual(constantsLength);
-        });
-
-        it("call defineReadOnlyField with right params", function () {
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("SUCCESS")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INTERNAL_ERROR")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_DEVICE_PIN")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_PROVIDER_APPLICATION_ID")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CHANNEL_ALREADY_DESTROYED")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CHANNEL_ALREADY_DESTROYED_BY_PROVIDER")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_PPG_SUBSCRIBER_STATE")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("PPG_SUBSCRIBER_NOT_FOUND")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("EXPIRED_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("PPG_SUBSCRIBER_LIMIT_REACHED")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_OS_VERSION_OR_DEVICE_MODEL_NUMBER")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CHANNEL_SUSPENDED_BY_PROVIDER")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CREATE_SESSION_NOT_DONE")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("MISSING_PPG_URL")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("PUSH_TRANSPORT_UNAVAILABLE")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("OPERATION_NOT_SUPPORTED")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CREATE_CHANNEL_NOT_DONE")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("MISSING_PORT_FROM_PPG")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("MISSING_SUBSCRIPTION_RETURN_CODE_FROM_PPG")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("PPG_SERVER_ERROR")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("MISSING_INVOKE_TARGET_ID")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("SESSION_ALREADY_EXISTS")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("INVALID_PPG_URL")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("CREATE_CHANNEL_OPERATION")]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain(defineROFieldArgs[Object.getOwnPropertyNames(constants).indexOf("DESTROY_CHANNEL_OPERATION")]);
-        });
-    });
-
-
-    describe("PushService", function () {
-        it("has only one static method: create", function () {
-            expect(client.PushService.create).toBeDefined();
-            expect(client.PushService.createChannel).toBeUndefined();
-            expect(client.PushService.destroyChannel).toBeUndefined();
-            expect(client.PushService.extractPushPayload).toBeUndefined();
-            expect(client.PushService.launchApplicationOnPush).toBeUndefined();
-        });
-
-        it("has several instance methods", function () {
-            var pushService = new client.PushService();
-            expect(pushService.createChannel).toBeDefined();
-            expect(pushService.destroyChannel).toBeDefined();
-            expect(pushService.extractPushPayload).toBeDefined();
-            expect(pushService.launchApplicationOnPush).toBeDefined();
-        });
-
-        describe("create", function () {
-            var invokeTargetIdError = "push.PushService.create: cannot call create() multiple times with different invokeTargetId's",
-                appIdError = "push.PushService.create: cannot call create() multiple times with different appId's";
-
-            it("sets up the create callback", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "appId" : "appId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "startService", options);
-            });
-
-            it("allows multiple calls with the same parameters", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                runs(function () {
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                });
-
-                runs(function () {
-                    options.appId = "";
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                    expect(mockedWebworks.exec.callCount).toEqual(2);
-                });
-            });
-
-            it("throws an error when it is called again with a different invokeTargetId", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "appId" : "appId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                runs(function () {
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                });
-
-                runs(function () {
-                    options.invokeTargetId = "differentInvokeTargetId";
-
-                    function createPushService() {
-                        client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                    }
-
-                    expect(createPushService).toThrow(invokeTargetIdError);
-                    expect(mockedWebworks.exec.callCount).toEqual(1);
-                });
-            });
-
-            it("throws an error when it is called again with a different appId", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "appId" : "appId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                runs(function () {
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                });
-
-                runs(function () {
-                    options.appId = "differentAppId";
-
-                    function createPushService() {
-                        client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                    }
-
-                    expect(createPushService).toThrow(appIdError);
-                    expect(mockedWebworks.exec.callCount).toEqual(1);
-                });
-            });
-
-            it("throws an error when it is called twice, with an empty then non-empty appId", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                runs(function () {
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                });
-
-                runs(function () {
-                    options.appId = "hello";
-
-                    function createPushService() {
-                        client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                    }
-
-                    expect(createPushService).toThrow(appIdError);
-                    expect(mockedWebworks.exec.callCount).toEqual(1);
-                });
-            });
-
-            it("throws an error when it is called twice, with a non-empty then empty appId", function () {
-                var options = { "invokeTargetId" : "invokeTargetId",
-                                "appId" : "appId",
-                                "ppgUrl" : "ppgUrl" },
-                    successCallback,
-                    failCallback,
-                    simChangeCallback,
-                    pushTransportReadyCallback;
-
-                runs(function () {
-                    client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                });
-
-                runs(function () {
-                    options = { "invokeTargetId" : "invokeTargetId",
-                                "ppgUrl" : "ppgUrl" };
-
-                    function createPushService() {
-                        client.PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback);
-                    }
-
-                    expect(createPushService).toThrow(appIdError);
-                    expect(mockedWebworks.exec.callCount).toEqual(1);
-                });
-            });
-        });
-
-        describe("createChannel", function () {
-            it("sets up the createChannel callback", function () {
-                var createChannelCallback = function () {},
-                    pushService = new client.PushService();
-
-                pushService.createChannel(createChannelCallback);
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "createChannel", null);
-            });
-        });
-
-        describe("destroyChannel", function () {
-            it("sets up the destroyChannel callback", function () {
-                var destroyChannelCallback = function () {},
-                    pushService = new client.PushService();
-
-                pushService.destroyChannel(destroyChannelCallback);
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "destroyChannel", null);
-            });
-        });
-
-        describe("extractPushPayload", function () {
-            var extractPayloadError = "push.PushService.extractPushPayload: the invoke object was invalid and no PushPayload could be extracted from it";
-
-            it("returns a PushPayload object", function () {
-                var invokeObject = { "data" : "ABC", "action" : "bb.action.PUSH" },
-                    calledObject = { "data" : "ABC" },
-                    returnPayload = { "valid" : true },
-                    pushService = new client.PushService(),
-                    pushPayload;
-
-                mockedWebworks.exec = jasmine.createSpy().andCallFake(function (success, fail, service, action, args) {
-                    success(returnPayload);
-                });
-                pushPayload = pushService.extractPushPayload(invokeObject);
-
-                expect(pushPayload).toBeDefined();
-                expect(pushPayload).toEqual(jasmine.any(client.PushPayload));
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "extractPushPayload", calledObject);
-            });
-
-            it("checks that there is a data field in the invoke object", function () {
-                var invokeObject = { "action" : "bb.action.PUSH" },
-                    pushService = new client.PushService();
-
-                mockedWebworks.exec = jasmine.createSpy();
-
-                function extractPayload() {
-                    pushService.extractPushPayload(invokeObject);
-                }
-
-                expect(extractPayload).toThrow(extractPayloadError);
-                expect(mockedWebworks.exec).not.toHaveBeenCalled();
-            });
-
-            it("checks that the invoke action is bb.action.PUSH", function () {
-                var invokeObject = { "data" : "ABC" },
-                    pushService = new client.PushService();
-
-                mockedWebworks.exec = jasmine.createSpy();
-
-                function extractPayload() {
-                    pushService.extractPushPayload(invokeObject);
-                }
-
-                expect(extractPayload).toThrow(extractPayloadError);
-                expect(mockedWebworks.exec).not.toHaveBeenCalled();
-            });
-
-            it("checks that the returned payload is valid", function () {
-                var invokeObject = { "data" : "ABC", "action" : "bb.action.PUSH" },
-                    calledObject = { "data" : "ABC" },
-                    returnPayload = { "valid" : false },
-                    pushService = new client.PushService();
-
-                mockedWebworks.exec = jasmine.createSpy().andCallFake(function (success, fail, service, action, args) {
-                    success(returnPayload);
-                });
-
-                function extractPayload() {
-                    pushService.extractPushPayload(invokeObject);
-                }
-
-                expect(extractPayload).toThrow(extractPayloadError);
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "extractPushPayload", calledObject);
-            });
-        });
-
-        describe("launchApplicationOnPush", function () {
-            it("sets up the launchApplicationOnPush callback", function () {
-                var shouldLaunch = true,
-                    shouldLaunchObj = {"shouldLaunch" : shouldLaunch},
-                    launchApplicationCallback = function () {},
-                    pushService = new client.PushService();
-
-                pushService.launchApplicationOnPush(shouldLaunch, launchApplicationCallback);
-                expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "launchApplicationOnPush", shouldLaunchObj);
-            });
-        });
-    });
-
-    describe("PushPayload", function () {
-        it("contains only instance members and methods", function () {
-            expect(client.PushPayload.data).toBeUndefined();
-            expect(client.PushPayload.headers).toBeUndefined();
-            expect(client.PushPayload.id).toBeUndefined();
-            expect(client.PushPayload.isAcknowledgeRequired).toBeUndefined();
-            expect(client.PushPayload.acknowledge).toBeUndefined();
-        });
-
-        it("calls defineReadOnlyField on the instance members", function () {
-            var payloadObject = {},
-                pushPayload;
-
-            payloadObject.data = "world";
-            payloadObject.headers = { webworks : "blackberry" };
-            payloadObject.id = "hello";
-            payloadObject.isAcknowledgeRequired = false;
-
-            pushPayload = new client.PushPayload(payloadObject);
-
-            expect(pushPayload).toBeDefined();
-            expect(pushPayload).toEqual(jasmine.any(client.PushPayload));
-
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain([pushPayload, "data", payloadObject.data]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain([pushPayload, "headers", payloadObject.headers]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain([pushPayload, "id", payloadObject.id]);
-            expect(mockedWebworks.defineReadOnlyField.argsForCall).toContain([pushPayload, "isAcknowledgeRequired", payloadObject.isAcknowledgeRequired]);
-        });
-
-        it("can acknowledge the push notification", function () {
-            var shouldAcceptPush = true,
-                pushPayload = new client.PushPayload("hello"),
-                args = { "id": "id", "shouldAcceptPush": shouldAcceptPush };
-
-            pushPayload.id = "id";
-            pushPayload.acknowledge(shouldAcceptPush);
-            expect(mockedWebworks.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "acknowledge", args);
-        });
-    });
-});
-
diff --git a/test/unit/com.blackberry.push/index.js b/test/unit/com.blackberry.push/index.js
deleted file mode 100755
index 9d04021..0000000
--- a/test/unit/com.blackberry.push/index.js
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.push/",
-    _libDir = __dirname + "/../../../lib/",
-    successCB,
-    failCB,
-    args = {},
-    index,
-    mockJNEXT,
-    mockedPluginResult;
-
-describe("push index", function () {
-    beforeEach(function () {
-        mockJNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("0"),
-            invoke: jasmine.createSpy().andReturn(2),
-            registerEvents: jasmine.createSpy().andReturn(true)
-        };
-        GLOBAL.JNEXT = mockJNEXT;
-
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy(),
-            ok: jasmine.createSpy(),
-            noResult: jasmine.createSpy()
-        };
-        GLOBAL.PluginResult = jasmine.createSpy().andReturn(mockedPluginResult);
-
-        successCB = jasmine.createSpy();
-        failCB = jasmine.createSpy();
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        delete GLOBAL.PluginResult;
-        index = null;
-        args = {};
-    });
-
-    it("makes sure that JNEXT not is initalized", function () {
-        expect(mockJNEXT.require).not.toHaveBeenCalled();
-    });
-
-    it("makes sure that JNEXT.invoke startService is called", function () {
-        var expected_args = { invokeTargetId : "invokeTargetId", appId : "appId", ppgUrl : "ppgUrl" };
-
-        args.invokeTargetId = encodeURIComponent(JSON.stringify("invokeTargetId"));
-        args.appId = encodeURIComponent(JSON.stringify("appId"));
-        args.ppgUrl = encodeURIComponent(JSON.stringify("ppgUrl"));
-
-        index.startService(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "startService " + JSON.stringify(expected_args));
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("makes sure that JNEXT.invoke createChannel is called", function () {
-        index.createChannel(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "createChannel");
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("makes sure that JNEXT.invoke destroyChannel is called", function () {
-        index.destroyChannel(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "destroyChannel");
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("makes sure that JNEXT.invoke extractPushPayload is called", function () {
-        var expected_args = { data : "hello world" };
-
-        args.data = encodeURIComponent(JSON.stringify("hello world"));
-        JNEXT.invoke = jasmine.createSpy().andReturn(" 123 " + JSON.stringify(expected_args));
-
-        index.extractPushPayload(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "extractPushPayload " + JSON.stringify(expected_args));
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith(expected_args);
-    });
-
-    it("makes sure that JNEXT.invoke registerToLaunch is called", function () {
-        args = {"shouldLaunch" : true};
-
-        index.launchApplicationOnPush(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "registerToLaunch");
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("makes sure that JNEXT.invoke unregisterFromLaunch is called", function () {
-        args = {"shouldLaunch" : false};
-
-        index.launchApplicationOnPush(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "unregisterFromLaunch");
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-    });
-
-    it("makes sure that JNEXT.invoke acknowledge is called", function () {
-        var expected_args = { id : "payloadId", shouldAcceptPush : true };
-
-        args.id = encodeURIComponent(JSON.stringify("payloadId"));
-        args.shouldAcceptPush = encodeURIComponent(JSON.stringify(true));
-
-        index.acknowledge(successCB, failCB, args);
-
-        expect(mockJNEXT.invoke).toHaveBeenCalledWith("0", "acknowledge " + JSON.stringify(expected_args));
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-    });
-});
diff --git a/test/unit/com.blackberry.sensors/client.js b/test/unit/com.blackberry.sensors/client.js
deleted file mode 100755
index ca25450..0000000
--- a/test/unit/com.blackberry.sensors/client.js
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.sensors",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    MockedChannel,
-    channelRegistry = {};
-
-describe("sensors", function () {
-    beforeEach(function () {
-
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy().andCallFake(function (success, fail, service, action, args) {
-                if (action === "supportedSensors") {
-                    success(["abc"]);
-                }
-            }),
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andCallFake(function (eventName) {
-                channelRegistry[eventName] = new MockedChannel();
-                return channelRegistry[eventName];
-            }),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent"),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-    });
-
-    it("defines events", function () {
-        var events = ["deviceaccelerometer", "devicemagnetometer", "devicegyroscope", "devicecompass",
-            "deviceproximity", "devicelight", "devicegravity", "devicerotationmatrix",
-            "deviceorientation", "deviceazimuthpitchroll", "deviceholster"];
-
-        events.forEach(function (event) {
-            var channel;
-
-            //test channel creation
-            expect(cordova.addDocumentEventHandler).toHaveBeenCalledWith(event);
-
-            //test Subscriber add
-            channel = channelRegistry[event];
-            channel.numHandlers = 1;
-            channel.onHasSubscribersChange();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "startEvent", {eventName: event});
-
-            //test Subscriber remove
-            channel.numHandlers = 0;
-            channel.onHasSubscribersChange();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "stopEvent", {eventName: event});
-        });
-    });
-
-    describe("setOptions", function () {
-        it("calls exec", function () {
-            client.setOptions("devicecompass", { delay : 1000 });
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "setOptions", { options : { delay : 1000, sensor : "devicecompass" } });
-        });
-    });
-
-    describe("supportedSensors", function () {
-        it("calls exec", function () {
-            var supportedSensors;
-
-            supportedSensors = client.supportedSensors;
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "supportedSensors");
-            // make sure it only gets called once
-            supportedSensors = client.supportedSensors;
-            expect(cordova.exec.callCount).toEqual(1);
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.sensors/index.js b/test/unit/com.blackberry.sensors/index.js
deleted file mode 100755
index 1f7498e..0000000
--- a/test/unit/com.blackberry.sensors/index.js
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.sensors/",
-    _libDir = __dirname + "/../../../lib/",
-    events = require(_libDir + "event"),
-    index;
-
-describe("sensors index", function () {
-    beforeEach(function () {
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("1"),
-            invoke: jasmine.createSpy().andReturn(2),
-            registerEvents: jasmine.createSpy().andReturn(true)
-        };
-        index = require(_apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        index = null;
-    });
-
-    describe("Events", function () {
-        var mockedPluginResult,
-            noop = function () {};
-
-        beforeEach(function () {
-            mockedPluginResult = {
-                error: jasmine.createSpy("PluginResult.error"),
-                noResult: jasmine.createSpy("PluginResult.noResult")
-            };
-
-            GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        });
-
-        afterEach(function () {
-            delete GLOBAL.PluginResult;
-        });
-
-        it("startEvent", function () {
-            var context = require(_apiDir + "sensorsEvents"),
-                eventName = "deviceaccelerometer",
-                systemEventName = "deviceaccelerometer",
-                env = {webview: {id: 22 }};
-
-            spyOn(context, "addEventListener");
-
-            index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(context.addEventListener).toHaveBeenCalledWith(systemEventName, jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-
-            //Will not start it twice
-            context.addEventListener.reset();
-            index.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(context.addEventListener).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith("Underlying listener for " + eventName + " already already running for webview " + env.webview.id);
-        });
-
-        it("stopEvent", function () {
-            var context = require(_apiDir + "sensorsEvents"),
-                eventName = "deviceaccelerometer",
-                systemEventName = "deviceaccelerometer",
-                env = {webview: {id: 22 }};
-
-            spyOn(context, "removeEventListener");
-
-            index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(context.removeEventListener).toHaveBeenCalledWith(systemEventName, jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-
-            //Will not stop an unstarted event
-            context.removeEventListener.reset();
-            index.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(context.removeEventListener).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith("Underlying listener for " + eventName + " never started for webview " + env.webview.id);
-        });
-
-    });
-
-    describe("sensors", function () {
-        describe("setOptions", function () {
-
-            it("can call success", function () {
-                var success = jasmine.createSpy(),
-                    options = { "sensor" : "devicecompass", "delay" : 10000 },
-                    args = { "options" : JSON.stringify(options) };
-
-                index.setOptions(success, null, args, null);
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "setOptions " + JSON.stringify(options));
-                expect(success).toHaveBeenCalled();
-            });
-
-            it("can call with invalid parameters", function () {
-                var fail = jasmine.createSpy(),
-                    options = { "sensor" : "devicecompass", "delay" : "10000", background : 0 },
-                    args = { options : JSON.stringify(options) };
-
-                index.setOptions(null, fail, args, null);
-                expect(fail).toHaveBeenCalled();
-            });
-        });
-
-        describe("supportedSensors", function () {
-
-            it("can get a list of supported sensors", function () {
-                var success = jasmine.createSpy();
-
-                index.supportedSensors(success, null, null, null);
-                expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "supportedSensors");
-                expect(success).toHaveBeenCalled();
-            });
-        });
-
-    });
-});
diff --git a/test/unit/com.blackberry.sensors/sensorEvents.js b/test/unit/com.blackberry.sensors/sensorEvents.js
deleted file mode 100755
index 15cb6dd..0000000
--- a/test/unit/com.blackberry.sensors/sensorEvents.js
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.sensors/",
-    sensorsEvents;
-
-describe("sensor sensorEvents", function () {
-    beforeEach(function () {
-        GLOBAL.JNEXT = {
-            require: jasmine.createSpy().andReturn(true),
-            createObject: jasmine.createSpy().andReturn("1"),
-            invoke: jasmine.createSpy().andReturn(2),
-            registerEvents: jasmine.createSpy().andReturn(true),
-            Sensor: function () {},
-        };
-        sensorsEvents = require(_apiDir + "sensorsEvents");
-    });
-
-    afterEach(function () {
-        GLOBAL.JNEXT = null;
-        sensorsEvents = null;
-    });
-
-    describe("addEventListener", function () {
-        var trigger = function () {};
-
-        it("invokes JNEXT startSensor for 'deviceaccelerometer' event", function () {
-            sensorsEvents.addEventListener("deviceaccelerometer", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "deviceaccelerometer");
-        });
-
-        it("invokes JNEXT startSensor for 'devicemagnetometer' event", function () {
-            sensorsEvents.addEventListener("devicemagnetometer", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicemagnetometer");
-        });
-
-        it("invokes JNEXT startSensor for 'devicegyroscope' event", function () {
-            sensorsEvents.addEventListener("devicegyroscope", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicegyroscope");
-        });
-
-        it("invokes JNEXT startSensor for 'devicecompass' event", function () {
-            sensorsEvents.addEventListener("devicecompass", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicecompass");
-        });
-
-        it("invokes JNEXT startSensor for 'deviceproximity' event", function () {
-            sensorsEvents.addEventListener("deviceproximity", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "deviceproximity");
-        });
-
-        it("invokes JNEXT startSensor for 'devicelight' event", function () {
-            sensorsEvents.addEventListener("devicelight", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicelight");
-        });
-
-        it("invokes JNEXT startSensor for 'devicegravity' event", function () {
-            sensorsEvents.addEventListener("devicegravity", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicegravity");
-        });
-
-        it("invokes JNEXT startSensor for 'devicelinearacceleration' event", function () {
-            sensorsEvents.addEventListener("devicelinearacceleration", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicelinearacceleration");
-        });
-
-        it("invokes JNEXT startSensor for 'devicerotationmatrix' event", function () {
-            sensorsEvents.addEventListener("devicerotationmatrix", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "devicerotationmatrix");
-        });
-
-        it("invokes JNEXT startSensor for 'deviceorientation' event", function () {
-            sensorsEvents.addEventListener("deviceorientation", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "deviceorientation");
-        });
-
-        it("invokes JNEXT startSensor for 'deviceazimuthpitchroll' event", function () {
-            sensorsEvents.addEventListener("deviceazimuthpitchroll", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "deviceazimuthpitchroll");
-        });
-
-        it("invokes JNEXT startSensor for 'deviceholster' event", function () {
-            sensorsEvents.addEventListener("deviceholster", trigger);
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "startSensor " + "deviceholster");
-        });
-
-    });
-
-    describe("removeEventListener", function () {
-        it("invokes JNEXT stopSensor for 'deviceaccelerometer' event", function () {
-            sensorsEvents.removeEventListener("deviceaccelerometer");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "deviceaccelerometer");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicemagnetometer' event", function () {
-            sensorsEvents.removeEventListener("devicemagnetometer");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicemagnetometer");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicegyroscope' event", function () {
-            sensorsEvents.removeEventListener("devicegyroscope");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicegyroscope");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicecompass' event", function () {
-            sensorsEvents.removeEventListener("devicecompass");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicecompass");
-        });
-
-        it("invokes JNEXT stopSensor for 'deviceproximity' event", function () {
-            sensorsEvents.removeEventListener("deviceproximity");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "deviceproximity");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicelight' event", function () {
-            sensorsEvents.removeEventListener("devicelight");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicelight");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicegravity' event", function () {
-            sensorsEvents.removeEventListener("devicegravity");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicegravity");
-        });
-
-        it("invokes JNEXT stopSensor for 'devicelinearacceleration' event", function () {
-            sensorsEvents.removeEventListener("devicelinearacceleration");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicelinearacceleration");
-        });
-        
-        it("invokes JNEXT stopSensor for 'devicerotationmatrix' event", function () {
-            sensorsEvents.removeEventListener("devicerotationmatrix");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "devicerotationmatrix");
-        });
-
-        it("invokes JNEXT stopSensor for 'deviceorientation' event", function () {
-            sensorsEvents.removeEventListener("deviceorientation");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "deviceorientation");
-        });
-
-        it("invokes JNEXT stopSensor for 'deviceazimuthpitchroll' event", function () {
-            sensorsEvents.removeEventListener("deviceazimuthpitchroll");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "deviceazimuthpitchroll");
-        });
-
-        it("invokes JNEXT stopSensor for 'deviceholster' event", function () {
-            sensorsEvents.removeEventListener("deviceholster");
-            expect(JNEXT.invoke).toHaveBeenCalledWith(jasmine.any(String), "stopSensor " + "deviceholster");
-        });        
-    });
-});
-
diff --git a/test/unit/com.blackberry.system/client.js b/test/unit/com.blackberry.system/client.js
deleted file mode 100755
index 034bd3d..0000000
--- a/test/unit/com.blackberry.system/client.js
+++ /dev/null
@@ -1,220 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var extDir = __dirname + "/../../../plugin",
-    ID = "com.blackberry.system",
-    apiDir = extDir + "/" + ID,
-    sysClient = null,
-    MockedChannel,
-    channelRegistry = {};
-
-describe("system client", function () {
-    beforeEach(function () {
-
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-
-        GLOBAL.cordova = {
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andCallFake(function (eventName) {
-                channelRegistry[eventName] = new MockedChannel();
-                return channelRegistry[eventName];
-            }),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent"),
-            exec: jasmine.createSpy("cordova.exec"),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-
-        sysClient = require(apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(apiDir + "/www/client")];
-        sysClient = null;
-    });
-
-    it("defines events", function () {
-        var events = ["batterystatus", "batterylow", "batterycritical", "languagechanged", "regionchanged", "fontchanged", "perimeterlocked", "perimeterunlocked"];
-        events.forEach(function (event) {
-            var channel;
-
-            //test channel creation
-            expect(cordova.addDocumentEventHandler).toHaveBeenCalledWith(event);
-
-            //test Subscriber add
-            channel = channelRegistry[event];
-            channel.numHandlers = 1;
-            channel.onHasSubscribersChange();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "startEvent", {eventName: event});
-
-            //test Subscriber remove
-            channel.numHandlers = 0;
-            channel.onHasSubscribersChange();
-            expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "stopEvent", {eventName: event});
-        });
-    });
-
-    it("hasCapability", function () {
-        var result;
-
-        cordova.exec.andCallFake(function (success) {
-            success(true);
-        });
-
-        result = sysClient.hasCapability("abc.def");
-
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "hasCapability", {"capability": "abc.def"});
-        expect(result).toBeTruthy();
-    });
-
-    it("getFontInfo", function () {
-        var result;
-
-        cordova.exec.andCallFake(function (success, fail, service, action, args) {
-            success(true);
-        });
-
-        result = sysClient.getFontInfo();
-
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "getFontInfo", undefined);
-        expect(result).toBeTruthy();
-    });
-
-    it("getCurrentTimezone", function () {
-        var result;
-
-        cordova.exec.andCallFake(function (success, fail, service, action, args) {
-            success("America/New_York");
-        });
-
-        result = sysClient.getCurrentTimezone();
-
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "getCurrentTimezone", undefined);
-        expect(result).toBe("America/New_York");
-    });
-
-    it("getTimezones", function () {
-        var timezones = ["America/New_York", "America/Los_Angeles"],
-            result;
-
-        cordova.exec.andCallFake(function (success, fail, service, action, args) {
-            success(timezones);
-        });
-
-        result = sysClient.getTimezones();
-
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "getTimezones", undefined);
-        expect(result).toBe(timezones);
-    });
-
-    it("setWallpaper", function () {
-        var filePath = "file:///accounts/1000/shared/camera/IMG_00000001.jpg";
-
-        sysClient.setWallpaper(filePath);
-
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "setWallpaper", {"wallpaper": filePath});
-    });
-
-    it("deviceLockedStatus", function () {
-        cordova.exec.andCallFake(function (success, fail, service, action, args) {
-            success("notLocked");
-        });
-
-        expect(sysClient.deviceLockedStatus).toEqual("notLocked");
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "deviceLockedStatus", undefined);
-    });
-
-    describe("device properties and ReadOnlyFields", function () {
-
-        var mockDeviceProperties = {
-            hardwareId: "123",
-            softwareVersion: "456",
-            name: "789"
-        };
-
-        beforeEach(function () {
-            cordova.exec.andCallFake(function (success, fail, service, action, args) {
-                success(mockDeviceProperties);
-            });
-            delete require.cache[require.resolve(apiDir + "/www/client")];
-            sysClient = require(apiDir + "/www/client");
-        });
-
-        it("defines ALLOW", function () {
-            expect(sysClient.ALLOW).toEqual(0);
-        });
-
-        it("defines DENY", function () {
-            expect(sysClient.DENY).toEqual(1);
-        });
-
-        it("sets readonly fields", function () {
-            expect(sysClient.hardwareId).toEqual("123");
-            expect(sysClient.softwareVersion).toEqual("456");
-            expect(sysClient.name).toEqual("789");
-        });
-    });
-
-    describe("properties", function () {
-
-        describe("region", function () {
-            beforeEach(function () {
-                cordova.exec.andCallFake(function (success, fail, namespace, field) {
-                    if (field === "language") {
-                        success("fr_CA");
-                    } else if (field === "region") {
-                        success("en_US");
-                    }
-                });
-            });
-
-            it("region", function () {
-                expect(sysClient.region).toEqual("en_US");
-                expect(cordova.exec.argsForCall).toContain([jasmine.any(Function), jasmine.any(Function), ID, "region", undefined]);
-            });
-        });
-
-        describe("language", function () {
-            var mockNavigator;
-
-            beforeEach(function () {
-                mockNavigator = {
-                    language: (new Date()).toString()
-                };
-                GLOBAL.navigator = mockNavigator;
-                sysClient = require(apiDir + "/www/client");
-            });
-
-            afterEach(function () {
-                delete GLOBAL.navigator;
-            });
-
-            it("defines a getter for navigator.language", function () {
-                expect(sysClient.language).toEqual(mockNavigator.language);
-            });
-
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.system/index.js b/test/unit/com.blackberry.system/index.js
deleted file mode 100755
index 57f9066..0000000
--- a/test/unit/com.blackberry.system/index.js
+++ /dev/null
@@ -1,336 +0,0 @@
-/*
- * Copyright 2011-2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var libDir = __dirname + "/../../../lib/",
-    extDir = __dirname + "/../../../plugin/",
-    ID = "com.blackberry.system",
-    apiDir = extDir + ID + "/",
-    Whitelist = require(libDir + "policy/whitelist").Whitelist,
-    events = require(libDir + "event"),
-    utils = require(libDir + "utils"),
-    mockedPluginResult,
-    mockApplication = {},
-    sysIndex;
-
-describe("system index", function () {
-
-    beforeEach(function () {
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        GLOBAL.window = {
-            qnx: {
-                webplatform: {
-                    device: {
-                        getTimezones: jasmine.createSpy().andCallFake(function (callback) {
-                            callback(["America/New_York", "America/Los_Angeles"]);
-                        }),
-                        timezone: "hello123"
-                    },
-                    getApplication: jasmine.createSpy().andReturn(mockApplication)
-                }
-            }
-        };
-        sysIndex = require(apiDir + "index");
-    });
-
-    afterEach(function () {
-        delete require.cache[require.resolve(apiDir + "index")];
-        sysIndex = null;
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-    });
-
-    describe("Events", function () {
-        var noop = function () {};
-
-        it("startEvent", function () {
-            var applicationEvents = require(libDir + "events/applicationEvents"),
-                eventName = "perimeterunlocked",
-                env = {webview: {id: 42 }};
-
-            spyOn(applicationEvents, "removeEventListener");
-            spyOn(applicationEvents, "addEventListener");
-
-            sysIndex.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.addEventListener).toHaveBeenCalledWith("windowUnlock", jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-
-            //Will start twice, and remove old event
-            sysIndex.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.removeEventListener).toHaveBeenCalledWith("windowUnlock", jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        });
-
-        it("stopEvent", function () {
-            var applicationEvents = require(libDir + "events/applicationEvents"),
-                eventName = "perimeterunlocked",
-                env = {webview: {id: 42 }};
-
-            spyOn(applicationEvents, "addEventListener");
-            spyOn(applicationEvents, "removeEventListener");
-
-            sysIndex.startEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            sysIndex.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(applicationEvents.removeEventListener).toHaveBeenCalledWith("windowUnlock", jasmine.any(Function));
-            expect(mockedPluginResult.noResult).toHaveBeenCalledWith(false);
-
-            //Will not stop an unstarted event
-            sysIndex.stopEvent(noop, noop, {eventName: encodeURIComponent(JSON.stringify(eventName))}, env);
-            expect(mockedPluginResult.error).toHaveBeenCalledWith("Underlying listener for " + eventName + " never started for webview " + env.webview.id);
-        });
-
-    });
-
-    it("hasCapability", function () {
-        sysIndex.hasCapability(undefined, undefined, {"capability": "network.wlan"}, undefined);
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith(true, false);
-    });
-
-    describe("qnx.webplatform.device properties", function () {
-
-        it("can call fail if a property isn't present", function () {
-            delete window.qnx.webplatform.device; 
-            sysIndex.getDeviceProperties();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith(jasmine.any(String), false);
-        });
-
-        it("can call success with getDeviceProperties", function () {
-            var hardwareId = "0x8500240a",
-                softwareVersion = "10.0.6.99",
-                name = "Device";
-
-            window.qnx.webplatform.device.hardwareId = hardwareId;
-            window.qnx.webplatform.device.scmBundle = softwareVersion;
-            window.qnx.webplatform.device.deviceName = name;
-
-            sysIndex.getDeviceProperties();
-
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith({
-                "hardwareId" : hardwareId,
-                "softwareVersion" : softwareVersion,
-                "name": name
-            }, false);
-        });
-
-    });
-
-
-    describe("device region", function () {
-
-        it("calls success when there is no error retrieving data", function () {
-            mockApplication.systemRegion = (new Date()).getTime();
-
-            sysIndex.region();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(window.qnx.webplatform.getApplication().systemRegion, false);
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("calls fail when there is an error", function () {
-            var errMsg = "Something bad happened";
-
-            Object.defineProperty(mockApplication, "systemRegion", {
-                get: function () {
-                    throw new Error(errMsg);
-                }
-            });
-
-            sysIndex.region();
-            expect(mockedPluginResult.ok).not.toHaveBeenCalled();
-            expect(mockedPluginResult.error).toHaveBeenCalledWith(errMsg, false);
-        });
-    });
-
-    describe("font", function () {
-        describe("font methods", function () {
-            var fontFamily = "courier",
-                fontSize = 10,
-                mockedFontFamily,
-                mockedFontSize,
-                ERROR_ID = -1;
-
-            beforeEach(function () {
-                mockedFontFamily = jasmine.createSpy("getSystemFontFamily").andReturn(fontFamily);
-                mockedFontSize = jasmine.createSpy("getSystemFontSize").andReturn(fontSize);
-                GLOBAL.window = {
-                    qnx: {
-                        webplatform: {
-                            getApplication: function () {
-                                return {
-                                    getSystemFontFamily: mockedFontFamily,
-                                    getSystemFontSize: mockedFontSize
-                                };
-                            }
-                        }
-                    }
-                };
-            });
-
-            afterEach(function () {
-                delete GLOBAL.window;
-                mockedFontFamily = null;
-                mockedFontSize = null;
-                delete GLOBAL.window;
-            });
-
-            it("can call fontFamily and fontSize the qnx.weblplatform Application", function () {
-                sysIndex.getFontInfo();
-                expect(mockedFontFamily).toHaveBeenCalled();
-                expect(mockedFontSize).toHaveBeenCalled();
-            });
-
-            it("can call success callback when getFontInfo call succeed", function () {
-                sysIndex.getFontInfo();
-                expect(mockedPluginResult.ok).toHaveBeenCalledWith({'fontFamily': fontFamily, 'fontSize': fontSize}, false);
-                expect(mockedPluginResult.error).not.toHaveBeenCalled();
-            });
-/*
-            it("can call fail callback when getFontInfo call failed", function () {
-                sysIndex.getFontInfo();
-                expect(mockedPluginResult.ok).not.toHaveBeenCalledWith({'fontFamily': fontFamily, 'fontSize': fontSize}, false);
-                expect(mockedPluginResult.error).toHaveBeenCalledWith(ERROR_ID, jasmine.any(Object), false);
-            });*/
-        });
-    });
-
-    describe("getCurrentTimezone", function () {
-        it("return timezone from PPS", function () {
-            sysIndex.getCurrentTimezone();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("hello123", false);
-        });
-    });
-
-    describe("getTimezones", function () {
-        it("return timezones from native", function () {
-            sysIndex.getTimezones();
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith(["America/New_York", "America/Los_Angeles"], false);
-        });
-    });
-
-    describe("setWallpaper", function () {
-        var mockApplication;
-
-        beforeEach(function () {
-            mockApplication = {};
-
-            mockApplication.newWallpaper = jasmine.createSpy("newWallpaper method");
-            mockApplication.getEnv = function (envName) {
-                if (envName === "HOME") {
-                    return "/accounts/1000/appdata/data";
-                }
-            };
-            GLOBAL.window = {
-                qnx: {
-                    webplatform: {
-                        getApplication: jasmine.createSpy().andReturn(mockApplication)
-                    }
-                }
-            };
-        });
-
-        afterEach(function () {
-            mockApplication.newWallpaper = null;
-            mockApplication = null;
-            delete GLOBAL.window;
-        });
-
-        it("calls setWallpaper with success callback at the end for NOT local path", function () {
-            var filePath = "/accounts/1000/shared/camera/IMG_00000001.jpg",
-                request = {wallpaper: encodeURIComponent(JSON.stringify(filePath))};
-
-            sysIndex.setWallpaper(null, null, request);
-
-            expect(mockApplication.newWallpaper).toHaveBeenCalledWith(filePath);
-            expect(mockedPluginResult.ok).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("calls setWallpaper with success callback at the end for local path", function () {
-            var imageName = "IMG_00000001.jpg",
-                localPath = "local:///" + imageName,
-                request = {wallpaper: encodeURIComponent(JSON.stringify(localPath))},
-                tranlatedPath;
-
-            sysIndex.setWallpaper(null, null, request);
-            tranlatedPath = mockApplication.newWallpaper.mostRecentCall.args[0];
-
-            // Checking if the image name is at the end of translated path
-            expect(tranlatedPath.indexOf(imageName)).toEqual(tranlatedPath.length - imageName.length);
-
-            expect(mockedPluginResult.ok).toHaveBeenCalled();
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-
-        it("calls setWallpaper with path no prefixed 'file://' for NOT local path", function () {
-            var filePathPrefix = "file://",
-                filePath = "/accounts/1000/shared/camera/IMG_00000001.jpg",
-                request = {wallpaper: encodeURIComponent(JSON.stringify(filePathPrefix + filePath))};
-
-            sysIndex.setWallpaper(null, null, request);
-
-            expect(mockApplication.newWallpaper).toHaveBeenCalledWith(filePath);
-        });
-
-        it("calls setWallpaper with path no prefixed 'file://' for local path", function () {
-            var excludedPrefix = "file://",
-                localPath = "local:///accounts/1000/shared/camera/IMG_00000001.jpg",
-                request = {wallpaper: encodeURIComponent(JSON.stringify(localPath))},
-                tranlatedPath;
-
-            sysIndex.setWallpaper(null, null, request);
-            tranlatedPath = mockApplication.newWallpaper.mostRecentCall.args[0];
-
-            // Checking the tranlated path not prefixed with 'file://'
-            expect(tranlatedPath.indexOf(excludedPrefix)).toEqual(-1);
-        });
-    });
-
-    describe("deviceLockedStatus", function () {
-        var mockApplication;
-
-        beforeEach(function () {
-            mockApplication = {};
-
-            mockApplication.isDeviceLocked = jasmine.createSpy("isDeviceLocked").andCallFake(function (callback) {
-                callback("notLocked");
-            });
-
-            GLOBAL.window = {
-                qnx: {
-                    webplatform: {
-                        getApplication: jasmine.createSpy().andReturn(mockApplication)
-                    }
-                }
-            };
-        });
-
-        afterEach(function () {
-            mockApplication.isDeviceLocked = null;
-            mockApplication = null;
-            delete GLOBAL.window;
-        });
-
-        it("returns status from webplatform", function () {
-            sysIndex.deviceLockedStatus();
-            expect(mockApplication.isDeviceLocked).toHaveBeenCalledWith(jasmine.any(Function));
-            expect(mockedPluginResult.ok).toHaveBeenCalledWith("notLocked", false);
-            expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        });
-    });
-});
diff --git a/test/unit/com.blackberry.ui.contextmenu/client.js b/test/unit/com.blackberry.ui.contextmenu/client.js
deleted file mode 100755
index 4f42b05..0000000
--- a/test/unit/com.blackberry.ui.contextmenu/client.js
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _ID = "com.blackberry.ui.contextmenu",
-    _extDir = __dirname + "/../../../plugin",
-    _apiDir = _extDir + "/" + _ID,
-    client = null;
-
-describe("com.blackberry.ui.contextmenu client", function () {
-
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy("exec").andCallFake(function (success) {
-                success(true);
-            }),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-        delete GLOBAL.cordova;
-    });
-
-    it("enabled context menu calls exec", function () {
-        client.enabled = true;
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "enabled", {"enabled": true});
-    });
-
-    it("disabled context menu calls exec", function () {
-        client.enabled = false;
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "enabled", {"enabled": false});
-    });
-
-    it('expect context menu contexts to be defined properly', function () {
-        expect(client.CONTEXT_ALL).toEqual("ALL");
-        expect(client.CONTEXT_IMAGE).toEqual("IMAGE");
-        expect(client.CONTEXT_IMAGE_LINK).toEqual("IMAGE_LINK");
-        expect(client.CONTEXT_LINK).toEqual("LINK");
-        expect(client.CONTEXT_INPUT).toEqual("INPUT");
-        expect(client.CONTEXT_TEXT).toEqual("TEXT");
-    });
-
-    it('expect context menu action Ids to be defined properly', function () {
-        expect(client.ACTION_CANCEL).toEqual("Cancel");
-        expect(client.ACTION_CLEAR_FIELD).toEqual("ClearField");
-        expect(client.ACTION_COPY).toEqual("Copy");
-        expect(client.ACTION_COPY_IMAGE_LINK).toEqual("CopyImageLink");
-        expect(client.ACTION_COPY_LINK).toEqual("CopyLink");
-        expect(client.ACTION_CUT).toEqual("Cut");
-        expect(client.ACTION_INSPECT_ELEMENT).toEqual("InspectElement");
-        expect(client.ACTION_PASTE).toEqual("Paste");
-        expect(client.ACTION_SAVE_IMAGE).toEqual("SaveImage");
-        expect(client.ACTION_SAVE_LINK_AS).toEqual("SaveLinkAs");
-        expect(client.ACTION_VIEW_IMAGE).toEqual("ViewImage");
-        expect(client.ACTION_SELECT).toEqual("Select");
-    });
-
-    it("Cannot add a menu item without a context", function () {
-        var myItem = {actionId: 'OpenLink', label: 'This is a lable'};
-        expect(client.addItem(undefined, myItem, null)).toEqual('Adding a custom menu item requires a context');
-    });
-
-    it("Cannot add a menu item without an actionId", function () {
-        var myItem = {label: 'OpenLink'},
-            contexts = [client.CONTEXT_LINK];
-        expect(client.addItem(contexts, myItem, null)).toEqual('Adding a custom menu item requires an actionId');
-    });
-
-    it("Cannot remove a menu item without an actionId", function () {
-        var contexts = [client.CONTEXT_LINK];
-        expect(client.removeItem(contexts, undefined, null)).toEqual('Removing a custom menu item requires an actionId');
-    });
-
-    it("Cannot remove a menu item without a context", function () {
-        var myItem = {label: 'OpenLink'};
-        expect(client.removeItem(undefined, myItem, null)).toEqual('Removing a custom menu item requires a context');
-    });
-
-    it("defineCustomContext calls exec", function () {
-        var options = {
-            includeContextItems: [client.CONTEXT_IMAGE],
-            includePlatformItems: false,
-            includeMenuServiceItems: false
-        };
-
-        client.defineCustomContext("myContext", options);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "defineCustomContext", {context: "myContext", options: options});
-    });
-
-    it("Can override an item with an action and handler", function () {
-        var myItem = {actionId: 'OpenLink', label: 'This is a lable'},
-            handler = jasmine.createSpy();
-        client.overrideItem(myItem, handler);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'overrideItem', {action: myItem});
-    });
-
-    it("Can clear an item with an actionId", function () {
-        var actionId = 'OpenLink';
-        client.clearOverride(actionId);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, 'clearOverride', {actionId: actionId});
-    });
-});
diff --git a/test/unit/com.blackberry.ui.contextmenu/index.js b/test/unit/com.blackberry.ui.contextmenu/index.js
deleted file mode 100755
index 42d3e31..0000000
--- a/test/unit/com.blackberry.ui.contextmenu/index.js
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-var _extDir = __dirname + "/../../../plugin/",
-    _libDir = __dirname + "/../../../lib/",
-    contextmenu,
-    overlayWebView,
-    mockedPluginResult,
-    mockedContextMenu = {
-        addItem: jasmine.createSpy().andCallFake(function (success, fail, args, env) {
-            if (args && typeof args.handler === 'function') {
-                args.handler('Copy', '1');
-            }
-        }),
-        removeItem: jasmine.createSpy(),
-        overrideItem: jasmine.createSpy(),
-        clearOverride: jasmine.createSpy(),
-        defineCustomContext: jasmine.createSpy(),
-        enabled : true
-    },
-    mockedQnx = {
-        webplatform: {
-            getController: function () {
-                return {
-                    addEventListener: function (eventType, callback) {
-                        callback();
-                    }
-                };
-            },
-            createUIWebView: function () {
-                return {
-                    contextMenu : mockedContextMenu
-                };
-            }
-        }
-    };
-
-describe("com.blackberry.ui.contextmenu index", function () {
-
-    beforeEach(function () {
-        GLOBAL.qnx = mockedQnx;
-        GLOBAL.window = {
-            qnx: mockedQnx
-        };
-        contextmenu = require(_extDir + "com.blackberry.ui.contextmenu");
-        overlayWebView = require(_libDir + "overlayWebView");
-        overlayWebView.create();
-        overlayWebView.contextMenu = mockedContextMenu;
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult"),
-            callbackOk: jasmine.createSpy("PluginResult.callbackOk")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-    });
-
-    afterEach(function () {
-        delete GLOBAL.qnx;
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-    });
-
-    it("can set the enabled property to false properly", function () {
-        var args = {
-                enabled: false
-            },
-            env = {};
-        contextmenu.enabled(null, null, args, env);
-        expect(overlayWebView.contextMenu.enabled).toEqual(false);
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-    });
-
-    it("can set and read the enabled property to true", function () {
-        var args = {
-                enabled: true
-            },
-            env = {};
-
-        contextmenu.enabled(null, null, args, env);
-        expect(overlayWebView.contextMenu.enabled).toEqual(true);
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-    });
-
-    it("Will not set the property when incorrect parameters are passed", function () {
-        var args = {
-                enabled: true
-            },
-            env = {};
-
-        contextmenu.enabled(null, null, args, env);
-        expect(mockedContextMenu.enabled).toEqual(true);
-        args = {
-            enabled: "false"
-        };
-        env = {};
-        expect(mockedContextMenu.enabled).toEqual(true);
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-    });
-
-    it("can add a custom menu item", function () {
-        var args = {
-                contexts: encodeURIComponent(JSON.stringify(['ALL'])),
-                action: encodeURIComponent(JSON.stringify({actionId: 'explosion'})),
-            },
-            env = {},
-            expectedArgs = {
-                contexts: ['ALL'],
-                action: {actionId: 'explosion'},
-                handler: jasmine.any(Function)
-            };
-
-        contextmenu.addItem(null, null, args, env);
-        expect(mockedContextMenu.addItem).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), expectedArgs, env);
-    });
-
-    it("properly passes the sourceId from the handler back to the callback", function () {
-        var args = {
-                contexts: encodeURIComponent(JSON.stringify(['ALL'])),
-                action: encodeURIComponent(JSON.stringify({actionId: 'explosion'})),
-            },
-            env = {};
-
-        contextmenu.addItem(null, null, args, env);
-        expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith("1", true);
-    });
-
-    it("can remove a custom menu item", function () {
-        var id = 42,
-            args = {
-                contexts: encodeURIComponent(JSON.stringify(['ALL'])),
-                actionId: encodeURIComponent(JSON.stringify(id)),
-            },
-            env = {},
-            expectedArgs = {
-                contexts: ['ALL'],
-                actionId: id
-            };
-
-        contextmenu.removeItem(null, null, args, env);
-        expect(mockedContextMenu.removeItem).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), expectedArgs, env);
-    });
-
-    it("can define a custom context", function () {
-        var args = {
-                context: encodeURIComponent(JSON.stringify("myContext")),
-                options: encodeURIComponent(JSON.stringify({
-                    includeContextItems: ['IMAGE'],
-                    includePlatformItems: false,
-                    includeMenuServiceItems: false
-                })),
-            },
-            env = {};
-
-        contextmenu.defineCustomContext(null, null, args, env);
-        expect(mockedContextMenu.defineCustomContext).toHaveBeenCalledWith("myContext", {
-            includeContextItems: ['IMAGE'],
-            includePlatformItems: false,
-            includeMenuServiceItems: false
-        });
-    });
-
-    it("has an override menu item function", function () {
-        expect(contextmenu.overrideItem).toBeDefined();
-    });
-
-    it("has an clearmenu item function", function () {
-        expect(contextmenu.clearOverride).toBeDefined();
-    });
-
-    it("can override a platform menu item", function () {
-        var args = {
-                action: encodeURIComponent(JSON.stringify({actionId: 'Paste'}))
-            },
-            env = {};
-        contextmenu.overrideItem(null, null, args, env);
-        expect(mockedContextMenu.overrideItem).toHaveBeenCalledWith({ actionId: 'Paste'}, jasmine.any(Function));
-    });
-
-    it("can override a platform MenuService menu item", function () {
-        var args = {
-                action: encodeURIComponent(JSON.stringify({actionId: 'MenuService-Share'}))
-            },
-            env = {};
-        contextmenu.overrideItem(null, null, args, env);
-        expect(mockedContextMenu.overrideItem).toHaveBeenCalledWith({ actionId: 'MenuService-Share'}, jasmine.any(Function));
-    });
-
-    it("can clear an overriden platform menu item", function () {
-        var args = {
-                actionId: encodeURIComponent(JSON.stringify('Copy'))
-            },
-            env = {};
-        contextmenu.clearOverride(null, null, args, env);
-        expect(mockedContextMenu.clearOverride).toHaveBeenCalledWith('Copy');
-    });
-
-    it("can clear an overriden menu item", function () {
-        var args = {
-                actionId: encodeURIComponent(JSON.stringify('MenuService-Share'))
-            },
-            env = {};
-        contextmenu.clearOverride(null, null, args, env);
-        expect(mockedContextMenu.clearOverride).toHaveBeenCalledWith('MenuService-Share');
-    });
-
-});
diff --git a/test/unit/com.blackberry.ui.cover/client.js b/test/unit/com.blackberry.ui.cover/client.js
deleted file mode 100755
index 3eeda2a..0000000
--- a/test/unit/com.blackberry.ui.cover/client.js
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var _extDir = __dirname + "/../../../plugin",
-    _ID = "com.blackberry.ui.cover",
-    _apiDir = _extDir + "/" + _ID,
-    client,
-    channelRegistry = {},
-    MockedChannel;
-
-function isDefinedAndEquals(property, value) {
-    expect(property).toBeDefined();
-    expect(property).toEqual(value);
-}
-
-describe("client ui.cover", function () {
-    beforeEach(function () {
-        MockedChannel = function () {
-            return {
-                onHasSubscribersChange: undefined,
-                numHandlers: undefined
-            };
-        };
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy("exec"),
-            require: function () {
-                return cordova.exec;
-            },
-            addDocumentEventHandler: jasmine.createSpy("cordova.addDocumentEventHandler").andCallFake(function (eventName) {
-                channelRegistry[eventName] = new MockedChannel();
-                return channelRegistry[eventName];
-            }),
-            fireDocumentEvent: jasmine.createSpy("cordova.fireDocumentEvent")
-        };
-        client = require(_apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(_apiDir + "/www/client")];
-    });
-
-    it("constants are defined", function () {
-        isDefinedAndEquals(client.TYPE_SNAPSHOT, "snapshot");
-        isDefinedAndEquals(client.TYPE_IMAGE, "file");
-        isDefinedAndEquals(client.TRANSITION_FADE, "fade");
-        isDefinedAndEquals(client.TRANSITION_SLIDE, "slide");
-        isDefinedAndEquals(client.TRANSITION_NONE, "none");
-        isDefinedAndEquals(client.TRANSITION_DEFAULT, "default");
-    });
-
-    it("reset cover calls exec with the correct parameters", function () {
-        client.resetCover();
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "resetCover");
-    });
-
-    it("coverSize calls exec with the correct parameters", function () {
-        expect(client.coverSize).toEqual(undefined);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "coverSize");
-    });
-
-    it("updateCover calls exec with the correct parameters", function () {
-        client.setContent(client.TYPE_IMAGE, {path: "/path/to/an/image.png"});
-        client.setTransition(client.TRANSITION_DEFAULT);
-        client.labels.push({"label": "Text Label", "size": 8, "color": "#FF0000", "wrap": false});
-        client.showBadges = false;
-        client.updateCover();
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), _ID, "updateCover", {"cover": {
-            cover: {
-                type: client.TYPE_IMAGE,
-                path: "/path/to/an/image.png"
-            },
-            transition: client.TRANSITION_DEFAULT,
-            text: [{"label": "Text Label", "size": 8, "color": "#FF0000", "wrap": false}],
-            badges: false
-        }});
-    });
-
-});
diff --git a/test/unit/com.blackberry.ui.cover/index.js b/test/unit/com.blackberry.ui.cover/index.js
deleted file mode 100755
index 3571a09..0000000
--- a/test/unit/com.blackberry.ui.cover/index.js
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Copyright 2012 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var _apiDir = __dirname + "/../../../plugin/com.blackberry.ui.cover/",
-    _libDir = __dirname + "/../../../lib/",
-    events = require(_libDir + "event"),
-    index,
-    mockedPluginResult,
-    mockedCoverSize,
-    mockedUpdateCover;
-
-describe("index ui.cover", function () {
-    beforeEach(function () {
-        index = require(_apiDir + "index");
-        mockedCoverSize = '{"width":334,"height":396}';
-        mockedUpdateCover = jasmine.createSpy("update cover");
-        GLOBAL.window = {
-            qnx: {
-                webplatform: {
-                    getApplication: function () {
-                        return {
-                            coverSize: mockedCoverSize,
-                            updateCover: mockedUpdateCover,
-                            getEnv: function (path) {
-                                if (path === "HOME")
-                                    return "/accounts/home";
-                            }
-                        };
-                    }
-                }
-            }
-        };
-        mockedPluginResult = {
-            ok: jasmine.createSpy("PluginResult.ok"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.PluginResult;
-        index = null;
-        mockedCoverSize = null;
-        mockedUpdateCover = null;
-        mockedPluginResult = null;
-    });
-
-    it("gets coverSize", function () {
-        var success = jasmine.createSpy(),
-            fail = jasmine.createSpy();
-        index.coverSize(success, fail);
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith({width: 334, height: 396}, false);
-        expect(mockedPluginResult.error).not.toHaveBeenCalled();
-    });
-
-    it("resetCover", function () {
-        var success = jasmine.createSpy(),
-            fail = jasmine.createSpy(),
-            resetCover = {cover: "reset"};
-
-        index.resetCover(success, fail, {cover: encodeURIComponent(JSON.stringify(resetCover))});
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-        expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        expect(mockedUpdateCover).toHaveBeenCalledWith(resetCover);
-    });
-
-    it("updateCover", function () {
-        var success = jasmine.createSpy(),
-            fail = jasmine.createSpy(),
-            fakeCover = {
-                cover: {
-                    type: "file",
-                    path: "/path/to/application/cover.jpg"
-                },
-                text: [{"label": "cover label", "size": 5, "wrap": true}],
-            };
-        index.updateCover(success, fail, {cover: encodeURIComponent(JSON.stringify(fakeCover))}, null);
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-        expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        expect(mockedUpdateCover).toHaveBeenCalledWith(fakeCover);
-    });
-
-    it("updateCover strips file:// prefix before sending to webplatform", function () {
-        var success = jasmine.createSpy(),
-            fail = jasmine.createSpy(),
-            fakeCover = {
-                "cover": {
-                    type: "file",
-                    path: "file:///path/to/application/cover.jpg"
-                },
-                text: [{"label": "cover label", "size": 5, "wrap": true}],
-            };
-        index.updateCover(success, fail, {cover: encodeURIComponent(JSON.stringify(fakeCover))}, null);
-        expect(mockedPluginResult.ok).toHaveBeenCalled();
-        expect(mockedPluginResult.error).not.toHaveBeenCalled();
-        expect(mockedUpdateCover).toHaveBeenCalledWith({
-            "cover": {
-                type: "file",
-                path: "/path/to/application/cover.jpg"
-            },
-            text: [{"label": "cover label", "size": 5, "wrap": true}],
-        });
-    });
-
-});
diff --git a/test/unit/com.blackberry.ui.dialog/client.js b/test/unit/com.blackberry.ui.dialog/client.js
deleted file mode 100755
index b463035..0000000
--- a/test/unit/com.blackberry.ui.dialog/client.js
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- Licensed to the Apache Software Foundation (ASF) under one
- or more contributor license agreements.  See the NOTICE file
- distributed with this work for additional information
- regarding copyright ownership.  The ASF licenses this file
- to you under the Apache License, Version 2.0 (the
- "License"); you may not use this file except in compliance
- with the License.  You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
- Unless required by applicable law or agreed to in writing,
- software distributed under the License is distributed on an
- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- KIND, either express or implied.  See the License for the
- specific language governing permissions and limitations
- under the License.
- */
-
-var root = __dirname + "/../../../",
-    apiDir = root + "plugin/com.blackberry.ui.dialog/",
-    client = null,
-    ID = "com.blackberry.ui.dialog",
-    defineROFieldArgs = [];
-
-describe("ui.dialog client", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy(),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(apiDir + "www/client");
-    });
-
-    afterEach(function () {
-        delete require.cache[require.resolve(apiDir + "/www/client")];
-        delete GLOBAL.cordova;
-    });
-
-    it("should return constant for appropriate dialog styles", function () {
-        expect(client["D_OK"]).toEqual(0);
-        expect(client["D_SAVE"]).toEqual(1);
-        expect(client["D_DELETE"]).toEqual(2);
-        expect(client["D_YES_NO"]).toEqual(3);
-        expect(client["D_OK_CANCEL"]).toEqual(4);
-        expect(client["D_PROMPT"]).toEqual(5);
-    });
-
-    it("creates a dialog", function () {
-        var message = "hello world",
-            buttons = [ ],
-            callback = function () {},
-            settings = {};
-
-        client.customAskAsync(message, buttons, callback, settings);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "customAskAsync", { "message" : message, "buttons" : buttons, "callback" : callback, "settings" : settings });
-    });
-
-    it("creates a standard dialog", function () {
-        var message = "hello world",
-            type = 0,
-            callback = function () {},
-            settings = {};
-
-        client.standardAskAsync(message, type, callback, settings);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "standardAskAsync", { "message" : message, "type" : type, "callback" : callback, "settings" : settings });
-    });
-});
diff --git a/test/unit/com.blackberry.ui.dialog/index.js b/test/unit/com.blackberry.ui.dialog/index.js
deleted file mode 100755
index 6af73f5..0000000
--- a/test/unit/com.blackberry.ui.dialog/index.js
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var root = __dirname + "/../../../",
-    webview = require(root + "lib/webview"),
-    overlayWebView = require(root + "lib/overlayWebView"),
-    mockedPluginResult,
-    index;
-
-describe("ui.dialog index", function () {
-    beforeEach(function () {
-        GLOBAL.JNEXT = {
-            invoke : jasmine.createSpy(),
-            require : jasmine.createSpy()
-        };
-        mockedPluginResult = {
-            callbackOk: jasmine.createSpy("PluginResult.callbackOk"),
-            error: jasmine.createSpy("PluginResult.error"),
-            noResult: jasmine.createSpy("PluginResult.noResult")
-        };
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-        index = require(root + "plugin/com.blackberry.ui.dialog/index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.JNEXT;
-        delete GLOBAL.PluginResult;
-        delete require.cache[require.resolve(root + "plugin/com.blackberry.ui.dialog/index")];
-    });
-
-    it("makes sure that the dialog is called properly", function () {
-        var args = {};
-
-        spyOn(webview, "windowGroup").andReturn(42);
-        args.message = "Hello World";
-        args.buttons = [ "Yes", "No" ];
-        args.settings = { title: "Hi" };
-        args.message = encodeURIComponent(args.message);
-        args.buttons = encodeURIComponent(JSON.stringify(args.buttons));
-        args.settings = encodeURIComponent(JSON.stringify(args.settings));
-
-        spyOn(overlayWebView, "showDialog");
-        index.customAskAsync(null, null, args);
-
-        expect(overlayWebView.showDialog).toHaveBeenCalled();
-    });
-
-    it("makes sure that a message is specified", function () {
-        index.customAskAsync(null, null, {});
-        expect(mockedPluginResult.error).toHaveBeenCalled();
-    });
-
-    it("makes sure that buttons are specified", function () {
-        var args = {};
-        args.message = "Hello World";
-        args.message = encodeURIComponent(args.message);
-        index.customAskAsync(null, null, args);
-        expect(mockedPluginResult.error).toHaveBeenCalled();
-    });
-    it("makes sure that buttons is an array", function () {
-        var successCB = jasmine.createSpy(),
-            failCB = jasmine.createSpy(),
-            args = {buttons : 3};
-        args.message = "Hello World";
-        args.message = encodeURIComponent(args.message);
-        index.customAskAsync(null, null, args);
-        expect(mockedPluginResult.error).toHaveBeenCalledWith("buttons is not an array", false);
-    });
-
-    it("makes sure that the dialog is called properly for standard dialogs", function () {
-        var args = {};
-
-        spyOn(webview, "windowGroup").andReturn(42);
-        args.message = "Hello World";
-        args.type = 0;
-        args.settings = { title: "Hi" };
-        args.message = encodeURIComponent(args.message);
-        args.type = encodeURIComponent(args.type);
-        args.settings = encodeURIComponent(JSON.stringify(args.settings));
-
-        spyOn(overlayWebView, "showDialog").andCallFake(function (messageObj, callback) {
-            callback({
-                "ok": true
-            });
-        });
-        index.standardAskAsync(null, null, args);
-
-        expect(overlayWebView.showDialog).toHaveBeenCalled();
-        expect(mockedPluginResult.noResult).toHaveBeenCalledWith(true);
-        expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith({
-            "return": escape("Ok")
-        }, false);
-    });
-
-    it("makes sure that a message is specified for standard dialogs", function () {
-        var args = { type: encodeURIComponent(1) };
-        index.standardAskAsync(null, null, args);
-        expect(mockedPluginResult.error).toHaveBeenCalledWith("message is undefined", false);
-    });
-
-    it("makes sure the type is specified for standard dialogs", function () {
-        var args = {};
-        args.message = "Hello World";
-        args.message = encodeURIComponent(args.message);
-        index.standardAskAsync(null, null, args);
-        expect(mockedPluginResult.error).toHaveBeenCalledWith("type is undefined", false);
-    });
-
-    it("makes sure the type is valid for standard dialogs", function () {
-        var args = {};
-        args.message = "Hello World";
-        args.type = 6;
-        args.message = encodeURIComponent(args.message);
-        args.type = encodeURIComponent(args.type);
-
-        index.standardAskAsync(null, null, args);
-
-        expect(mockedPluginResult.error).toHaveBeenCalledWith("invalid dialog type: 6", false);
-    });
-});
diff --git a/test/unit/com.blackberry.ui.toast/client.js b/test/unit/com.blackberry.ui.toast/client.js
deleted file mode 100755
index f5ee937..0000000
--- a/test/unit/com.blackberry.ui.toast/client.js
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var root = __dirname + "/../../../../",
-    ID = "com.blackberry.ui.toast",
-    apiDir = root + "plugin/" + ID + "/",
-    client = null;
-
-describe("ui.toast", function () {
-    beforeEach(function () {
-        GLOBAL.cordova = {
-            exec: jasmine.createSpy("exec"),
-            require: function () {
-                return cordova.exec;
-            }
-        };
-        client = require(apiDir + "/www/client");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.cordova;
-        delete require.cache[require.resolve(apiDir + "/www/client")];
-    });
-
-    it("creates a simple toast", function () {
-        var message = "this is a simple toast";
-
-        client.show(message);
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "show", { message: message });
-    });
-
-    it("creates a complex toast with click and dismiss handlers", function () {
-        var message = "this is a complex toast",
-            buttonText = "button!",
-            buttonCallback = jasmine.createSpy(),
-            dismissCallback = jasmine.createSpy();
-
-        client.show(message, { buttonText : buttonText, buttonCallback : buttonCallback, dismissCallback: dismissCallback});
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "show", { message: message, options: { buttonText : buttonText, buttonCallback : buttonCallback, dismissCallback: dismissCallback}});
-    });
-
-    it("creates a complex toast with only click handler", function () {
-        var message = "this is a complex toast",
-            buttonText = "button!",
-            buttonCallback = jasmine.createSpy();
-
-        client.show(message,  {buttonText : buttonText, buttonCallback : buttonCallback});
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "show", { message: message, options: {  buttonText : buttonText, buttonCallback : buttonCallback}});
-    });
-
-    it("creates a complex toast with only dismiss handler", function () {
-        var message = "this is a complex toast",
-            buttonText = "button!",
-            dismissCallback = jasmine.createSpy();
-
-        client.show(message,  {buttonText : buttonText, dismissCallback : dismissCallback});
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "show", { message : message, options: {buttonText : buttonText, dismissCallback : dismissCallback}});
-    });
-
-    it("creates a complex toast with no handlers", function () {
-        var message = "this is a complex toast",
-            buttonText = "button!";
-
-        client.show(message, {buttonText : buttonText});
-        expect(cordova.exec).toHaveBeenCalledWith(jasmine.any(Function), jasmine.any(Function), ID, "show", { message: message, options: {buttonText: buttonText}});
-    });
-});
diff --git a/test/unit/com.blackberry.ui.toast/index.js b/test/unit/com.blackberry.ui.toast/index.js
deleted file mode 100755
index ce4a17c..0000000
--- a/test/unit/com.blackberry.ui.toast/index.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Copyright 2010-2011 Research In Motion Limited.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-var root = __dirname + "/../../../",
-    webview = require(root + "lib/webview"),
-    overlayWebView,
-    index;
-
-describe("ui.toast index", function () {
-    var mockedOverlayWebview,
-        mockQnx,
-        mockedToast,
-        mockedPluginResult,
-        storedDismissHandler,
-        storedCallbackHandler;
-
-    beforeEach(function () {
-        mockedOverlayWebview = {
-            toast : {
-                show : jasmine.createSpy("uiWebView.toast.show").andCallFake(function (message, options) {
-                    storedCallbackHandler = options.callbackHandler;
-                    storedDismissHandler = options.dismissHandler;
-                    return 73;
-                })
-            }
-        };
-
-        mockQnx = {
-            webplatform: {
-                getController: function () {
-                    return {
-                        addEventListener: function (eventType, callback) {
-                            callback(mockedOverlayWebview);
-                        }
-                    };
-                },
-                createUIWebView: function () {
-                    return {
-                        toast : mockedToast
-                    };
-                }
-            }
-        };
-
-        mockedPluginResult = {
-            callbackOk : jasmine.createSpy("PluginResult.callbackOk"),
-            ok: jasmine.createSpy("PluginResult.ok")
-        };
-
-        GLOBAL.window = {
-            qnx: mockQnx
-        };
-
-        GLOBAL.qnx = mockQnx;
-
-        GLOBAL.PluginResult = jasmine.createSpy("PluginResult").andReturn(mockedPluginResult);
-
-        index = require(root + "plugin/com.blackberry.ui.toast/index");
-    });
-
-    afterEach(function () {
-        delete GLOBAL.window;
-        delete GLOBAL.qnx;
-        delete GLOBAL.PluginResult;
-    });
-
-    it("shows toast", function () {
-        var noop = function () {},
-            mockArgs = {
-                message: encodeURIComponent(JSON.stringify("This is a toast")),
-                options: encodeURIComponent(JSON.stringify({ buttonText : 'Test'}))
-            };
-
-        index.show(noop, noop, mockArgs, null);
-        expect(mockedOverlayWebview.toast.show).toHaveBeenCalledWith("This is a toast", { buttonText : 'Test', callbackHandler: jasmine.any(Function), dismissHandler: jasmine.any(Function)});
-        expect(mockedPluginResult.ok).toHaveBeenCalledWith({reason: "created", toastId: jasmine.any(Number)}, true);
-
-        //test Callback Handler
-        storedCallbackHandler(42);
-        expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith({reason: "buttonClicked", toastId: 42}, true);
-
-        //test Dismiss Handler
-        storedDismissHandler(22);
-        expect(mockedPluginResult.callbackOk).toHaveBeenCalledWith({reason: "dismissed", toastId: 22}, false);
-    });
-});
-- 
1.7.10.msysgit.1

