<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Jasmine Spec Runner</title>
    <style type="text/css">
        #overlay {
            z-index:1000;
            position:absolute;
            top:0;
            bottom:0;
            left:0;
            width:100%;
            background:#fff;
            visibility:hidden;
        }

    </style>
    <link rel="stylesheet" type="text/css" href="../css/jasmine.css">
    <script type="text/javascript" src="../js/jasmine.js"></script>
    <script type="text/javascript" src="../js/jasmine-html.js"></script>
    <script type="text/javascript" src="local:///cordova.js"></script>
    <script type="text/javascript">
        var jasmineEnv = jasmine.getEnv(),
            htmlReporter = new jasmine.HtmlReporter(),
            isAutoLoaded = false;

        jasmineEnv.updateInterval = 1000;
        htmlReporter.reportRunnerResults = function(runner) {
            var suites = runner.suites(),
                suiteCount = {total: 0, passed: 0, failed: 0},
                specCount =  {total: 0, passed: 0, failed: 0},
                assertionCount = {total: 0, passed: 0, failed: 0},
                report = {
                    date: Date(),
                    OS: blackberry.system.softwareVersion,
                    HardwareID: blackberry.system.hardwareId,
                    suites: [],
                    details: {},
                    featureList: []
                },
                checkBoxes;

            checkBoxes = document.getElementById('featureList').elements;
            for (var i = 0; i < checkBoxes.length; ++i) {
                report.featureList.push(checkBoxes[i].value);
            }
            for (var i = 0; i < suites.length; ++i) {
                var suite = {
                        description: '',
                        passed: true,
                        assertionCount: {total: 0, passed: 0, failed: 0},
                        specs: []
                    },
                    specs = suites[i].specs();

                suite.description = suites[i].description;
                suite.assertionCount.total = suites[i].results().totalCount;
                suite.assertionCount.passed = suites[i].results().passedCount;
                suite.assertionCount.failed = suites[i].results().failedCount;
                if (suite.assertionCount.failed !== 0) {
                    suite.passed = false;
                }
                suiteCount.total += 1;

                for (var j = 0; j < specs.length; ++j) {
                    var spec = {
                            description: '',
                            passed: true,
                            assertions: {
                                total: 0,
                                passed: 0,
                                failed: 0
                            }
                        },
                        results = specs[j].results();

                    spec.description = specs[j].description;
                    spec.assertions.total = results.totalCount;
                    spec.assertions.passed = results.passedCount;
                    spec.assertions.failed = results.failedCount;
                    assertionCount.total += results.totalCount;
                    assertionCount.passed += results.passedCount;
                    assertionCount.failed += results.failedCount;
                    specCount.total += 1;

                    if (results.failedCount !== 0) {
                        spec.passed = false;
                        suite.passed = false;
                        specCount.failed += 1;
                    } else {
                        specCount.passed += 1;
                    }
                    suite.specs.push(spec);
                }
                if (suite.passed) {
                    suiteCount.passed += 1;
                } else {
                    suiteCount.failed += 1;
                }
                report.suites.push(suite);
            }

            if (console && console.log) {
                report.assertionCount = assertionCount;
                report.specCount = specCount;
                report.suiteCount = suiteCount;
                report.details = document.documentElement.innerHTML;
            }
            console.log(report);
            sendReport(report);
        };

        jasmineEnv.addReporter(htmlReporter);

        jasmineEnv.specFilter = function(spec) {
            return htmlReporter.specFilter(spec);
        };


        function execJasmine() {
            console.log("Running Testing");
            jasmineEnv.execute();
            console.log("Finish Testing");
        }

        function addChosenSpecs() {
            var checkBoxes = document.getElementById('featureList').elements;
            for (var i = 0; i < checkBoxes.length; i++) {
                console.log("Selected Specs#:", checkBoxes.length);
                if (checkBoxes[i].checked)
                {
                    addScript("spec/" + checkBoxes[i].value + ".js");
                }
            }
            if (!isAutoLoaded) {
                alert("The selected tests have been added, click the Run Jasmine button to execute the SpecRunner");
            } else {
                console.log("Load specs silently");
            }
        }

        function addScript(filePath) {
            var script = document.createElement("script");
                head = document.getElementsByTagName("head")[0];
            script.type = "text/javascript";
            script.src = filePath;
            head.appendChild(script);
        }

        function setAllBoxes(value) {
            var checkBoxes = document.getElementById('featureList').elements;
            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].hasOwnProperty('checked')) {
                    checkBoxes[i].checked = value;
                }
            }
        }

        function sendReport(report) {
            var xmlhttp = new XMLHttpRequest();
            console.log("Sending testing result now...");
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState==4 && xmlhttp.status==200) {
                    console.log(xmlhttp.responseText);
                }
            }
            xmlhttp.open("POST", "http://169.254.0.2:3000/report", true);
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xmlhttp.send(JSON.stringify(report));
        }

        function startAutoTest() {
            var xmlhttp = new XMLHttpRequest();
            console.log("Connecting to test server now...");
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    isAutoLoaded = true;
                    console.log("Start automated test: all specs will be selected");
                    setAllBoxes(true);
                    addChosenSpecs();
                    setTimeout(function () {
                        console.log("Start Testing");
                        execJasmine();
                        isAutoLoaded = false;
                    }, 2000);
                }
            }
            xmlhttp.open("GET", "http://169.254.0.2:3000/runAutoTest", true);
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xmlhttp.send();
        }

        document.addEventListener("deviceready", function () {
            startAutoTest();

          /*document.getElementById('addSpecs').onclick = addChosenSpecs;
            document.getElementById('selectAll').onclick = function () {
                setAllBoxes(true);
            };
            document.getElementById('deselectAll').onclick = function () {
                setAllBoxes(false);
            }*/
            document.getElementById('start').onclick = function () {
                var oldTests = document.getElementsByClassName('jasmine_reporter');
                for (var i = 0; i < oldTests.length; i++)
                {
                    oldTests[i].parentNode.removeChild(oldTests[i]);
                }
                execJasmine();
            };

            setAllBoxes(true);
            addChosenSpecs();
        });

  </script>

</head>

<body>
    <input id="backButton" type="button" value="Back" onclick="history.back();"/>
    <input id="reloadPage" type="button" value="Reload Page" onclick="window.location.reload(true);"><br /><br />

    <form id="featureList">
        <!--include spec files here-->
        <input type="checkbox" value="blackberry.app">blackberry.app</input><br />
        <input type="checkbox" value="blackberry.connection">blackberry.connection</input><br />
        <input type="checkbox" value="blackberry.identity">blackberry.identity</input><br />
        <input type="checkbox" value="invokeRequestEvent">invokeRequestEvent</input><br />
        <input type="checkbox" value="blackberry.invoke">blackberry.invoke</input><br />
        <input type="checkbox" value="blackberry.invoke.card">blackberry.invoke.card</input><br />
        <input type="checkbox" value="blackberry.invoked">blackberry.invoked</input><br />
        <input type="checkbox" value="blackberry.io.filetransfer">blackberry.io.filetransfer</input><br />
        <input type="checkbox" value="blackberry.io">blackberry.io</input><br />
        <input type="checkbox" value="blackberry.notification">blackberry.notification</input><br />
        <input type="checkbox" value="blackberry.push">blackberry.push</input><br />
        <input type="checkbox" value="blackberry.sensors">blackberry.sensors</input><br />
        <input type="checkbox" value="blackberry.system">blackberry.system</input><br />
        <input type="checkbox" value="blackberry.ui.contextmenu">blackberry.ui.contextmenu</input><br />
        <input type="checkbox" value="blackberry.ui.cover">blackberry.ui.cover</input><br />
        <input type="checkbox" value="blackberry.ui.dialog">blackberry.ui.dialog</input><br />
        <input type="checkbox" value="blackberry.ui.toast">blackberry.ui.toast</input><br />
        <!-- <input type="checkbox" value="blackberry.user.identity">blackberry.user.identity</input><br /> -->
        <input type="checkbox" value="blackberry.screenshot">blackberry.screenshot</input><br />
        <input type="checkbox" value="crossOrigin">crossOrigin</input><br />
        <input type="checkbox" value="enableFlash">enableFlash</input><br />
        <input type="checkbox" value="navigator.geolocation">navigator.geolocation</input><br />
    </form>
    <br />

    <!--
    <input id="selectAll" type="button" value="Select All" />
    <input id="deselectAll" type="button" value="De-select All" />
    <input id="addSpecs" type="button" value="Add Specs" />
    -->
    <p><small>NPI WebWorks Test App - May 21, 2014 (b2d468d05b89041fed45f4254fcac710d8a5c261)</small></p>
    <input id="start" type="button" value="Run Jasmine" /><br />
</body>
</html>
